/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include "atnf/Atoms/servo.hxx"
#ifdef AIPS_LINUX
#define _PSOS_
#endif

bool_t
xdr___ulonglong(register XDR *xdrs, __ulonglong *objp)
{

	if (!xdr_u_int(xdrs, &objp->h1))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->h0))
		return (FALSE);
	return (TRUE);
}
#ifdef _PSOS_

bool_t
xdr_servoRPC_AbsTime(register XDR *xdrs, servoRPC_AbsTime *objp)
{

	if (!xdr___ulonglong(xdrs, objp))
		return (FALSE);
	return (TRUE);
}
#else

bool_t
xdr_servoRPC_AbsTime(register XDR *xdrs, servoRPC_AbsTime *objp)
{

	if (!xdr_u_longlong_t(xdrs, objp))
		return (FALSE);
	return (TRUE);
}
#endif

bool_t
xdr___longlong(register XDR *xdrs, __longlong *objp)
{

	if (!xdr_int(xdrs, &objp->h1))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->h0))
		return (FALSE);
	return (TRUE);
}
#ifdef _PSOS_

bool_t
xdr_servoRPC_RelTime(register XDR *xdrs, servoRPC_RelTime *objp)
{

	if (!xdr___longlong(xdrs, objp))
		return (FALSE);
	return (TRUE);
}
#else

bool_t
xdr_servoRPC_RelTime(register XDR *xdrs, servoRPC_RelTime *objp)
{

	if (!xdr_longlong_t(xdrs, objp))
		return (FALSE);
	return (TRUE);
}
#endif

bool_t
xdr_servoRPC_ShapeInclude(register XDR *xdrs, servoRPC_ShapeInclude *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ReadoutName(register XDR *xdrs, servoRPC_ReadoutName *objp)
{

	if (!xdr_string(xdrs, objp, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_Status(register XDR *xdrs, servoRPC_Status *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_CoordSystem(register XDR *xdrs, servoRPC_CoordSystem *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_Pair(register XDR *xdrs, servoRPC_Pair *objp)
{

#if defined(_PSOS_)
	if (!xdr_int(xdrs, &((int *)(&objp->c1))[1]))
		return (FALSE);
	if (!xdr_int(xdrs, &((int *)(&objp->c1))[0]
#else
	if (!xdr_double(xdrs, &objp->c1
#endif
))
		return (FALSE);
#if defined(_PSOS_)
	if (!xdr_int(xdrs, &((int *)(&objp->c2))[1]))
		return (FALSE);
	if (!xdr_int(xdrs, &((int *)(&objp->c2))[0]
#else
	if (!xdr_double(xdrs, &objp->c2
#endif
))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_InterpScheme(register XDR *xdrs, servoRPC_InterpScheme *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_State(register XDR *xdrs, servoRPC_State *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_DeadZoneReasons(register XDR *xdrs, servoRPC_DeadZoneReasons *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ShapeSpec(register XDR *xdrs, servoRPC_ShapeSpec *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_Circle(register XDR *xdrs, servoRPC_Circle *objp)
{

	if (!xdr_servoRPC_CoordSystem(xdrs, &objp->coordSystem))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->centre))
		return (FALSE);
#if defined(_PSOS_)
	if (!xdr_int(xdrs, &((int *)(&objp->radius))[1]))
		return (FALSE);
	if (!xdr_int(xdrs, &((int *)(&objp->radius))[0]
#else
	if (!xdr_double(xdrs, &objp->radius
#endif
))
		return (FALSE);
	if (!xdr_servoRPC_ShapeInclude(xdrs, &objp->inOut))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_DeadZoneSpec(register XDR *xdrs, servoRPC_DeadZoneSpec *objp)
{

	if (!xdr_servoRPC_ShapeSpec(xdrs, &objp->shape))
		return (FALSE);
	switch (objp->shape) {
	case servoRPC_circle:
		if (!xdr_servoRPC_Circle(xdrs, &objp->servoRPC_DeadZoneSpec_u.circle))
			return (FALSE);
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_servoRPC_DeadZone(register XDR *xdrs, servoRPC_DeadZone *objp)
{

	if (!xdr_servoRPC_DeadZoneReasons(xdrs, &objp->reason))
		return (FALSE);
	if (!xdr_servoRPC_DeadZoneSpec(xdrs, &objp->zone))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_TrackPointRequest(register XDR *xdrs, servoRPC_TrackPointRequest *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->time))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->pos))
		return (FALSE);
#if defined(_PSOS_)
	if (!xdr_int(xdrs, &((int *)(&objp->maxError))[1]))
		return (FALSE);
	if (!xdr_int(xdrs, &((int *)(&objp->maxError))[0]
#else
	if (!xdr_double(xdrs, &objp->maxError
#endif
))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->flags))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_TrackPointShortRequest(register XDR *xdrs, servoRPC_TrackPointShortRequest *objp)
{

	if (!xdr_servoRPC_Pair(xdrs, &objp->pos))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->flags))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_TrackPointReadout(register XDR *xdrs, servoRPC_TrackPointReadout *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeTag))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->pos.pos_val, (u_int *) &objp->pos.pos_len, ~0,
		sizeof (servoRPC_Pair), (xdrproc_t) xdr_servoRPC_Pair))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->flags))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_DateTime(register XDR *xdrs, servoRPC_DateTime *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->dt.dt_val, (u_int *) &objp->dt.dt_len, 7,
		sizeof (u_int), (xdrproc_t) xdr_u_int))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_DataType(register XDR *xdrs, servoRPC_DataType *objp)
{

	if (!xdr_enum(xdrs, (enum_t *)objp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_DataName(register XDR *xdrs, servoRPC_DataName *objp)
{

	if (!xdr_servoRPC_DataType(xdrs, &objp->type))
		return (FALSE);
	if (!xdr_bool(xdrs, &objp->writable))
		return (FALSE);
	if (!xdr_string(xdrs, &objp->name, 16))
		return (FALSE);
	if (!xdr_int(xdrs, &objp->len))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_DataValue(register XDR *xdrs, servoRPC_DataValue *objp)
{

	if (!xdr_servoRPC_DataType(xdrs, &objp->type))
		return (FALSE);
	switch (objp->type) {
	case servoRPC_DTbool:
		if (!xdr_bool(xdrs, &objp->servoRPC_DataValue_u.DATbool))
			return (FALSE);
		break;
	case servoRPC_DTint:
		if (!xdr_int(xdrs, &objp->servoRPC_DataValue_u.DATint))
			return (FALSE);
		break;
	case servoRPC_DTdouble:
#if defined(_PSOS_)
		if (!xdr_int(xdrs, &((int *)(&objp->servoRPC_DataValue_u.DATdouble))[1]))
			return (FALSE);
		if (!xdr_int(xdrs, &((int *)(&objp->servoRPC_DataValue_u.DATdouble))[0]
#else
		if (!xdr_double(xdrs, &objp->servoRPC_DataValue_u.DATdouble
#endif
))
			return (FALSE);
		break;
	case servoRPC_DTabsTime:
		if (!xdr_servoRPC_AbsTime(xdrs, &objp->servoRPC_DataValue_u.DATabsTime))
			return (FALSE);
		break;
	case servoRPC_DTrelTime:
		if (!xdr_servoRPC_RelTime(xdrs, &objp->servoRPC_DataValue_u.DATrelTime))
			return (FALSE);
		break;
	case servoRPC_DTpair:
		if (!xdr_servoRPC_Pair(xdrs, &objp->servoRPC_DataValue_u.DATpair))
			return (FALSE);
		break;
	case servoRPC_DTstring:
		if (!xdr_string(xdrs, &objp->servoRPC_DataValue_u.DATstring, ~0))
			return (FALSE);
		break;
	case servoRPC_DTangle:
#if defined(_PSOS_)
		if (!xdr_int(xdrs, &((int *)(&objp->servoRPC_DataValue_u.DATangle))[1]))
			return (FALSE);
		if (!xdr_int(xdrs, &((int *)(&objp->servoRPC_DataValue_u.DATangle))[0]
#else
		if (!xdr_double(xdrs, &objp->servoRPC_DataValue_u.DATangle
#endif
))
			return (FALSE);
		break;
	case servoRPC_DTtime:
#if defined(_PSOS_)
		if (!xdr_int(xdrs, &((int *)(&objp->servoRPC_DataValue_u.DATtime))[1]))
			return (FALSE);
		if (!xdr_int(xdrs, &((int *)(&objp->servoRPC_DataValue_u.DATtime))[0]
#else
		if (!xdr_double(xdrs, &objp->servoRPC_DataValue_u.DATtime
#endif
))
			return (FALSE);
		break;
	default:
		return (FALSE);
	}
	return (TRUE);
}

bool_t
xdr_servoRPC_DataNameValue(register XDR *xdrs, servoRPC_DataNameValue *objp)
{

	if (!xdr_servoRPC_DataName(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->value.value_val, (u_int *) &objp->value.value_len, ~0,
		sizeof (servoRPC_DataValue), (xdrproc_t) xdr_servoRPC_DataValue))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ShortInfoValue(register XDR *xdrs, servoRPC_ShortInfoValue *objp)
{

	if (!xdr_array(xdrs, (char **)&objp->value.value_val, (u_int *) &objp->value.value_len, ~0,
		sizeof (servoRPC_DataValue), (xdrproc_t) xdr_servoRPC_DataValue))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_Name(register XDR *xdrs, servoRPC_Name *objp)
{

	if (!xdr_string(xdrs, objp, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ShortInfoReadout(register XDR *xdrs, servoRPC_ShortInfoReadout *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->info.info_val, (u_int *) &objp->info.info_len, ~0,
		sizeof (servoRPC_ShortInfoValue), (xdrproc_t) xdr_servoRPC_ShortInfoValue))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_AuthenticateIn(register XDR *xdrs, servoRPC_AuthenticateIn *objp)
{

	if (!xdr_bytes(xdrs, (char **)&objp->servoRPC_AuthenticateIn_val, (u_int *) &objp->servoRPC_AuthenticateIn_len, ~0))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetWDTimeoutOut(register XDR *xdrs, servoRPC_GetWDTimeoutOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_RelTime(xdrs, &objp->timeout))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetStaticInfoOut(register XDR *xdrs, servoRPC_GetStaticInfoOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_string(xdrs, &objp->antennaName, ~0))
		return (FALSE);
	if (!xdr_string(xdrs, &objp->antennaVersion, ~0))
		return (FALSE);
	if (!xdr_string(xdrs, &objp->antennaSite, 2))
		return (FALSE);
	if (!xdr_string(xdrs, &objp->deviceInstanceName, ~0))
		return (FALSE);
	if (!xdr_servoRPC_CoordSystem(xdrs, &objp->request))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->readouts.readouts_val, (u_int *) &objp->readouts.readouts_len, ~0,
		sizeof (servoRPC_CoordSystem), (xdrproc_t) xdr_servoRPC_CoordSystem))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->readoutNames.readoutNames_val, (u_int *) &objp->readoutNames.readoutNames_len, ~0,
		sizeof (servoRPC_ReadoutName), (xdrproc_t) xdr_servoRPC_ReadoutName))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->interpSchemes.interpSchemes_val, (u_int *) &objp->interpSchemes.interpSchemes_len, ~0,
		sizeof (servoRPC_InterpScheme), (xdrproc_t) xdr_servoRPC_InterpScheme))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->deadZones.deadZones_val, (u_int *) &objp->deadZones.deadZones_len, ~0,
		sizeof (servoRPC_DeadZone), (xdrproc_t) xdr_servoRPC_DeadZone))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->min))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->max))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->requestQueLen))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->readoutQueLen))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetInfoOut(register XDR *xdrs, servoRPC_GetInfoOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_State(xdrs, &objp->state))
		return (FALSE);
	if (!xdr_bool(xdrs, &objp->rebooted))
		return (FALSE);
	if (!xdr_servoRPC_InterpScheme(xdrs, &objp->interpScheme))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->pos.pos_val, (u_int *) &objp->pos.pos_len, ~0,
		sizeof (servoRPC_Pair), (xdrproc_t) xdr_servoRPC_Pair))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->reqPos))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->rate.rate_val, (u_int *) &objp->rate.rate_len, ~0,
		sizeof (servoRPC_Pair), (xdrproc_t) xdr_servoRPC_Pair))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->reqRate))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->target))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->estTime))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->requestQueSpace))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->readoutQueSpace))
		return (FALSE);
	if (!xdr_bool(xdrs, &objp->remOpBlocked))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->driveError.driveError_val, (u_int *) &objp->driveError.driveError_len, 2,
		sizeof (bool_t), (xdrproc_t) xdr_bool))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_StowIn(register XDR *xdrs, servoRPC_StowIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_StowOut(register XDR *xdrs, servoRPC_StowOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->estTime))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->maxTime))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_UnstowIn(register XDR *xdrs, servoRPC_UnstowIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_UnstowOut(register XDR *xdrs, servoRPC_UnstowOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->estTime))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->maxTime))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ParkIn(register XDR *xdrs, servoRPC_ParkIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ParkOut(register XDR *xdrs, servoRPC_ParkOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->estTime))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->maxTime))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_DriveResetIn(register XDR *xdrs, servoRPC_DriveResetIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_DriveResetOut(register XDR *xdrs, servoRPC_DriveResetOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->estTime))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->maxTime))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ExitLimitsIn(register XDR *xdrs, servoRPC_ExitLimitsIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ExitLimitsOut(register XDR *xdrs, servoRPC_ExitLimitsOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->estTime))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->maxTime))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_HaltIn(register XDR *xdrs, servoRPC_HaltIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_HaltOut(register XDR *xdrs, servoRPC_HaltOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->estTime))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->maxTime))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GotoIn(register XDR *xdrs, servoRPC_GotoIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->pos))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GotoOut(register XDR *xdrs, servoRPC_GotoOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->estTime))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->maxTime))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_TrackIn(register XDR *xdrs, servoRPC_TrackIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->points.points_val, (u_int *) &objp->points.points_len, ~0,
		sizeof (servoRPC_TrackPointRequest), (xdrproc_t) xdr_servoRPC_TrackPointRequest))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_TrackShortIn(register XDR *xdrs, servoRPC_TrackShortIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->startTime))
		return (FALSE);
	if (!xdr_servoRPC_RelTime(xdrs, &objp->interval))
		return (FALSE);
#if defined(_PSOS_)
	if (!xdr_int(xdrs, &((int *)(&objp->maxError))[1]))
		return (FALSE);
	if (!xdr_int(xdrs, &((int *)(&objp->maxError))[0]
#else
	if (!xdr_double(xdrs, &objp->maxError
#endif
))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->points.points_val, (u_int *) &objp->points.points_len, ~0,
		sizeof (servoRPC_TrackPointShortRequest), (xdrproc_t) xdr_servoRPC_TrackPointShortRequest))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_TrackOut(register XDR *xdrs, servoRPC_TrackOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetTrackIn(register XDR *xdrs, servoRPC_GetTrackIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetTrackOut(register XDR *xdrs, servoRPC_GetTrackOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->numOverflowed))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->points.points_val, (u_int *) &objp->points.points_len, ~0,
		sizeof (servoRPC_TrackPointReadout), (xdrproc_t) xdr_servoRPC_TrackPointReadout))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ClearTrackReadoutQueIn(register XDR *xdrs, servoRPC_ClearTrackReadoutQueIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ClearRebootIn(register XDR *xdrs, servoRPC_ClearRebootIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_ClearRebootOut(register XDR *xdrs, servoRPC_ClearRebootOut *objp)
{

	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_EstimateTimeIn(register XDR *xdrs, servoRPC_EstimateTimeIn *objp)
{

	if (!xdr_servoRPC_Pair(xdrs, &objp->start))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->end))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_EstimateTimeOut(register XDR *xdrs, servoRPC_EstimateTimeOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_RelTime(xdrs, &objp->minDelay))
		return (FALSE);
	if (!xdr_servoRPC_RelTime(xdrs, &objp->maxDelay))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetBeamwidthIn(register XDR *xdrs, servoRPC_GetBeamwidthIn *objp)
{

#if defined(_PSOS_)
	if (!xdr_int(xdrs, &((int *)(&objp->frequency))[1]))
		return (FALSE);
	if (!xdr_int(xdrs, &((int *)(&objp->frequency))[0]
#else
	if (!xdr_double(xdrs, &objp->frequency
#endif
))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetBeamwidthOut(register XDR *xdrs, servoRPC_GetBeamwidthOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_CoordSystem(xdrs, &objp->coordSystem))
		return (FALSE);
	if (!xdr_servoRPC_Pair(xdrs, &objp->width))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_SetDateTimeIn(register XDR *xdrs, servoRPC_SetDateTimeIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	if (!xdr_servoRPC_DateTime(xdrs, &objp->dateTime))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_SetDateTimeOut(register XDR *xdrs, servoRPC_SetDateTimeOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_AbsTime(xdrs, &objp->timeStamp))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_SetShortInfoNamesIn(register XDR *xdrs, servoRPC_SetShortInfoNamesIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->names.names_val, (u_int *) &objp->names.names_len, ~0,
		sizeof (servoRPC_Name), (xdrproc_t) xdr_servoRPC_Name))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_SetShortInfoNamesOut(register XDR *xdrs, servoRPC_SetShortInfoNamesOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetShortInfoIn(register XDR *xdrs, servoRPC_GetShortInfoIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetShortInfoNamesOut(register XDR *xdrs, servoRPC_GetShortInfoNamesOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->maxValues))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->names.names_val, (u_int *) &objp->names.names_len, ~0,
		sizeof (servoRPC_DataName), (xdrproc_t) xdr_servoRPC_DataName))
		return (FALSE);
	if (!xdr_u_int(xdrs, &objp->maxPoints))
		return (FALSE);
	if (!xdr_servoRPC_RelTime(xdrs, &objp->interval))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetShortInfoOut(register XDR *xdrs, servoRPC_GetShortInfoOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->points.points_val, (u_int *) &objp->points.points_len, ~0,
		sizeof (servoRPC_ShortInfoReadout), (xdrproc_t) xdr_servoRPC_ShortInfoReadout))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetNamedValueIn(register XDR *xdrs, servoRPC_GetNamedValueIn *objp)
{

	if (!xdr_servoRPC_DataName(xdrs, &objp->name))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetNamedValueOut(register XDR *xdrs, servoRPC_GetNamedValueOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_DataName(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->value.value_val, (u_int *) &objp->value.value_len, ~0,
		sizeof (servoRPC_DataValue), (xdrproc_t) xdr_servoRPC_DataValue))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetValuesOut(register XDR *xdrs, servoRPC_GetValuesOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->data.data_val, (u_int *) &objp->data.data_len, ~0,
		sizeof (servoRPC_DataNameValue), (xdrproc_t) xdr_servoRPC_DataNameValue))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_SetNamedValueIn(register XDR *xdrs, servoRPC_SetNamedValueIn *objp)
{

	if (!xdr_u_int(xdrs, &objp->token))
		return (FALSE);
	if (!xdr_servoRPC_DataName(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->value.value_val, (u_int *) &objp->value.value_len, ~0,
		sizeof (servoRPC_DataValue), (xdrproc_t) xdr_servoRPC_DataValue))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_SetNamedValueOut(register XDR *xdrs, servoRPC_SetNamedValueOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_servoRPC_DataName(xdrs, &objp->name))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->value.value_val, (u_int *) &objp->value.value_len, ~0,
		sizeof (servoRPC_DataValue), (xdrproc_t) xdr_servoRPC_DataValue))
		return (FALSE);
	return (TRUE);
}

bool_t
xdr_servoRPC_GetNameListOut(register XDR *xdrs, servoRPC_GetNameListOut *objp)
{

	if (!xdr_servoRPC_Status(xdrs, &objp->status))
		return (FALSE);
	if (!xdr_array(xdrs, (char **)&objp->names.names_val, (u_int *) &objp->names.names_len, ~0,
		sizeof (servoRPC_DataName), (xdrproc_t) xdr_servoRPC_DataName))
		return (FALSE);
	return (TRUE);
}
