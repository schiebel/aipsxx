/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <string.h> /* for memset */
#include "servo.hxx"
#ifdef AIPS_LINUX
#define _PSOS_
#endif
#ifdef _PSOS_
#else
#endif
#ifdef _PSOS_
#else
#endif

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

servoRPC_Status *
servo_rpc__ping_1(void *argp, CLIENT *clnt)
{
	static servoRPC_Status clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__PING,
		(xdrproc_t) xdr_void, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_Status, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_Status *
servo_rpc__authenticate_1(servoRPC_AuthenticateIn *argp, CLIENT *clnt)
{
	static servoRPC_Status clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__AUTHENTICATE,
		(xdrproc_t) xdr_servoRPC_AuthenticateIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_Status, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_Status *
servo_rpc__set_wd_timeout_1(servoRPC_RelTime *argp, CLIENT *clnt)
{
	static servoRPC_Status clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__SET_WD_TIMEOUT,
		(xdrproc_t) xdr_servoRPC_RelTime, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_Status, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetWDTimeoutOut *
servo_rpc__get_wd_timeout_1(void *argp, CLIENT *clnt)
{
	static servoRPC_GetWDTimeoutOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_WD_TIMEOUT,
		(xdrproc_t) xdr_void, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetWDTimeoutOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetStaticInfoOut *
servo_rpc__get_static_info_1(void *argp, CLIENT *clnt)
{
	static servoRPC_GetStaticInfoOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_STATIC_INFO,
		(xdrproc_t) xdr_void, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetStaticInfoOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetInfoOut *
servo_rpc__get_info_1(void *argp, CLIENT *clnt)
{
	static servoRPC_GetInfoOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_INFO,
		(xdrproc_t) xdr_void, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetInfoOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_Status *
servo_rpc__set_interp_scheme_1(servoRPC_InterpScheme *argp, CLIENT *clnt)
{
	static servoRPC_Status clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__SET_INTERP_SCHEME,
		(xdrproc_t) xdr_servoRPC_InterpScheme, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_Status, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_StowOut *
servo_rpc__stow_1(servoRPC_StowIn *argp, CLIENT *clnt)
{
	static servoRPC_StowOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__STOW,
		(xdrproc_t) xdr_servoRPC_StowIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_StowOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_UnstowOut *
servo_rpc__unstow_1(servoRPC_UnstowIn *argp, CLIENT *clnt)
{
	static servoRPC_UnstowOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__UNSTOW,
		(xdrproc_t) xdr_servoRPC_UnstowIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_UnstowOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_ParkOut *
servo_rpc__park_1(servoRPC_ParkIn *argp, CLIENT *clnt)
{
	static servoRPC_ParkOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__PARK,
		(xdrproc_t) xdr_servoRPC_ParkIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_ParkOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_DriveResetOut *
servo_rpc__reset_1(servoRPC_DriveResetIn *argp, CLIENT *clnt)
{
	static servoRPC_DriveResetOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__RESET,
		(xdrproc_t) xdr_servoRPC_DriveResetIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_DriveResetOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_ExitLimitsOut *
servo_rpc__exit_limits_1(servoRPC_ExitLimitsIn *argp, CLIENT *clnt)
{
	static servoRPC_ExitLimitsOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__EXIT_LIMITS,
		(xdrproc_t) xdr_servoRPC_ExitLimitsIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_ExitLimitsOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_HaltOut *
servo_rpc__halt_1(servoRPC_HaltIn *argp, CLIENT *clnt)
{
	static servoRPC_HaltOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__HALT,
		(xdrproc_t) xdr_servoRPC_HaltIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_HaltOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GotoOut *
servo_rpc__goto_1(servoRPC_GotoIn *argp, CLIENT *clnt)
{
	static servoRPC_GotoOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GOTO,
		(xdrproc_t) xdr_servoRPC_GotoIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GotoOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_TrackOut *
servo_rpc__track_1(servoRPC_TrackIn *argp, CLIENT *clnt)
{
	static servoRPC_TrackOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__TRACK,
		(xdrproc_t) xdr_servoRPC_TrackIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_TrackOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_TrackOut *
servo_rpc__track_short_1(servoRPC_TrackShortIn *argp, CLIENT *clnt)
{
	static servoRPC_TrackOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__TRACK_SHORT,
		(xdrproc_t) xdr_servoRPC_TrackShortIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_TrackOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_ClearRebootOut *
servo_rpc__clear_reboot_1(servoRPC_ClearRebootIn *argp, CLIENT *clnt)
{
	static servoRPC_ClearRebootOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__CLEAR_REBOOT,
		(xdrproc_t) xdr_servoRPC_ClearRebootIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_ClearRebootOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetTrackOut *
servo_rpc__get_track_1(servoRPC_GetTrackIn *argp, CLIENT *clnt)
{
	static servoRPC_GetTrackOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_TRACK,
		(xdrproc_t) xdr_servoRPC_GetTrackIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetTrackOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_Status *
servo_rpc__clear_track_readout_que_1(servoRPC_ClearTrackReadoutQueIn *argp, CLIENT *clnt)
{
	static servoRPC_Status clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__CLEAR_TRACK_READOUT_QUE,
		(xdrproc_t) xdr_servoRPC_ClearTrackReadoutQueIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_Status, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_EstimateTimeOut *
servo_rpc__estimate_time_1(servoRPC_EstimateTimeIn *argp, CLIENT *clnt)
{
	static servoRPC_EstimateTimeOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__ESTIMATE_TIME,
		(xdrproc_t) xdr_servoRPC_EstimateTimeIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_EstimateTimeOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetBeamwidthOut *
servo_rpc__get_beamwidth_1(servoRPC_GetBeamwidthIn *argp, CLIENT *clnt)
{
	static servoRPC_GetBeamwidthOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_BEAMWIDTH,
		(xdrproc_t) xdr_servoRPC_GetBeamwidthIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetBeamwidthOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_SetDateTimeOut *
servo_rpc__set_datetime_1(servoRPC_SetDateTimeIn *argp, CLIENT *clnt)
{
	static servoRPC_SetDateTimeOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__SET_DATETIME,
		(xdrproc_t) xdr_servoRPC_SetDateTimeIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_SetDateTimeOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_SetShortInfoNamesOut *
servo_rpc__set_shortinfo_names_1(servoRPC_SetShortInfoNamesIn *argp, CLIENT *clnt)
{
	static servoRPC_SetShortInfoNamesOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__SET_SHORTINFO_NAMES,
		(xdrproc_t) xdr_servoRPC_SetShortInfoNamesIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_SetShortInfoNamesOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetShortInfoNamesOut *
servo_rpc__get_shortinfo_names_1(void *argp, CLIENT *clnt)
{
	static servoRPC_GetShortInfoNamesOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_SHORTINFO_NAMES,
		(xdrproc_t) xdr_void, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetShortInfoNamesOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetShortInfoOut *
servo_rpc__get_shortinfo_1(servoRPC_GetShortInfoIn *argp, CLIENT *clnt)
{
	static servoRPC_GetShortInfoOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_SHORTINFO,
		(xdrproc_t) xdr_servoRPC_GetShortInfoIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetShortInfoOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetNamedValueOut *
servo_rpc__get_namedvalue_1(servoRPC_GetNamedValueIn *argp, CLIENT *clnt)
{
	static servoRPC_GetNamedValueOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_NAMEDVALUE,
		(xdrproc_t) xdr_servoRPC_GetNamedValueIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetNamedValueOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_SetNamedValueOut *
servo_rpc__set_namedvalue_1(servoRPC_SetNamedValueIn *argp, CLIENT *clnt)
{
	static servoRPC_SetNamedValueOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__SET_NAMEDVALUE,
		(xdrproc_t) xdr_servoRPC_SetNamedValueIn, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_SetNamedValueOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetNameListOut *
servo_rpc__get_namelist_1(void *argp, CLIENT *clnt)
{
	static servoRPC_GetNameListOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_NAMELIST,
		(xdrproc_t) xdr_void, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetNameListOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

servoRPC_GetValuesOut *
servo_rpc__get_values_1(void *argp, CLIENT *clnt)
{
	static servoRPC_GetValuesOut clnt_res;

	memset((char *)&clnt_res, 0, sizeof (clnt_res));
	if (clnt_call(clnt, SERVO_RPC__GET_VALUES,
		(xdrproc_t) xdr_void, (caddr_t) argp,
		(xdrproc_t) xdr_servoRPC_GetValuesOut, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}
