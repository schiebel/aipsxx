%% Copyright (C) 2000,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%

\begin{ahmodule}{bimafiller}{Module for converting a MIRIAD visibility file to a MeasurementSet}
\ahobjs{}
\ahfuncs{}

\begin{ahdescription}

The {\tt bimafiller} module containst the tool for converting a MIRIAD
visibility file to an \aipspp\ MeasurementSet.

{\bf NOTE:} This module is {\bf deprecated}. The {\tt mirfiller}
module replaces this one and should be used instead for converting
MIRIAD visibility files.

\end{ahdescription}

\begin{ahobject}{bimafiller}{Tool for converting a MIRIAD visibility
file to a MeasurementSet (deprecated)}
\ahmethods{}

\ahinclude{bimafiller.g}
 
\begin{ahdescription}

The {\tt bimafiller} tool is used to convert a MIRIAD visibility file
to an \aipspp\ MeasurementSet.

{\bf NOTE:} This tool is {\bf deprecated}. The {\tt mirfiller}
tool replaces {\tt bimafiller} and should be used instead for converting
MIRIAD visibility files.

\end{ahdescription}

\begin{ahconstructor}{bimafiller}{Construct the bimafiller tool}
\begin{ahargs}
  \ahaddarg{msname}{Filename for MeasurementSet to create}{''}{String}
  \ahaddarg{mirname}{Name of an input miriad visibility dataset (note,
  miriad datasets are directories).}{''}{String}
\end{ahargs}
\ahreturns{bimafiller tool}

\begin{ahdescription}

This constructor just creates the bimafiller tool, it does not do any actual
filling.

\end{ahdescription}

\begin{ahexample}
\begin{verbatim}
- mybf := bimafiller(msname='3c273.ms', mirname='3c273.vis')
\end{verbatim}
\end{ahexample}
\end{ahconstructor}

\begin{ahfunction}{fill}{Fill the data}
\ahreturns{T or F}

\begin{ahdescription}

This function does the actual filling of the data from miriad format
file to a MeasurementSet.

\end{ahdescription}
\begin{ahexample}
Fill the data from the miriad visibility file {\tt 3c273.vis} into the
MeasurementSet {\tt 3c273.ms}.
\begin{verbatim}
- mybf := bimafiller(msname='3c273.ms', mirname='3c273.vis')
- mybf.fill()
- mybf.done()
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{setoptions}{Set options to control the filling.}
\begin{ahargs}
  \ahaddarg{msname}{Filename for MeasurementSet to create}{''}{String}
  \ahaddarg{mirname}{Name of an input miriad visibility dataset}{''}{String}
\end{ahargs}

\begin{ahdescription}

Set the options to control the filling of the MeasurementSet.
Currently, only the input visibility file and output MeasurementSet
can be chosen, but further options will soon be added.

\end{ahdescription}

\ahreturns{T or F}

\begin{ahexample}
\begin{verbatim}
- mybf := bimafiller(mirname='3c273.vis')
- mybf.setoptions(msname='3c273.ms')
- mybf.fill()
- mybf.done()
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{gui}{Bring up a GUI for user interaction}
\ahreturns{T or F}

\begin{ahdescription}

This brings up a small GUI which allows the user to set the parameters
for the filler.  Currently, the only parameters that can be set are the
name of the input visibility dataset and the output MeasurementSet.
Logging of output from the filler is shown in the GUI as well.  The
filling can also be initiated from this tool.

\end{ahdescription}

\begin{ahexample}
\begin{verbatim}
- mybf := bimafiller(mirname='3c273.vis', msname='3c273.ms')
- mybf.gui()
- mybf.done()
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{done}{Destroy the bimafiller tool}
\ahreturns{T or F}

\begin{ahdescription}

This destroys the {\stff bimafiller} tool.

\end{ahdescription}
\end{ahfunction}

\end{ahobject}

\end{ahmodule}

