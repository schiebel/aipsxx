%% Copyright (C) 1999,2000,2001,2002
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
\documentclass{article}
\usepackage{aips2help}
\begin{document}
\begin{ahmodule}{bimatester}{Module for testing filling, calibration,
and imaging of BIMA data}
\ahinclude{bimatester.g}

\begin{ahdescription}

The {\tt bimatester} module provides functions for testing various
aspects of \aipspp\ on BIMA data.

The facilities of the {\tt bimatester} module are made available
in Glish by issuing the following command:

\begin{verbatim}
- include 'bimatester.g'
T
\end{verbatim}

where a hyphen precedes user input. The Glish response is indicated
without the prompt.

To run all the tests, simply run the {\tt bimatest} global function
\begin{verbatim}
- bimatest()
\end{verbatim}

\ahobjs{}
\ahfuncs{}

\begin{ahobject}{bimatester}{Testing of BIMA data}
\begin{ahdescription}
A {\tt bimatester} tool provides all the functionality required for
testing BIMA data.  The tools tests data by running various functions
for filling, calibrating, and imaging BIMA data.  It compares the
results with fiducial datasets located in the \aipspp\ Data
Repository.  The fiducial datasets were created using a Linux
installation using the GNU compiler.  The filling and calibration
tests can be performed on other architectures, but because the results
of imaging differ significantly from Linux to Solaris, this tool will
only do image tests if run on a Linux installation.

\end{ahdescription}

\ahfuncs{}

\begin{ahconstructor}{bimatester}{Construct a bimatester tool}
\begin{ahdescription}
Create a {\tt bimatester} tool.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Controls the level of output. 0 means run silently,
higher values produce more messages}{1}{Int} 
\end{ahargs}
\ahreturns{bimatester tool}
\begin{ahexample}
\begin{verbatim}
# create a bimatester tool, and specify you want a lot of output
- bt := bimatester(2)
\end{verbatim}
\end{ahexample}
\end{ahconstructor}

\begin{ahfunction}{runtests}{Run various tests}
\begin{ahdescription} 

Run various tests on BIMA data.  The user can specify which tests to
run.  However, imaging and cleaning tests will only be run on Linux
installations because the fiducial images were created using such and
installation and there are significant differences between imaging on
Linux and Solaris.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{fill}{Fill data and run filler tests?}{T}{Boolean}
\ahaddarg{calibrate}{Calibrate data and run calibration tests?}{T}{Boolean}
\ahaddarg{image}{Image data and run imaging tests?}{T}{Boolean}
\ahaddarg{image}{Clean the image and run deconvolution tests?}{T}{Boolean}
\end{ahargs}
\ahreturns{T if all specified tests pass, F otherwise}
\begin{ahexample}
\begin{verbatim}
- bt := bimatester(2);
# Run all available tests
+ bt.runtests();
Lots of messages
T
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{summary}{Summarize the test results}
\begin{ahdescription}

This function summarizes the test results by returning a record
containing the results and optionally printing a summary to the log.
A value of {\tt T} associated with a test means that it passed, {\tt
F} if it failed.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Print results to the log?}{T}{Boolean}
\end{ahargs}
\ahreturns{record of test results}
\begin{ahexample}
\begin{verbatim}
- bt := bimatester(2);
# Run all available tests
+ bt.runtests();
Lots of messages
T
- results := bt.summary()
NORMAL: BIMATESTER.FILLER: T
NORMAL: BIMATESTER.CALIBRATION: T
NORMAL: BIMATESTER.IMAGING: T
NORMAL: BIMATESTER.CLEANING: T
- print results;
[FILLER=T, CALIBRATION=T, IMAGING=T, CLEANING=T]
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\end{ahobject}

\begin{ahfunction}{bimatest}{A quick way to run tests.}
\begin{ahdescription}
This global function runs user-specified tests on BIMA data by
creating a {\tt bimatester} tool, running the tests, and optionally
prining a summary.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Controls the level of output. 0 means run silently,
higher values produce more messages}{1}{Int} 
\ahaddarg{summarize}{Summarize the results?}{T}{Boolean} 
\ahaddarg{fill}{Fill data and run filler tests?}{T}{Boolean}
\ahaddarg{calibrate}{Calibrate data and run calibration tests?}{T}{Boolean}
\ahaddarg{image}{Image data and run imaging tests?}{T}{Boolean}
\ahaddarg{image}{Clean the image and run deconvolution tests?}{T}{Boolean}
\end{ahargs}
\ahreturns{T if all tests passed, F otherwise}

\begin{ahexample}
\begin{verbatim}
- include 'bimatester.g';
- bimatest();
<Lots of messages>
T
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\end{ahmodule}

\end{document}



