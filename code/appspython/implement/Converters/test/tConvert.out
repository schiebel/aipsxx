Doing numpy/array test ...
VH Array<Short>
[-1 -2]
VH Array<Short>
[211 212]
>>>
VH Array<double>
<<<
(0,)
VH Array<String>
{'shape': [2, 2], 'array': ['abcd', 'c', '12', 'x12']}
bool 1
True
bool 0
False
Int -1
-1
Int 10
10
Float 3.14
3.1400001049
Float 12
12.0
String this is a string
this is a string
IPos [4, 3, 2]
[2, 3, 4]
IPos [1]
[1]
IPos [2]
[2]
IPos [3]
[3]
VecInt [1, 2, 3, 4]
[1, 2, 3, 4]
VecInt [-1, -2, -3, -4]
[-1, -2, -3, -4]
VecInt [-10]
[-10]
VecInt [10, 11, 12]
[10, 11, 12]
VecInt [1]
[1]
VecComplex [(1,2), (-1,-3), (-1.5,2.5)]
[(1+2j), (-1-3j), (-1.5+2.5j)]
VecStr [a1, a2, b1, b2]
['a1', 'a2', 'b1', 'b2']
VecStr [sc1]
['sc1']
VH Bool
True
VH Int
2
VH double
1.3
VH DComplex
(10-11j)
VH String
str
VH Array<Bool>
[1]
VH Array<Int>
[ 2  4  6  8 10]
VH Array<double>
[ 1.3  4.   5.   6. ]
VH Array<DComplex>
[ 10.-11.j   1. +2.j]
VH Array<String>
['str1', 'str2']
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<DComplex>
(2,)
VH Array<DComplex>
[ 10.-11.j   1. +2.j]
[[2 3]
 [4 5]]
VH Array<Int>
[[2 3]
 [4 5]]
[3 5 7 9]
VH Array<Int>
[3 5 7 9]
[ 3.  5.  7.  9.]
VH Array<double>
[ 3.  5.  7.  9.]
VH Array<double>
[ 3.  5.  7.  9.]
VH Array<DComplex>
[ 20.+10.j]
VH Array<double>
[ 21.]
>>>
VH Array<double>
<<<
(0,)
>>>
VH Array<double>
<<<
(1, 0)

Doing numarray/py test ...
VH Array<Short>
[-1 -2]
VH Array<Short>
[211 212]
>>>
VH Array<Int>
<<<
(0,)
VH Array<String>
{'shape': [2, 2], 'array': ['abcd', 'c', '12', 'x12']}
bool 1
True
bool 0
False
Int -1
-1
Int 10
10
Float 3.14
3.1400001049
Float 12
12.0
String this is a string
this is a string
IPos [4, 3, 2]
[2, 3, 4]
IPos [1]
[1]
IPos [2]
[2]
IPos [3]
[3]
VecInt [1, 2, 3, 4]
[1, 2, 3, 4]
VecInt [-1, -2, -3, -4]
[-1, -2, -3, -4]
VecInt [-10]
[-10]
VecInt [10, 11, 12]
[10, 11, 12]
VecInt [1]
[1]
VecComplex [(1,2), (-1,-3), (-1.5,2.5)]
[(1+2j), (-1-3j), (-1.5+2.5j)]
VecStr [a1, a2, b1, b2]
['a1', 'a2', 'b1', 'b2']
VecStr [sc1]
['sc1']
VH Bool
True
VH Int
2
VH double
1.3
VH DComplex
(10-11j)
VH String
str
VH Array<Bool>
[1]
VH Array<Int>
[ 2  4  6  8 10]
VH Array<double>
[ 1.3  4.   5.   6. ]
VH Array<DComplex>
[ 10.-11.j   1. +2.j]
VH Array<String>
['str1', 'str2']
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<String>
{'shape': [2, 2], 'array': ['str1', 'str2', 'str3', 'str4']}
VH Array<DComplex>
(2,)
VH Array<DComplex>
[ 10.-11.j   1. +2.j]
[[2 3]
 [4 5]]
VH Array<Int>
[[2 3]
 [4 5]]
[3 5 7 9]
VH Array<Int>
[3 5 7 9]
[ 3.  5.  7.  9.]
VH Array<double>
[ 3.  5.  7.  9.]
VH Array<double>
[ 3.  5.  7.  9.]
VH Array<DComplex>
[ 20.+10.j]
VH Array<double>
[ 21.]
>>>
VH Array<Int>
<<<
(0,)
>>>
VH Array<Int>
<<<
(1, 0)
