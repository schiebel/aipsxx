%% Copyright (C) 1999,2000,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: randomnumbers.help,v 19.2 2004/08/25 01:45:38 cvsmgr Exp $
\documentclass{book}
\usepackage{aips2help,html}
\begin{document}

\begin{ahobject}{randomnumbers}{Random numbers from various
statistical distributions}

\ahinclude{randomnumbers.g}

\ahcategory{mathematics}

\ahkeyword{random}{}

\ahmethods{}

\begin{ahdescription}

  The \texttt{randomnumbers} tool will generate pseudo-random numbers
  from a number of common distribution functions.

  This tool will generate random numbers from the following
  distributions:

  \begin{description}
  \item[normal] This is a continious distribution that is also known
    as the Gaussian distribution. The probability density function is
    given by:
    \begin{equation}
      p(x) = \frac{1}{\sigma\sqrt{2\pi}}
             \exp\left(\frac{-1}{2}\left(\frac{x-m}{\sigma}\right)^2\right)
    \end{equation}
    where $m$ is the mean and $\sigma^2$ is the variance.

  \item[uniform] This is a continuous distribution where every number
     between the specified upper and lower bounds is equally
     probable. The returned values include the lower bound but not the
     upper bound. The probability density function is given by:
     \begin{equation}
       p(x) = \frac{1}{u-l}
     \end{equation}
     where $u$ is the upper and $l$ is the lower bound.

  \item[discrete uniform] This is a discrete distribution where all the
     integral values between the specified upper and lower bounds are
     equally probable. The returned values include the lower \& upper
     bounds. The point probabilities are given by:
     \begin{equation}
       p(x) = \frac{1}{u-l}
     \end{equation}
     where $u$ is the upper and $l$ is the lower bound and $x$ is an
     integral value in the range $[l, u]$.

  \item[binomial] This is a discrete distribution where integers
     between zero and a specified number of throws $n$ may be
     returned.  The point probabilities are given by:
     \begin{equation}
       p(x) = \left(\begin{array}{c}n\\x\end{array}\right)
	      p^x\left(1-p\right)^{n-x}
     \end{equation}
     where $n$ is the number of throws, $p$ is the probability of
     of an individual throw and $x$ is an integer in the range  $[0, n]$.

  \item[poisson] This is a discrete distribution where non-negative 
     integers may be returned. The point probabilities are given by:
     \begin{equation}
       p(x) = \frac{e^{-m}m^x}{x!}
     \end{equation}
     where $m$ is the mean of of the distribution and $x$ is an
     integer in the range $[0, \infty)$.

  \item[geometric] This is a discrete distribution where non-negative 
     integers may be returned. The point probabilities are given by:
     \begin{equation}
       p(x) = p\left(1-p\right)^{x}
     \end{equation}
     where $p$ is a probability and $x$ is an integer in the range 
     $[0,\infty)$.
     
  \item[hypergeometric] This is a continuous distribution. 

  \item[erlang] This is a continuous distribution that is more
     commonly known as the Gamma distribution. The probability density 
     function is given by:
    \begin{equation}
      p(x) = \frac{1}{\Gamma\left(\alpha+1\right)\beta^{\alpha+1}}
             x^\alpha e^{-x/\beta}
    \end{equation}
    where the mean is given by $\beta(\alpha+1)$ and the variance is
    given by $\beta^2(\alpha+1)$. $\Gamma(x)$ is the gamma function.

  \item[lognormal] This is a continuous distribution.

  \item[negative exponential] This is a continuous distribution that is
    also  known as the exponential distribution. The probability
    density function is given by:
    \begin{equation}
      p(x) = \frac{1}{m}\exp\left(\frac{-x}{m}\right)
    \end{equation}
    where $m$ is the mean. $p(x)$ is zero when $x$ is negative. This
    distribution is sometimes known as the exponential distribution.     
  \item[weibull] This is a continuous distribution.

  \end{description}

  The builtin function \texttt{random()} of glish can be used to
  generate a sequence of uniformly distributed random numbers. These
  are random integers between optionally specified bounds. This is a
  discrete uniform distribution and hence is similar in functionality
  to the discreteuniform function in this tool.

  \begin{ahseealso}
    Handbook of Mathematical Functions, Abramowitz and Stegun

    The C++ class,
    \htmladdnormallink{Random.}{../../aips/implement/Mathematics/Random.html}

    The Glish built-in function, \ahlink{random.}{random0-func}

  \end{ahseealso}

\end{ahdescription}

\begin{ahexample}
  To use the functions in this tool we have to firstly, as shown in
  line 1, load the definition of the randomnumbers tool and then, as
  shown in line 2, construct a randomnumbers tool that will actually
  perform the computations.

  \begin{verbatim}
    include 'randomnumbers.g' #1
    rand := randomnumbers();  #2
  \end{verbatim}

  The \texttt{rand} tool is now ready for use. To generate a sequence
  of 100 random numbers which are normally distributed with a mean of
  0.5 and variance of 1.0 the normal function is used. ie.,
  \begin{verbatim}
    x := rand.normal(0.5, 1.0, 100);
  \end{verbatim}

  A 10 by 20 two-dimensional array of Poisson distributed random
  numbers, with a mean of 6.5, can be generated using,
  \begin{verbatim}
    x := rand.poisson(6.5, [10,20]);
  \end{verbatim}

  The glish variable \texttt{x} would now have a shape of
  \texttt{[10,20]}, where each element of which will be a random
  number from a poisson distribution.

  The random number generator will always produce the same sequence of
  numbers for a given set of seeds. To generate a new sequence of
  random numbers, one has to reset the random number generator by
  supplying a new seed.  This can be done using:
  \begin{verbatim}
    rand.reseed(12.34);
  \end{verbatim}
  where seed can be any number. If called with the unset value, which
  is the default, this function will use the glish
  random function to supply a seed.

  Once you are finished with this tool you should call the done
  function to release all the memory used by this tool. If
  no other tools are using the server then this will also be shut
  down.
  \begin{verbatim}
    rand.done();
  \end{verbatim}

\end{ahexample}

\begin{ahconstructor}{randomnumbers}{Construct an randomnumbers tool}
  \begin{ahdescription}
    Use this constructor to create a randomnumbers tool. This is the
    only way to create such a tool. After construction all
    randomnumbers tools are identical and will produce the same
    sequence of randomnumbers. To change this you need to use the
    reseed function.

    The host argument specifies which machine the precompiled server
    process should be started on. The default value of unset starts it
    on the same machine as the one that glish is running on. Starting
    a server process on a remote machine allows you to use the memory
    and cpu on that machine. As the randomnumbers tool does not use
    much memory or processor time this is usually not worth it.

    In order to run the server process on a remote machine you need to
    satisfy all the following conditions.
    \begin{itemize}
    \item It must be possible to start \aipspp\ on the remote machine
    \item You must be able to log onto the remote machine without
          having to type a password
    \item The AIPSPATH environment variable must be defined on the
          remote machine. You may want to set this up in the relevant
          ``dot'' file eg., adding a line like 
          \texttt{source~/usr/local/aips++/aipsinit.csh} in your 
          .cshrc file (for csh).
    \end{itemize}
    One quick way to check if all three conditions are met is to type, 
    on your local machine:
    \begin{verbatim}
        rsh host 'echo \$AIPSPATH'
    \end{verbatim}
    where host is replaced by the name of the remote machine. If the
    value of the AIPSPATH variable that is printed does not contain
    something like \texttt{aips-root~architecture~site~host} and that
    all the values are correct for the remote machine you can be
    certain that starting the any \aipspp\ server, on the remote host
    will not work

    Each server process can only run one function at a time. Hence it
    is not possible, for example, to simultaneously calculate two
    different random numbers sequences using one server. To solve this
    you start two servers. The forcenewserver argument allows you to
    do this by overriding the default behaviour of having each
    randomnumbers tool share the same server.

    For the randomnumbers tool, in 99.99\% of all cases, the default
    values for the host and forcenewserver arguments will be fine.
  \end{ahdescription}

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg[in]{host}{The host on which the server process should be run}
                 {unset}{string}
    \ahaddarg[in]{forcenewserver}{Always start a new server}
                 {F}{Boolean}
  \end{ahargs}
  \ahreturns{A randomnumbers tool}

  \begin{ahexample}
    \begin{verbatim}
      include 'randomnumbers.g'
      rand := randomnumbers();
      rand.reseed(10);
      print rand.uniform(-1, 3, 4);
      print rand.discreteuniform(-1, 3, [4,2]);
      rand.done() 
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example creates a randomnumbers tool, and sets the seed to a
    new value. It then prints the values for random numbers from two
    different, but similar distributions. Finally the tool is shutdown 
    to release all the memory it has consumed.
  \end{ahcomments}
\end{ahconstructor}

\begin{ahfunction}{binomial}{Generate binomially distributed random numbers}
  \begin{ahdescription}
    The binomial function will generate numbers that follow a binomial
    distribution. See the general tool description for a definition of
    the point probabilities.

    The number, $N$, can be any positive integer and the probability
    must be a number between zero and one. The result will be integers
    in the range $0 \leq x \leq N$. The shape can be either an integer
    or a vector of integers where all the values are greater than
    zero. The default value of one will produce a scalar output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{number}{Number of trials}{1}{integer}
    \ahaddarg[in]{probability}{probability of success for one trial}
                 {0.5}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{An integer scalar or array.}
  \begin{ahexample}
    \begin{verbatim}
      include 'randomnumbers.g'
      rand := randomnumbers();
      print rand.binomial(2, shape=100);
      rand.done() 
    \end{verbatim}
    This example will print random numbers that correspond to tossing
    two coins one hundred time and counting the number of heads. Hence
    zero will appear one quarter of the time, one appear half of the
    time and two will appear one quarter of the time.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{discreteuniform}
	{Generate uniformly distributed random integers}
  \begin{ahdescription}
    The discreteuniform function will generate integers that are
    uniformly distributed between the specified lower and upper
    bounds. Both the lower and upper bound are included in the range.
    See the general tool description for a more mathematical
    definition of the point probabilities.

    The lower and upper bounds can be any integer and the lower bound
    cannot be larger than the upper bound. The result will be integers
    in the range low~$\leq x \leq$~high. The shape can be either an integer
    or a vector of integers where all the values are greater than
    zero. The default value of one will produce a scalar output.
    \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{low}{Lower bound}{-1}{integer}
    \ahaddarg[in]{high}{Upper bound}{1}{integer}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{An integer scalar or array.}

  \begin{ahexample}
    See the example for the 
    \ahlink{randomnumbers}{utility:mathematics.randomnumbers.randomnumbers}
    constructor.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{erlang}
      {Generate random numbers that have an Erlang distribution.}
  \begin{ahdescription}
    The erlang function will generate numbers that follow a erlang, or
    Gamma distribution. See the general tool description for a
    mathematical definition of the probability density function.

    The mean can be any real number except zero and the variance must
    be a positive number. The result will be floating point numbers in
    the range $0 < x < \infty$ if the mean is positive and in the
    range $-\infty < x < 0$ if it is negative. The shape can be
    either an integer or a vector of integers where all the values are
    greater than zero. The default value of one will produce a scalar
    output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{mean}{Mean of the distribution}{1.0}{double}
    \ahaddarg[in]{variance}{Variance of the distribution}{1.0}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{A floating point scalar or array.}
  \begin{ahexample}
    \begin{verbatim}
      include 'randomnumbers.g'
      rand := randomnumbers();
      print rand.erlang(4, 8);
      rand.done() 
    \end{verbatim}
    This example will print a random number from the erlang distribution.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{geometric}
                  {Generate geometrically distributed random numbers}
  \begin{ahdescription}
    The geometric function will generate numbers that follow a geometric
    distribution. See the general tool description for a mathematical 
    definition of the point probabilities.

    The probability must be a number between zero and one. The result
    will be integers in the range $0 \leq x \leq N$. The shape can be
    either an integer or a vector of integers where all the values are
    greater than zero. The default value of one will produce a scalar
    output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{probability}{probability}
                 {0.5}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{An integer scalar or array.}
  \begin{ahexample}
    \begin{verbatim}
      include 'randomnumbers.g'
      rand := randomnumbers();
      print rand.geometric();
      rand.done() 
    \end{verbatim}
    This example will a random numbers from the geometric distribution 
    that has a probability of 0.5.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{hypergeometric}
      {Generate random numbers that have an hyper-geometric distribution.}
  \begin{ahdescription}

    The hypergeometric function will generate numbers that follow a
    hyper-geometric distribution. I cannot find a mathematical
    definition of a probability density function that represents the
    output produced by this function.

    The variance must be a positive number and the mean must be
    non-zero and less than the square-root of the variance. The result
    will be floating point numbers in the range $0 < x < \infty$ if
    the mean is positive and in the range $-\infty < x < 0$ if it is
    negative. The shape can be either an integer or a vector of
    integers where all the values are greater than zero. The default
    value of one will produce a scalar output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{mean}{Mean of the distribution}{0.5}{double}
    \ahaddarg[in]{variance}{Variance of the distribution}{1.0}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{A floating point scalar or array.}
  \begin{ahexample}
    \begin{verbatim}
      include 'randomnumbers.g'
      rand := randomnumbers();
      numbers := rand.hypergeometric(2, 8, 1E3);
      rand.done() 
    \end{verbatim}
    This example will calculate a thousand hypergeometric random numbers.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{normal}{Generate normally distributed random numbers}
  \begin{ahdescription}
    The normal function will generate numbers that follow a normal, or
    Gaussian distribution. See the general tool description for a
    mathematical definition of the probability density function.

    The mean can be any real number and the variance must be a
    positive number. The result will be floating point numbers in the
    range $-\infty < x < \infty$. The shape can be either an integer or
    a vector of integers where all the values are greater than
    zero. The default value of one will produce a scalar output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{mean}{Mean of the distribution}{0.0}{double}
    \ahaddarg[in]{variance}{Variance of the distribution}{1.0}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{A floating point scalar or array.}
  \begin{ahexample}
    See the example in the
    \ahlink{randomnumbers}{utility:mathematics.randomnumbers} tool
    description. 
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{lognormal}
                  {Generate random numbers with a log-normal distribution}
  \begin{ahdescription}
    The lognormal function will generate numbers that follow a
    log-normal distribution.  I cannot find a mathematical definition
    of a probability density function that represents the output
    produced by this function, but it appears to be similar to a
    Ricean distribution, which is the sum of the square of two
    Gaussian random variables.

    The mean and variance can be any positive number. The result will
    be floating point numbers in the range $0 < x < \infty$. The
    shape can be either an integer or a vector of integers where all
    the values are greater than zero. The default value of one will
    produce a scalar output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{mean}{Mean of the distribution}{1.0}{double}
    \ahaddarg[in]{variance}{Variance of the distribution}{1.0}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{A floating point scalar or array.}
  \begin{ahexample}
    \begin{verbatim}
      include 'randomnumbers.g'
      rand := randomnumbers();
      numbers := rand.lognormal(shape=[2,5]);
      rand.done() 
    \end{verbatim}
    This example will calculate ten log-normal random numbers, storing
    the result in a two-dimensional array of shape [2,5]. The mean and
    variance both default to 1.0.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{negativeexponential}
             {Generate random numbers with a negative-exponential distribution}
  \begin{ahdescription}
    The negativeexponential function will generate numbers that follow
    a negative-exponential or exponential distribution.  See the
    general tool description for a mathematical definition of the
    probability density function.

    The mean can be any positive number. The result will
    be floating point numbers in the range $0 < x < \infty$. The
    shape can be either an integer or a vector of integers where all
    the values are greater than zero. The default value of one will
    produce a scalar output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{mean}{Mean of the distribution}{1.0}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{A floating point scalar or array.}
  \begin{ahexample}
    \begin{verbatim}
      include 'randomnumbers.g'
      rand := randomnumbers();
      numbers := rand.negativeexponential(2);
      rand.done() 
    \end{verbatim}
    This example will calculate a random number from the
    negative-exponential distribution with a mean of two.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{poisson}{Generate Poisson distributed random numbers}
  \begin{ahdescription}
    The poisson function will generate numbers that follow a Poisson
    distribution. See the general tool description for a definition of
    the point probabilities.

    The mean can be any positive value. The result will be
    non-negative integers. The shape can be either an integer
    or a vector of integers where all the values are greater than
    zero. The default value of one will produce a scalar output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{mean}{Mean of the distribution}{1.0}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{An integer scalar or array.}
  \begin{ahexample}
    See the example in the
    \ahlink{randomnumbers}{utility:mathematics.randomnumbers} tool
    description. 
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{uniform}
	{Generate uniformly distributed random numbers}
  \begin{ahdescription}

    The uniform function will generate floating point numbers that are
    uniformly distributed between the specified lower and upper
    bounds. The lower is included in the range but the upper bond is
    not.  See the general tool description for a more mathematical
    definition of the point probabilities.

    The lower and upper bounds can be any value and the lower bound
    must be less than the upper bound. The result will be integers
    in the range low~$\leq x <$~high. The shape can be either an integer
    or a vector of integers where all the values are greater than
    zero. The default value of one will produce a scalar output.
    \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{low}{Lower bound}{-1.0}{integer}
    \ahaddarg[in]{high}{Upper bound}{1.0}{integer}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{A floating point scalar or array.}

  \begin{ahexample}
    See the example for the 
    \ahlink{randomnumbers}{utility:mathematics.randomnumbers.randomnumbers}
    constructor.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{weibull}
                  {Generate random numbers with a Weibull distribution}
  \begin{ahdescription}
    The weibull function will generate numbers that follow a
    Weibull distribution.  I cannot find a mathematical definition
    of a probability density function that represents the output
    produced by this function.

     Alpha parameter must be a non-zero number and beta can be any
     value. The result will be floating point numbers in the range $0
     < x < \infty$. The shape can be either an integer or a vector of
     integers where all the values are greater than zero. The default
     value of one will produce a scalar output.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{alpha}{The alpha parameter}{1.0}{double}
    \ahaddarg[in]{beta}{The beta parameter}{1.0}{double}
    \ahaddarg[in]{shape}{Shape of the output array}{1}
	         {integer or a vector of integers}
  \end{ahargs}
  \ahreturns{A floating point scalar or array.}
  \begin{ahexample}
    \begin{verbatim}
      include 'randomnumbers.g'
      rand := randomnumbers();
      numbers := rand.weibull(1.5, 8, 12);
      rand.done() 
    \end{verbatim}
    This example will calculate twelve weibull random numbers, storing
    the result in a vector.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{reseed}{Set the seed used by the random number generator.}
  \begin{ahdescription}
    The pseudo-random number generator that is used by the
    randomnumbers tool can be set to different states, which will make
    it generate different random numbers. Specifying a number as the
    argument to this function you will produce a repeatable sequence
    of random numbers. Alternatively if you use the default value of
    unset then the glish random function will be used to generate the
    seed and the resulting random numbers will not be a repeatable
    sequence.
  \end{ahdescription}

  \begin{ahargs}
    \ahaddarg[in]{seed}{seed}{unset}{double or unset}
  \end{ahargs}
  \ahreturns{T}
  \begin{ahexample}
    See the example in the
    \ahlink{randomnumbers}{utility:mathematics.randomnumbers} tool
    description. 
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{done}{Delete the randomnumbers tool}
  \begin{ahdescription}
    The done function frees up all the memory associated with a
    randomnumbers tool.  It will also shut down the server process if
    there are no other tools using the same server.
  \end{ahdescription}
  \ahreturns{T}
  \begin{ahexample}
    See the examples in the
    \ahlink{randomnumbers}{utility:mathematics.randomnumbers} tool
    description and the 
    \ahlink{randomnumbers}{utility:mathematics.randomnumbers.randomnumbers}
    constructor.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{type}{Return the type of this tool}
  \begin{ahdescription}
    This function returns the string `randomnumbers'.  It is used to
    determine if this glish variable is an randomnumbers tool.
  \end{ahdescription}
  \ahreturns{string}
\end{ahfunction}

\end{ahobject}


\begin{ahfunction}{randomnumbersdemo}{Demonstrate the randomnumbers tool}
  \begin{ahdescription}
    This function will demonstrate the the functions in the
    randomnumbers tool. It will send sample input and out put to the
    logger and then produce a pot showing examples of the different
    distributions available.
  \end{ahdescription}
  \ahreturns{T}
\end{ahfunction}


\begin{ahfunction}{randomnumberstest}{Test the randomnumbers class}
  \begin{ahdescription}
    This class tests the randomnumbers tool by running all the
    functions and comparing the output with expected values. It does
    not no do a full statistical analysis. It will send, to the
    logger, an list of the tests being done and whether it succeeded
    or failed. This function will terminate, and return a fail,
    whenever a test does not succeed.
  \end{ahdescription}
  \ahreturns{T of fail}
\end{ahfunction}

\end{document}


