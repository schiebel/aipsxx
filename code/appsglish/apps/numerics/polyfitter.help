%% Copyright (C) 1999,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: polyfitter.help,v 19.2 2004/08/25 01:45:23 cvsmgr Exp $
\documentclass{book}
\usepackage{aips2help,html}
\begin{document}
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{polyfitter}{Least-squares fit polynomials to data}

\ahinclude{polyfitter.g}

\ahcategory{mathematics}

\ahkeyword{fit}{}
\ahkeyword{polynomial}{}
\ahkeyword{least-squares}{}


\ahmethods{}


\begin{ahdescription}

{\tt polyfitter} is a class that does a linear least-squares fit of a
polynomial of a specified order to data. An optional estimate of the
errors in the data may be provided. Besides the coefficients, $\chi^2$
and the estimated errors in the coefficient are output. A function to
evaluate the fit polynomial is also provided.

At present, only fits to real data without constraints are supported.

The fits are carried out with double precision.

The computation is actually performed in a C++ executable, not in Glish.
Details about the algorithms are available in the documentation of the
underlying C++ fitting classes.

{\tt polyfitterdemo()} and {\tt polyfittertest()} functions are available.

\end{ahdescription}

\begin{ahexample}

First we need to get access to the polynomial fitting declarations and
create a fitting tool:
\begin{verbatim}
  include "polyfitter.g"
  fitter := polyfitter()
\end{verbatim}

Now lets manufacture some data from the polynomial: $y = 3x^2 + 5$
\begin{verbatim}
  x := 1:10        # 1,2,3,4,5,6,7,8,9,10
  y := 3*x*x + 5   # 8, ..., 305
\end{verbatim}

Now, lets perform the fit:
\begin{verbatim}
  ok := fitter.fit(coeff, coefferrs, chisq, x, y, order=2)
\end{verbatim}

All the parameters up to (but not including) {\tt x} are output
parameters, the others are all input errors. We did not provide an
error estimate $\sigma$, so the software assumes the errors are
identical for each data point and $\sigma = 1$. The variables have the
following meaning:
\begin{description}
  \item[ok]    The return value is True if the fit succeeds, False otherwise.
  \item[coeff] A vector containing the estimated (fit) coefficients. Coefficient
               zero ({\em i.e.}, the constant term) is first, the
               highest order coefficient is last.
  \item[coefferrs] The estimated errors in the fit coefficients.
  \item[chisq] The $\chi^2$ for this fit.
  \item[x,y] The data - x and y must be vectors having the same number of elements.
  \item[order] What order polynomial do we want to fit? We specify it this
               way because we have ``skipped over'' the defaulted {\tt sigma}
               argument. You can spell out all arguments this way if you like.
\end{description}

One can also fit several independent y vectors with a single call
using the multifit function.

The other function in this class is one to {\tt eval}uate a
polynomial. Usually it will be the polynomial or polynomialsyou have just fit, but 
it could be any polynomial you specify. For example, to find out the
largest deviation of the fit values from the data values we could do
the following:
\begin{verbatim}
  ok := fitter.eval(y2, x, coeff)
  print max(abs(y2 - y))
\end{verbatim}

\begin{description}
  \item[ok]    The return value is True if the fit succeeds, False otherwise.
               (Output)
  \item[y2] The polynomial evaluated at {\tt x}. (Output)
  \item[x] Where to evaluate the polynomial. (Input)
  \item[coeff] A vector containing the coefficients to use. Coefficient
               zero ({\em i.e.}, the constant term) is first, the
               highest order coefficient is last. (Input)
\end{description}

The coeff parameter in the eval function could be the result of a call to
fit or multifit.  If coeff is a vector, it will return a single polynomial
evaluated at x.  If coeff is a matrix (two dimensions), it will return
$N$ polynomials evaluated at x, where $N$ is the number of elements along the second
dimension of coeff.


\end{ahexample}

\begin{ahseealso}
\ahlink{polyfitterdemo}{mathematics:polyfitterdemo}
\ahlink{polyfittertest}{mathematics:polyfittertest}
\end{ahseealso}

\begin{ahfunction}{fit}{Fit a polynomial of a specified order to data}
\begin{ahargs}
\ahaddarg{coeff}{The coefficients of the fit. The constant (0th-order) term is first, highest order term last. (Output)}{}{}
\ahaddarg{coefferrs}{Estimated errors of the fit. (Output)}{}{}
\ahaddarg{chisq}{$\chi^2$ for the fit. (Output)}{}{}
\ahaddarg{x}{(Input)}{}{}
\ahaddarg{y}{Must be the same length as ``x''. (Input)}{}{}
\ahaddarg{sigma}{Errors in the ``y'' values. (Input) }{1.0}{}
\ahaddarg{order}{Order of the highest term in the polynomial to fit. (Input)}{1}{$0\le order \le 10$}
\end{ahargs}
\ahreturns{Bool --- did the fit succeed}
\begin{ahdescription}
Fit a polynomial to data.
\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{multifit}{Fit several sets of data to polynomials}
\begin{ahargs}
\ahaddarg{coeff}{The coefficients of the fit. The constant (0th-order)
term is first, highest order term last. coeff[,1] are the coefficients
for the first fit, coeff[,2] for the second, and so on. (Output)}{}{}
\ahaddarg{coefferrs}{Estimated errors of the fit. coefferrs[,i] are
the errors for the ith fit. (Output)}{}{}
\ahaddarg{chisq}{$\chi^2$ for the fit. chisq[i] is the chi-square for
the i'th fit. (Output)}{}{}
\ahaddarg{x}{One dimensional array. (Input)}{}{}
\ahaddarg{y}{Must be the same length as ``x'' in its first axis, the
length of the second axis is the number of fits to do. (Input)}{}{}
\ahaddarg{sigma}{Errors in the ``y'' values. If one dimensional, the
sigmas are assumed to be the same for all fits. (Input) }{1.0}{}
\ahaddarg{order}{Order of the highest term in the polynomial to fit. (Input)}{1}{$0\le order \le 10$}
\end{ahargs}
\ahreturns{Bool --- did the fit succeed}
\begin{ahdescription}
Fits a polynomial to multiple data sets (which must share the same x
however)\footnote{This restriction could be relaxed. Let us know if it would
be useful to do so.}. Basically, this is the same as {\tt fit} (without an
error message - errors are in the log messages), except the dimensionality of
all arguments is one higher. This function runs in C++ at the same speed as
{\tt fit}, however it minimizes the communication over the Glish bus,
which would limit you to 100 fits or less per second.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
  include "polyfitter.g"
T 
  x := 1:100
  y := array(0, 100, 3)
  y[,1] := 5                    # constant
  y[,2] := 2*x                  # linear       
  y[,3] := 10*x*x               # square    
  fitter := polyfitter()
  fitter.multifit(coeff, coefferrs, chisq, x, y, order=2) 
1 
  coeff[,1]                     # the first fit
[5 -2.98023e-08 0]  
  coeff[,2]                     # the second fit
[0.00126371 2 3.93629e-08]  
  coeff[,3]                     # the third fit
[0.00238887 -0.000247818 10]  
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{eval}{Evaluate a polynomial (usually the result of a fit)}
\begin{ahargs}
\ahaddarg{y}{Values of the evaluated polynomial.  If coeff has two dimensions,
y[,1] is the evaluation using coeff[,1], y[,2] corresponds to coeff[,2] and
so on.(Output)}{}{}
\ahaddarg{x}{The independent variable. (Input)}{}{}
\ahaddarg{coeff}{The coefficients in the order as emitted by fit or multifit.(Input)}{}{}
\end{ahargs}
\ahreturns{Bool --- did the evaluation succeed}
\begin{ahdescription}
Evaluate a polynomial. Normally you will be evaluating the result of a fit, but
you can evaluate a polynomial from any other source as well.
\end{ahdescription}
\end{ahfunction}


\end{ahobject}

%%%%%%%%%% Global functions

\begin{ahfunction}{polyfitterdemo}{Demonstrate the use of functions in polyfitter}

\ahinclude{polyfitter.g}
\begin{ahdescription}
Demonstrate the use of the functions in polyfitter. Inputs and results
are sent to the logger.
\end{ahdescription}
\begin{ahseealso}
\ahlink{polyfitter}{mathematics:polyfitter}
\end{ahseealso}
\ahreturns{Bool: T for success}
\end{ahfunction}

\begin{ahfunction}{polyfittertest}{Test the polyfitter class}

\ahinclude{polyfitter.g}
\begin{ahdescription}
This class purports to test the polyfitter class. In fact, all it does
currently is run polyfitterdemo.
\end{ahdescription}
\begin{ahseealso}
\ahlink{polyfitter}{mathematics:polyfitter}
\ahlink{polyfitterdemo}{mathematics:polyfitterdemo}
\end{ahseealso}
\ahreturns{Bool: T for success}
\end{ahfunction}


\end{document}


