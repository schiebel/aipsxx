%% Copyright (C) 1999,2000
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: matrix.help,v 19.3 2004/08/25 01:45:08 cvsmgr Exp $
\documentclass{book}
\usepackage{aips2help,html}
\begin{document}
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

%===================================================================
\begin{ahobject}{matrix}{A collection of matrix/vector routines}
%===================================================================

\ahinclude{matrix.g}

\ahcategory{mathematics}

\ahkeyword{matrix}{}
\ahkeyword{vector}{}

\ahmethods{}


\begin{ahdescription}

\emph{The functions in this tool have not been tested as rigorously
as other parts of \aipspp. This tool can be considered ``alpha'' code.}

{\tt matrix} is a collection of common matrix and vector operations in
Glish. It includes the Direct Matrix Product (used in the \aipspp\
Measurement Equation), and a simple matrix inversion which also works
with rectangular matrices. The latter should in time be replaced by a
C++ executable (DO), which should then implement a choice of more
sophisticated techniques than Gauss-Jordan inversion. All operations
also work with complex numbers.

NB: Glish itself provides a number of element-by-element vector and
array operations like addition etc. These have not been duplicated 
here.

\end{ahdescription}

\begin{ahexample}
The functions are encapsulated in a separate tool, and take matrices
and vectors as arguments:
\begin{verbatim}
- include "matrix.g"
- mx.help();
\end{verbatim}
Now, let us do a matrix multiplication:
\begin{verbatim}
- m1 := array([1:6],2,3);
- print m1;
- m2 := array([1:12],3,4);
- print m2;
- m3 := mx.mult(m1,m2);
- print m3;
\end{verbatim}
\end{ahexample}

%---------------------------------------------------------------
\begin{ahfunction}{unitmatrix}{make an $n\times n$ unit matrix}
\begin{ahargs}
\ahaddarg{n}{the length of the diagonal (Input) }{}{}
\end{ahargs}
\end{ahfunction}

%-----------------
\begin{ahfunction}{diagonalmatrix}{make an $n\times n$ diagonal matrix}
\begin{ahargs}
\ahaddarg{diag}{the matrix diagonal (vector) (Input) }{}{}
\end{ahargs}
\end{ahfunction}

%-----------------
\begin{ahfunction}{rotationmatrix}{make a $2\times 2$ rotation matrix}
\begin{ahargs}
\ahaddarg{angle}{The rotation angle $\phi$ (rad) (Input) }{}{}
\ahaddarg{deg}{If T, the angle is in degrees (Input) }{F}{}
\end{ahargs}
\begin{ahdescription}
  A $2\times 2$ rotation matrix can be used to rotate a 2D vector over 
the given angle $\phi$. 
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{rotate}{rotate a 2D (plain) vector}
\begin{ahargs}
\ahaddarg{v}{The 2x2 vector to be rotated (Input) }{}{}
\ahaddarg{angle}{The rotation angle $\phi$ (rad) (Input) }{}{}
\ahaddarg{deg}{If T, the angle is in degrees (Input) }{F}{}
\end{ahargs}
\ahreturns{rotated vector}
\begin{ahdescription}
Rotates the 2D vector v over the given angle $\phi$. 
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{mult}{matrix multiplication}
\begin{ahargs}
\ahaddarg{m1}{The first $(m\times k)$ matrix (Input) }{}{}
\ahaddarg{m2}{The second $(k\times n)$ matrix (Input) }{}{}
\end{ahargs}
\ahreturns{an $m\times n$ matrix}
\begin{ahdescription}
  Returns the product of the input matrices. Glish vectors are 
interpreted as matrices with one of their dimensions equal to one.  
\end{ahdescription}
\end{ahfunction}


%-----------------
\begin{ahfunction}{directproduct}{Direct Matrix Product}
\begin{ahargs}
\ahaddarg{m1}{The first $(n\times m)$ matrix (Input) }{}{}
\ahaddarg{m2}{The second $(p\times q)$ matrix (Input) }{}{}
\end{ahargs}
\ahreturns{an $(n.p\times m.q)$ matrix}
\begin{ahdescription}
  Returns the Direct Matrix Product (or tensor product, or Kronecker
product) of two rectangular matrices of arbitrary shape. It is used in
the \aipspp\ Measurement Equation, where the $(4\times 4)$ matrix that
describes the instrumental effects of an interferometer is the Direct
Product of two $(2\times 2)$ antenna `Jones' matrices.
\end{ahdescription} 
\end{ahfunction}

%-----------------
\begin{ahfunction}{crossproduct}{vector cross-product}
\begin{ahargs}
\ahaddarg{v1}{The first 3D vector (Input) }{}{}
\ahaddarg{v2}{The second 3D vector (Input) }{}{}
\end{ahargs}
\ahreturns{vector}
\begin{ahdescription}
  Returns a vector which is the cross-product (or outer product) 
of two 3D input vectors. The output vector is perpendicular to
the plane of the two input vectors.
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{dotproduct}{vector dot-product}
\begin{ahargs}
\ahaddarg{v1}{The first vector (Input) }{}{}
\ahaddarg{v2}{The second vector (Input) }{}{}
\end{ahargs}
\ahreturns{scalar}
\begin{ahdescription}
Returns the dot-product (or inner product) of two vectors of the 
same length. The result is proportional to the cosine of the angle 
between them (see also the functions .angle() and .cosangle() below).
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{angle}{Find the angle between two vectors}
\begin{ahargs}
\ahaddarg{v1}{The first vector (Input) }{}{}
\ahaddarg{v2}{The second vector (Input) }{}{}
\ahaddarg{deg}{If T, the result is in degrees (Input) }{F}{}
\end{ahargs}
\ahreturns{angle}
\begin{ahdescription}
Returns the angle (in rad or deg) between the two input vectors, 
which must be of equal length.
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{cosangle}{Find the cosine of the angle between two vectors}
\begin{ahargs}
\ahaddarg{v1}{The first vector (Input) }{}{}
\ahaddarg{v2}{The second vector (Input) }{}{}
\end{ahargs}
\ahreturns{angle}
\begin{ahdescription}
Returns the cosine of the angle between the two input
vectors, which must of course be of equal length.
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{transpose}{Transpose a matrix}
\begin{ahargs}
\ahaddarg{m}{The given $n\times m$ matrix (Input) }{}{}
\end{ahargs}
\ahreturns{An $m\times n$ matrix}
\end{ahfunction}

%----------------- 
\begin{ahfunction}{invert}{Invert a matrix}
\begin{ahargs} 
\ahaddarg{m}{The matrix to be inverted (Input) }{}{}
\end{ahargs} \ahreturns{matrix} 
\begin{ahdescription} 
The inversion function is
Gauss-Jordan substitution with full pivoting.  The input matrix may be
rectangular. If the number of rows (equations) is greater then the
number of columns (unknowns), the inverted matrix represents a
least-squares fit. The input matrix is not affected.
If the input matrix is singular, a fail is returned.  
\end{ahdescription} 
\end{ahfunction}


%-----------------
\begin{ahfunction}{norm}{the `norm' of a vector or matrix}
\begin{ahargs}
\ahaddarg{m}{array (Input) }{}{}
\end{ahargs}
\begin{ahdescription}
Returns the square root of the sum of the elements.
For a vector this is called the norm, i.e. the square of its length.
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{mean}{the mean of the elements}
\begin{ahargs}
\ahaddarg{m}{array (Input) }{}{}
\end{ahargs}
\end{ahfunction}

%-----------------
\begin{ahfunction}{rms}{the root mean square (rms) of the elements}
\begin{ahargs}
\ahaddarg{m}{array (Input) }{}{}
\end{ahargs}
\begin{ahdescription}
Returns the rms of the elements (w.r.t. the mean).
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{symbolic}{Make a symbolic matrix/vector}
\begin{ahargs}
\ahaddarg{name}{The `root' name of an element (Input) }{}{}
\ahaddarg{nrow}{The nr of rows (Input) }{}{}
\ahaddarg{ncol}{Optional: The nr of columns (Input) }{F}{}
\end{ahargs}
\ahreturns{a string matrix or vector}
\begin{ahdescription}
This function looks ahead to the possibility of symbolic computation
in Glish. It returns a $nrow\times ncol$ matrix with string
elements of the form 'a12' etc. If the ncol argument is omitted,
the result is a string vector: ['a1','a2','a3','a4'].
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{print}{print a matrix/vector}
\begin{ahargs}
\ahaddarg{m}{The vector/matrix to be printed (Input) }{}{}
\ahaddarg{name}{Optional: a header text (Input) }{' '}{}
\ahaddarg{prec}{Optional: the printing precision (Input) }{0}{}
\end{ahargs}
\begin{ahdescription}
Prints the matrix m in an organised way. Useful for seeing what is
going on. Not very well developed at the moment. 
\end{ahdescription}
\end{ahfunction}

%-----------------
\begin{ahfunction}{help}{print a summary of matrix functions}
\end{ahfunction}

%-----------------
\begin{ahfunction}{test}{a test of most matrix functions}
\end{ahfunction}

%===================================================================
\end{ahobject}
%===================================================================

\end{document}


