%% Copyright (C) 1999,2000,2001,2002
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: simulator.help,v 19.1 2004/08/25 01:52:53 cvsmgr Exp $
\begin{ahmodule}{simulator}{Module for simulation of telescope data}
\ahinclude{simulator.g}

\begin{ahdescription} 

{\tt simulator} provides a unified interface for simulation of
telescope processing. It can create a MeasurementSet from scratch or
read in an existing MeasurementSet, it can predict synthesis data onto
the (u,v) coordinates or single dish data onto (ra,dec) points, and it
can corrupt this data through Gaussian errors or through specific
errors residing in (anti-) calibration tables.


{\tt simulator} changes some columns to the MeasurementSet to store
results of processing. The following columns in the MS are
particularly important:
\begin{description}
\item[DATA] The original observed visibilities are in a column
called DATA. These are normally not altered by any processing in
\aipspp. However, this simulation program does overwrite these
values.
\item[CORRECTED\_DATA] During a calibration process, as carried out by
{\em e.g.} \ahlink{calibrater}{calibrater}, the visibilities may be
corrected for calibration effects. This corrected visibilities are
stored in a column CORRECTED\_DATA which is created on demand.
\item[MODEL\_DATA] During various phases of processing, the
visibilities as predicted from some model are required. These 
model visibilities are stored in a column MODEL\_DATA. The 
\ahlink{ft}{imager:imager.ft} function of the \ahlink{imager}{imager:imager}
tool should be used to calculate the model visibility for a
model image or \ahlink{componentmodels}{componentmodels}.
\end{description}
Standard tools such as the \ahlink{table}{table} module and the
\ahlink{ms}{ms} can be used to access and possibly change these (and
all other) columns.

\end{ahdescription}

\ahobjs{}
\ahfuncs{}

\begin{ahobject}{simulator}{Tool for simulation}
\begin{ahdescription}
simulator is a tool that performs simulation of synthesis data.
\end{ahdescription}

\ahfuncs{}

\begin{ahconstructor}{simulator}{Construct a simulator tool}
\begin{ahdescription}
This is used to construct {\tt simulator} tools.  A simulator tool
can either be instantiated from an existing MeasurementSet, predicting
and/or corrupting data on the given coordinates, or it can be used to
create a fundamentally new MeasurementSet from descriptions of the
array configuration and the observational parameters.  This
constructor takes no arguments and is useful for making a simulator
tool which will make a MeasurementSet from scratch.  In order to
do this, you must also run {\tt setconfig}, {\tt setfield}, 
{\tt setspwindow}, {\tt setfeed}, and {\tt settimes}.  Creating the
actual MS is performed by {\tt create}.  Data can be {\tt predict}-ed
and then {\tt corrupted}-ed.  In this
example, we read in the antenna coordinates from an ASCII file:
\end{ahdescription}
\begin{ahargs}
\end{ahargs}
\ahreturns{simulator tool}
\begin{ahexample}
\begin{verbatim}
  tabname := 'VLAC.LOCAL.TAB';  asciifile := 'VLAC.LOCAL.STN'
  mytab := tablefromascii(tabname, asciifile);
  xx:=[]; yy:=[]; zz:=[]; diam:=[];
  xx := mytab.getcol('X');  
  yy := mytab.getcol('Y');
  zz := mytab.getcol('Z');
  diam := mytab.getcol('DIAM');
#
  mysim := simulator();
# do configuration
  posvla := dm.observatory('vla');  #  dm.observatory('ALMA') also works!
  mysim.setconfig(telescopename='VLA', x=xx, y=yy, z=zz, dishdiameter=diam, 
	        mount='alt-az', antname='VLA',
                coordsystem='local', referencelocation=posvla);

  mysim.settimes( integrationtime='60s', gaptime='10s', starttime='0h',
                stoptime='2h', referencetime='51483.1877d');

  dir0 := dm.direction('b1950',  '0h0m0.0', '0d0m0.0') 
  mysim.setfield( row=1, sourcename='Test_A', sourcedirection=dir0,
                integrations=1, xmospointings=1, ymospointings=1,
                mosspacing='0deg');
  dir1 := dm.direction('b1950', '1h0m0.0', '30d0m0.0') 
  mysim.setfield( row=2, sourcename='Test_B', sourcedirection=dir1,
                integrations=1, xmospointings=3, ymospointings=1,
                mosspacing='0deg');

  mysim.setspwindow( row=1, spwname='XBAND', freq='8.0GHz',
		deltafreq='50MHz', freqresolution='50MHz',
		nchannels=2, stokes='RR LL');

  mysim.setfeed(mode='perfect R L');

  mysim.create(newms='NEW1.MS',  shadowlimit=0.001, 
                elevationlimit='8.0deg',autocorrwt=0.2 );

  mysim.predict(modelimage='M31.MOD');
  mysim.close();
\end{verbatim}
\end{ahexample}
\end{ahconstructor}




\begin{ahconstructor}{simulatorfromms}{Construct a simulator tool from a MS}
\begin{ahdescription}
This is used to construct {\tt simulator} tools operating on
an existing MS.  Data can be predicted and/or corrupted on the MS's given coordinates.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{ms}{MeasurementSet to be processed}{'MS'}{Table name}
\end{ahargs}
\ahreturns{simulator tool}
\begin{ahexample}
\begin{verbatim}
mysim := simulatorfromms('3C273XC1.MS);
mysim.predict('3C273XC1.modelImage');
mysim.setnoise(simplenoise='10mJy');
mysim.setgain(interval='100s', amplitude=[0.01, 0.01]);
mysim.corrupt();
mysm.close();

\end{verbatim}
\end{ahexample}
\end{ahconstructor}



\begin{ahconstructor}{simulatortester}{Construct a simulator tool for 
testing}
\begin{ahdescription}
This creates a {\tt simulator} tool that one can use for testing. A standard
MeasurementSet is created and then used to initialize simulator. The dataset
used is an observation of 3C273 at 8GHz using the C-configuration of
the VLA. It is part of the \aipspp distribution. A simple model
of 3C273 is transformed and filled into the MODEL\_DATA column.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{filename}{Name of MS to create}{3C273XC1.ms}{String}
\ahaddarg{clname}{Name of componentlist to create}{3C273XC1.cl}{String}
\ahaddarg{size}{Number of pixels on a side}{128}{Int}
\ahaddarg{stokes}{Stokes parameters to simulate (e.g. 'IQUV')}{'I'}{'I'|'IV'|'IQU'|'IQUV'}
\ahaddarg{coordinates}{Coordinate system to use e.g. 'j2000,'gal'}{'j2000'}{String}
\end{ahargs}
\ahreturns{simulator tool}
\begin{ahexample}
\begin{verbatim}
sim:=simulatortester(coordinates='gal',size=1024)
sim.simulate(type='corrected', simulate='3C273XC1.dirty')
sim.close()
\end{verbatim}
\end{ahexample}
\end{ahconstructor}


%%%%%%%%   Begin basic functions

\begin{ahfunction}{close}{Close the simulator tool}
\begin{ahdescription}
This is used to close {\tt simulator} tools. Note that the
data is written to disk. The {\tt simulator} process keeps running
until a \ahlink{done}{simulator:simulator.done} tool function call is performed.
\end{ahdescription}
\ahreturns{Bool}
\end{ahfunction}

\begin{ahfunction}{done}{Terminate the simulator process}
\begin{ahdescription}
This is used to totally stop the {\tt simulator} process. It is a good idea
to conserve memory use on your machine by stopping the process once
you no longer need it.
\end{ahdescription}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
sim:=simulatorfromms('3C273XC1.MS')      
sim.close()
sim.done()
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{name}{Provide the name of the attached MeasurementSet}
\begin{ahdescription}
Returns the name of the attached MeasurementSet.
\end{ahdescription}
\ahreturns{String}
\end{ahfunction}

\begin{ahfunction}{open}{Open a new MeasurementSet}
\begin{ahdescription}
Close the current MeasurementSet and open a new MeasurementSet
instead. The current state of {\tt simulator} is retained, except for
the data selection.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{thems}{Existing MeasurementSet to be predicted onto and/or corrupted}{'MS'}{Table name}
\end{ahargs}
\ahreturns{Bool}
\end{ahconstructor}

\begin{ahfunction}{summary}{Summarize the current state}
\begin{ahdescription}
Writes a summary of the properties of the simulator to the
default logger.
\end{ahdescription}
\ahreturns{Bool}
\end{ahfunction}

\begin{ahfunction}{type}{Return the type of this tool}
\ahreturns{String or fail}
\begin{ahdescription}
This function returns the string `simulator'.  It is used so that  in
a script, you can make sure this \glish\ variable is a simulator
\tool.
\end{ahdescription}
\end{ahfunction}


\begin{ahfunction}{id}{Return the fundamental identifier of this tool}
\begin{ahdescription}
This function should be of little interest to users. It returns the 
fundamental identifier of the tool.
\end{ahdescription}
\ahreturns{ToolID - a record}
\begin{ahexample}
\begin{verbatim}
id := sim.id()
\end{verbatim}
\end{ahexample}
\end{ahfunction}


%%%%%%%%   Begin create functions


\begin{ahfunction}{create}{Create the MS and its coordinates from scratch}
\begin{ahdescription}
Create the MS and its coordinates from descriptions of the array configuration
and the observational parameters (observing schedule, frequencies, feed models,
correlator setup, etc).  No data is calculated, only the times, (u,v) coordinates,
shadowing information, etc.
The antenna configuration is specified with {\tt setconfig}.  The observed fields
are specified by invoking {\tt setfields} one or more times.
Spectral window parameters are specified by invoking {\tt setspwindow}
one or more times.  Feed parameters are specified by invoking {\tt setfeed}.
(Eventually, setfeed will be able to set imprefect feeds for individual antennas and
individual spectral windows.)
\end{ahdescription}
\begin{ahargs}
\ahaddarg{newms}{Name of the newly created MS}{''}{Table}
\ahaddarg{shadowlimit}{Maximum fraction of geometrically shadowed area before flagging occurs}{1e-6}{Double}
\ahaddarg{elevationlimit}{Minimum elevation angle before flagging occurs}{'10deg'}{Quantity}
\ahaddarg{autocorrwt}{Weight to assign autocorrelations (0=none)}{0.0}{Float}
\end{ahargs}
\end{ahfunction}

\begin{ahfunction}{add}{add more rows to an already created MS}
\begin{ahdescription}

This function is very similar to {\tt create} except that it will
need an already created MS. The purpose of this function is to 
add in an MS  data with from a telescope which is different in
configuration from the one used in create (e.g trying to simulate VLA
and GBT data in one MS file). 
Just like {\tt create} the configuration parameters are set via the
'set' functions.   No data is calculated, only the times, (u,v) coordinates,
shadowing information, etc.
The antenna configuration is specified with {\tt setconfig}.  
It is quite simplistic in approach regarding fieldid's and spwid's
etc. It assigned them a different number to what already exist in the 
MS even if they are physically the same.


\end{ahdescription}
\begin{ahargs}
\ahaddarg{shadowlimit}{Maximum fraction of geometrically shadowed area before flagging occurs}{1e-6}{Double}
\ahaddarg{elevationlimit}{Minimum elevation angle before flagging occurs}{'10deg'}{Quantity}
\ahaddarg{autocorrwt}{Weight to assign autocorrelations (0=none)}{0.0}{Float}
\end{ahargs}
\begin{ahexample}
\begin{verbatim}
include 'simulator.g'


msim:=simulator();


include 'randomnumbers.g'
mrn:=randomnumbers()
\##RANDOMLY DISTRIBUTING 27 antennas
x:=50*(1:27%5)        + mrn.normal(0.0, 10.0, [27])
y:=10*(1:27-(1:27)%5) + mrn.normal(0.0, 10.0, [27])
z:=array(0.0, 27)

msim.setconfig('VLA', x, y, z, array(25.0, 27), array('alt-az', 27), 
	       array('VLA', 27),coordsystem='local')
\#SETTING DEFAULT SPECTRAL WINDOW
msim.setspwindow()
\# SETTING THE FIELD AS A 3 x 3 mosaic.
msim.setfield(1, 'M31SIM', dm.direction('j2000', '20:20:00.00',
	       '+40.0.0.0'), 1, 3, 3,1.0)
\# SETTING OBSERVATION TIME
msim.settimes('10s', '10s', T, '0s', '1800s')
#CREATING MS
msim.create('sd.ms', autocorrwt=0.0)

\#NOW SETTING SINGLE DISH OBSERVATION
x:=[0.]
y:=x
z:=y
msim.setconfig('GBT', x, y, z, array(100, 1), 'alt-az', 'GBT',
        coordsystem='local')

\#SETTING OBSERVING FIELD AS a 9x9 scans
\# note that this will create only a single field entry in the
\#ms.summary but 81 pointings entries are made in the pointing table. 

msim.setfield(1, 'M31SIM', dm.direction('j2000', '20:20:00.00', '+40.0.0.0'),
        1, 9, 9, 1.0)
\#SETTING SPW and TIME info 
msim.setspwindow()
msim.settimes('1s', '1s', T, '0', '600s')
\#ADDING THESE DATA POINTS TO THE MS
msim.add(autocorrwt=1.0)


\end{verbatim}
\end{ahexample}


\end{ahfunction}

\begin{ahfunction}{setconfig}{Set the antenna configuration}
\begin{ahdescription}
Set the positions of the antennas.  Note that the name of the telescope will
control which voltage pattern is applied to the data.
Must be invoked before {\tt create}.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{telescopename}{Name of the telescope we are simulating (determines VP)}{'VLA'}{String}
\ahaddarg{x}{Vector of x values of all antennas [currently m]}{[]}{Vector}
\ahaddarg{y}{Vector of y values of all antennas [currently m]}{[]}{Vector}
\ahaddarg{z}{Vector of z values of all antennas [currently m]}{[]}{Vector}
\ahaddarg{dishdiameter}{Vector of diameters of all antennas [currently m]}{[]}{Vector}
\ahaddarg{mount}{Vector of mount types of all antennas (recognized mounts are 'ALT-AZ', 'EQUATORIAL', 'X-Y', 'ORBITING', 'BIZARRE'}{[]}{Vector of strings}
\ahaddarg{antname}{Vector of names of all antennas}{[]}{Vector of strings}
\ahaddarg{coordsystem}{Coordinate system of antenna positions [x,y,z]}{'global'}
{String: 'global' | 'local' | 'longlat'}
\ahaddarg{referencelocation}{Reference location [required for local coords]}{}{MPosition}
\end{ahargs}
\begin{ahexample}
\begin{verbatim}
 diam := [25, 25, 25, 25, 25]
 xx := [50, 100, 150, 200, 250]
 yy := [2, -5, -20, -50, -100]
 zz := [-0.5, -1.0, -1.5, -2.0, -2.5]
 posvla := dm.observatory('vla');
 mysim.setconfig(telescopename='VLA', x=xx, y=yy, z=zz, dishdiameter=diam, 
                mount='alt-az', antname='VLA',
                coordsystem='local', referencelocation=posvla);
\end{verbatim}
\end{ahexample}
In this example we configure an array  of 5 dishes set at the VLA position. 
We use the measures tool to give us the location of the vla.
\end{ahfunction}


\begin{ahfunction}{setfeed}{Set the feed parameters}
\begin{ahdescription}
The goal is to let the feed parameters be specified for each antenna and
each spectral window.  At this moment, you only have the choice between
'perfect R L' and 'perfect X Y' (i.e., you cannot invent your own
corrupted feeds yet).  Doesn't need to be run if you want perfect R and
L feeds.  Otherwise, invoke theis function prior to {\tt create}. 
\end{ahdescription}
\begin{ahargs}
\ahaddarg{mode}{Mode for specifying feed parameters (currently, perfect only)}{'perfect R L'}{String}
\end{ahargs}
\end{ahfunction}

\begin{ahfunction}{setfield}{Set one or more observed fields}
\begin{ahdescription}
Set one or more observed fields, including name, coordinates, number of pointings for
a mosaic observation, etc.  Can be invoked multiple times for a complex observation.
Must be invoked at least once before {\tt create}.

If the distance to the object is set then the phase term includes a
curvature for the near-field effect at the center of the image.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{row}{Row number in the field table}{1}{Int}
\ahaddarg{sourcename}{Name of source or field (must be specified)}{'unknown'}{String}
\ahaddarg{sourcedirection}{Coordinates of source to be observed}{}{MDirection}
\ahaddarg{integrations}{Number of integrations before changing source}{1}{Int}
\ahaddarg{xmospointings}{Number of mosaic pointings in the horizontal direction}{1}{Int}
\ahaddarg{ymospointings}{Number of mosaic pointings in the vertical direction}{1}{Int}
\ahaddarg{mosspacing}{Spacing between mosaic pointings, in units of lambda/2D}{0}{Float}
\ahaddarg{distance}{Distance to the object}{'0km'}{String}
\end{ahargs}
\begin{ahexample}


\begin{verbatim}
  mysim.settimes( integrationtime='10s', gaptime='0s', usehourangle=T,
                starttime='0s', stoptime='3600s', 
                referencetime=reftime);
  mysim.setconfig(telescopename='VLA', x=xx, y=yy, z=zz, dishdiameter=diam, 
                mount='alt-az', antname='VLA',
                coordsystem='local', referencelocation=dm.observatory('vla'));

  mysim.setspwindow(row=1, spwname='XBAND', freq='8GHz', deltafreq='50MHz',
                   freqresolution='50MHz', nchannels=1, stokes='RR
                   LL');
  dir0 := dm.direction('B1950',  '16h00m0.0', '50d0m0.000')
  mysim.setfield( row=1, sourcename='SIMU1', sourcedirection=dir0,
                integrations=1, xmospointings=1, ymospointings=1,
                mosspacing=1.0);

  mysim.create(newms='something.ms')



\end{verbatim}
In the above example we simulate a single pointing measurement set.
Where as in the case below we change the setfield to simulate a mosaic
observation with 6 pointings spaced by 1/2 primary beams.

\begin{verbatim}
 
 mysim.setfield( row=1, sourcename='SIMU1', sourcedirection=dir0,
                integrations=1, xmospointings=3, ymospointings=2,
                mosspacing=1.0);

  mysim.create(newms='something.ms')



\end{verbatim}

And if we wanted to have 2 distinct pointings we would proceed as
below

\begin{verbatim}
  dir0 := dm.direction('B1950',  '16h00m0.0', '50d0m0.000')
  mysim.setfield( row=1, sourcename='SIMU1', sourcedirection=dir0,
                integrations=1, xmospointings=1, ymospointings=1,
                mosspacing=1.0);
  dir1 := dm.direction('B1950',  '16h20m0.0', '52d0m0.000')
  mysim.setfield( row=2, sourcename='SIMU2', sourcedirection=dir0,
                integrations=1, xmospointings=1, ymospointings=1,
                mosspacing=1.0);
  mysim.create(newms='something.ms')



\end{verbatim}


\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{setspwindow}{Set one or more spectral windows}
\begin{ahdescription}
Set one or more spectral windows for the observations, including starting
frequency, number of channels, channel increment and resolution, and stokes
parameters observed.  Can be invoked multiple times for a complex observation.
Must be invoked at least once before {\tt create}.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{row}{Row number in the spectral windowg table}{1}{Int}
\ahaddarg{spwname}{Unique user-supplied name for this spectral window}{'XBAND'}{String}
\ahaddarg{freq}{Starting frequency}{'8.0GHz'}{Quantity}
\ahaddarg{deltafreq}{Frequency increment per channel}{'50.0MHz'}{Quantity}
\ahaddarg{freqresolution}{Frequency resolution per channel}{'50.0MHz'}{Quantity}
\ahaddarg{nchannels}{Number of channels}{1}{Int}
\ahaddarg{stokes}{Stokes types to simulate}{'RR LL'}{String}
\end{ahargs}

\begin{ahexample}

To simulate a two spectral window (or two IF's in VLA jargon) data
set, use setpwid as follows (here we are simulating 16 channels, 50MHz
wide channel for each spectral window)
\begin{verbatim}

mysim.setspwindow(row=1, spwname='CBAND', freq='2GHz', deltafreq='50MHz',
                   freqresolution='50MHz', nchannels=16, stokes='RR LL');

mysim.setspwindow(row=2, spwname='SBAND', freq='5GHz', deltafreq='50MHz',
                   freqresolution='50MHz', nchannels=16, stokes='RR LL');


\end{verbatim}

Note that the spwname is just a label and should be unique.

\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{settimes}{Set start, stop, gap, integration times}

\begin{ahdescription}
Set various times for the simulation, including start, stop, integration,
and gap times.  The start and stop times are referenced to {\tt referencetime}.
Use either starttime/stoptime or startha/stopha.  If the hour angles are specified,
then the start and stop times are calculated such that the start time is later
than the reference time, but less than one day later.  The hour angles refer to
the first source observed.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{integrationtime}{Integration time}{'10s'}{Quantity}
\ahaddarg{gaptime}{Gap time between observations}{'20s'}{Quantity}
\ahaddarg{usehourangle}{Use starttime/stoptime as hour angles - else they are referenced to referencetime}{T}{Bool}
\ahaddarg{starttime}{Start time referenced to referenceepoch}{'0s'}{Quantity}
\ahaddarg{stoptime}{Stop time referenced to referenceepoch}{'3600s'}{Quantity}
\ahaddarg{referencetime}{Reference time for starttime and stoptime}{'50000d'}{Epoch}
\end{ahargs}

\begin{ahexample}
\begin{verbatim}
  reftime := dm.epoch('utc', 'today');
  mysim.settimes( integrationtime='10s', gaptime='0s', usehourangle=T,
                starttime='0s', stoptime='3600s', 
                referencetime=reftime);

\end{verbatim}
Here we use the Measures tool to define today's epoch which we use in
settimes. Here we set a 3600 s observation after the reference time
with 10 s of integration and no gap between integrations. 

\end{ahexample}
\end{ahfunction}


%%%%%%%%   Begin predict functions

\begin{ahfunction}{predict}{Predict astronomical data from an image}
\begin{ahdescription}
Predict astronomical data from an image.  The (u,v) coordinates already
exist, either from a MeasurementSet we have read in or by generating the
MeasurementSet coordinates and empty data through {\tt create()}.  We
simply predict onto these coordinates.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{modelImage}{Name of image from which to predict visibilities}{''}{String}
\ahaddarg{complist}{Name of component list}{}{String}
\ahaddarg{incremental}{Add this model to the existing Data Visibilities?}{F}{Bool}
\end{ahargs}
\end{ahfunction}



\begin{ahfunction}{setoptions}{Set the predict options}
\begin{ahdescription}
Set the options for {\tt predict} details.  See {\tt imager} help
for more details.

To simulate single dish data, use gridft=SD and gridfunction=PB.

\end{ahdescription}
\begin{ahargs}
\ahaddarg{ftmachine}{Fourier transform machine}{'gridft'}{String: 'gridft'|'SD'}
\ahaddarg{cache}{Size of gridding cache in complex pixels}{0}{Int}
\ahaddarg{tile}{Size of a gridding tile in pixels (in 1 dimension)}{16}{Int}
\ahaddarg{gridfunction}{Gridding function}{'SF'}{String: 'SF'|'BOX'|'PB'}
\ahaddarg{location}{Location used in phase rotations}{}{position measure}
\ahaddarg{padding}{Padding factor in image plane (>=1.0)}{1.3}{Float}
\ahaddarg{facets}{Number of facets}{1}{Int}
\end{ahargs}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
mysim.setoptions(cache=10000000, tile=32, 
gridfunction='BOX', dm.location('vla'))
\end{verbatim}
\end{ahexample}

\end{ahfunction}


\begin{ahfunction}{setvp}{Set the voltage pattern model for subsequent processing}
\begin{ahdescription}
Set the voltage pattern model (and hence, the primary beam) used for a Telecope.
There are currently two ways to set the voltage pattern: by using the extensive
list of defaults which the system knows about, or by creating a voltage pattern
description with the \ahlink{vpmanager}{imager:vpmanager}.  The default voltage patterns
include both a high and a low frequency VP for the WSRT, a VP for each observing
band at the AT, several VP's for the VLA, including the approrpiate beam squint for
each observing band, and  Gaussian for the BIMA dishes.
If you are simulating a telescope which doesn't yet exist, you will need to supply
a model voltage pattern using the \ahlink{vpmanager}{imager:vpmanager}.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{dovp}{Multiply by the voltage pattern (ie, primary beam) when simulating }{T}{Bool}
\ahaddarg{usedefaultvp}{Look up the default VP for this telescope and frequency?}{T}{Bool}
\ahaddarg{vptable}{If usedefaultvp is false, provide a VP Table made with vpmanager}{}{Table}
\ahaddarg{dosquint}{Activate the beam squint in the VP model}{T}{Bool}
\ahaddarg{parangleinc}{Parallactice angle increment for squint application}{360deg}{Quantity}
\end{ahargs}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
imgr.setvp(dovp=T, usedefaultvp=F, 
vptable='MyAlternateVLAPBModel.TAB', dosquint=F);
\end{verbatim}
\end{ahexample}
\end{ahfunction}

%%%%%%%%   Begin corrupt functions

\begin{ahfunction}{corrupt}{Corrupt the data with visibility errors}
\begin{ahdescription}
Add errors specified by the {\tt set} functions (such as noise, 
gains, polarization leakage, bandpass, etc) to the synthesis data.
This is only visibility-based effects, not image-plane effects such as
pointing errors and voltage patterns, which get applied in {\tt predict}.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
MSSimulator mysim('3C273XC1.MS');
mysim.predict('3C273XC1.FAKE.IMAGE');
mysim.setnoise( mode='simplenoise', simplenoise='0.1Jy');
mysim.setpa( mode='calculate');
mysim.corrupt();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{reset}{Reset the corruption terms}
\begin{ahdescription}
Reset the visibility corruption terms: this means that {\tt corrupt}
introduces no errors.
\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{setbandpass}{Set the bandpasses}
\begin{ahdescription}
Set the level of bandpass errors. The error distributions are normal, mean
zero, with the variances as specified. (Not yet implemented).
\end{ahdescription}
\begin{ahargs}
\ahaddarg{mode}{Mode of operation}{'calculate'}{String: 'calculate'|'table'}
\ahaddarg{table}{Name of table}{''}{String}
\ahaddarg{interval}{Coherence interval e.g. '1h'}{'1h'}{Quantity}
\ahaddarg{amplitude}{Variances errors in amplitude and phase}{[0, 0]}{2-Vector of Double}
\end{ahargs}
\end{ahfunction}

\begin{ahfunction}{setgain}{Set the gains}
\begin{ahdescription}
Set the level of gain errors. The error distributions are normal, mean
zero, with the variances as specified.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{mode}{Mode of operation}{'calculate'}{String: 'calculate'|'table'}
\ahaddarg{table}{Name of table}{''}{String}
\ahaddarg{interval}{Coherence interval e.g. '10s'}{'10s'}{Quantity}
\ahaddarg{amplitude}{Variances of errors in amplitude and phase}{[0, 0]}{2-Vector of Double}
\end{ahargs}
\end{ahfunction}

\begin{ahfunction}{setleakage}{Set the polarization leakage}
\begin{ahdescription}
Set the level of polarization leakage between feeds.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{mode}{Mode of operation}{'calculate'}{String: 'calculate'|'table'}
\ahaddarg{table}{Name of table}{''}{String}
\ahaddarg{interval}{Coherence interval e.g. '5.0h'}{'5.0h'}{Quantity}
\ahaddarg{amplitude}{Variance of pol leakage amplitude errors; currently, just real}{0.0}{Double}
\end{ahargs}
\end{ahfunction}

\begin{ahfunction}{setnoise}{Set the noise level}
\begin{ahdescription}
Set various system parameters from which the thermal (ie, random additive) noise level 
will be calculated.  The noise will vary with dish diameter, antenna efficiency,
system temperature, opacity, sky temperature, etc.  The noise will increase with
the airmass if {\tt tau} is greater than zero.  The noise is calculated according to
the {\it Brown Equation} (ie, R.L. Brown's calculation of MMA sensitivity, 3Oct95):
\begin{equation}
\Delta S = \frac{ 4 \sqrt{2} [ T_{rx}e^{\tau A} + T_{atm} ( e^{\tau A} - \epsilon_{l}) + T_{cmb}] }
                {  \epsilon_{q} \epsilon_{a} \pi D^2 \sqrt{\Delta \nu \Delta t }}
\end{equation}
\end{ahdescription}
\begin{ahargs}
\ahaddarg{mode}{Mode of operation}{'calculate'}{String: 'table'|'simplenoise'|'calculate'}
\ahaddarg{table}{Name of noise table if not simplenoise or not calculated}{''}{String}
\ahaddarg{simplenoise}{Level of noise if not Table or not Calculated}{'0.0Jy'}{Quantity}
\ahaddarg{antefficiency}{antenna efficiency}{0.8}{Float}
\ahaddarg{correfficiency}{Correlation efficiency}{0.85}{Float}
\ahaddarg{spillefficiency}{Forward spillover efficiency}{0.85}{Float}
\ahaddarg{tau}{Atmospheric Opacity}{0.0}{Float}
\ahaddarg{trx}{Receiver temp (ie, all non-atmospheric Tsys contributions) [K]}{50}{Float}
\ahaddarg{tatmos}{Temperature of atmosphere [k]}{250.0}{Float}
\ahaddarg{tcmb}{Temperature of cosmic microwave background [K]}{2.7}{Float}
\end{ahargs}
\end{ahfunction}

\begin{ahfunction}{setpa}{Corrupt phase by the parallactic angle}
\begin{ahdescription}
Corrupt phase by the parallactic angle
\end{ahdescription}
\begin{ahargs}
\ahaddarg{mode}{Mode of operation}{'calculate'}{String: 'calculate'|'table'}
\ahaddarg{table}{Name of table}{''}{String}
\ahaddarg{interval}{Interval for parallactic angle application, e.g. '10s'}{'10s'}{Quantity}
\end{ahargs}
\end{ahfunction}

\begin{ahfunction}{setseed}{Set the seed for the random number generator}
\begin{ahdescription}

\end{ahdescription}
\begin{ahargs}
\ahaddarg{seed}{Seed}{185349251}{Int}
\end{ahargs}
\end{ahfunction}



\end{ahobject}

\input{imageevaluator.help}

\input{dynamicsched.help}

\input{newsimulator.help}

\end{ahmodule}
