%% Copyright (C) 1999
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: componenteditor.help,v 19.2 2004/08/25 01:06:34 cvsmgr Exp $
\begin{ahobject}{componenteditor}{A graphical user interface for
displaying \& editing a component.}

\ahinclude{componenteditor.g}

\ahmethods{}

\begin{ahdescription}

The componenteditor is a graphical user interface that allows the user
to view \& modify components. To use it you need to be in a windows
environment ie., the display environment must be set prior to starting
up \aipspp.

The componenteditor can be in one of two states, view mode or edit
mode.
\begin{description}

\item[View Mode] The component editor always starts up in view
mode. In this mode you cannot change any of the fields in the
component. View mode is useful for browsing a component. To switch to
Edit mode you press the Edit button just below the menu bar.
\item[Edit Mode] In edit mode you can modify the component. Be aware
that the editor reads all input from the screen in edit mode so it is
important to display all numbers with sufficient precision. To switch
to back to view mode press the View button just below the menu bar.
\end{description}

You can always tell which mode you are in because the entry field
backgrounds are grey (and input is disabled) while in view mode, but
white in edit mode.

There are a variety of buttons and pull-down menus for specifying the
units and reference frames for various aspects of the component. In
edit mode these specify how the numerical value is to be
interpreted. In view mode they control the units, reference frame and
precision of the displayed numerical values. Buttons that do not make
sense in view mode, eg. those to change a components shape, are
disabled in view mode.

When editing fields in this GUI it is suggested you press return at
the end of each field. This will force the GUI to parse the current
line and redisplay what it has read. However some effort is made to
ensure that displayed fields are synchronised with the internal data
even if you do not press return. This is down by redisplaying the data 
whenever a button is pressed. However the data is \emph{not}
redisplayed on every keystroke.

The componenteditor window is split up into seven fundamental
frames. I'll describe these in the following sections.

\subsubsection{Menu bar}
The menu bar is the topmost part of the componenteditor GUI. It
currently contains two pull down menus, ``Show'' and ``Help''.
\begin{description}
  \item{Show} 
    This pull-down menu allows you to control which aspects of a
    component are displayed by the editor. It allows you to display or
    hide the label, flux, shape and spectrum frames.

    This menu indicates which frames are being displayed with a red
    check box. Because of a bug in tcl/tk this indication can get out
    of synchronisation with what is being displayed. This occurs when
    two or more editors are being used simultaneously.

  \item{Help} 
    This pull-own menu contains functions which will drive you www
    browser to relevant sections of the \aipspp\ reference manual. These
    sections are:
    \begin{itemize}
      \item 
      The componenteditor documentation (thats what you are reading now)! 
      \item The componentlist documentation.
      \item The module documentation for components.
      \item The contents page of the \aipspp\  reference manual.
    \end{itemize}
  The about function will pop up a window displaying some information
  about the version of \aipspp\ you are currently using.
\end{description}

\subsubsection{Mode}
The mode line is just below the menu bar. It contains the View and
Edit buttons which switch the editor between these two modes. The
current mode is indicated by a red check mark next to one of these
buttons.

\subsubsection{Label}
The label frame is just below the mode line and displays the label
string of the component. While only 24 characters are displayed there
is no limit, aside from computer memory, on how long the label string
can be. To see the end of a long label string you could make the
componenteditor window wider using your window manager.  Alternatively
you could scroll through the string using the arrow keys. The text
entry widget used to display the label also supports some emacs like
control sequences for cursor movement eg., control-a for beginning of
line, and control-e for end of line.

\subsubsection{Flux}
The flux frame displays the flux of the component. By default all
polarisations of the component are displayed using its units and
polarisation representation. 

To display or set the flux in a different polarisation representation
use the pull-down menu to the left of this frame. If the linear (XY) 
or circular (RL) representations are chosen then the displayed values 
are complex, otherwise the displayed values are real. You can also
choose to hide all the polarisation components except the total
intensity.

To display or set the flux units the buttons on the right of this
frame are used. Allowable units are Jansky~(Jy) and Westerbork
Units~(WU). You can also display the polarised flux as a percentage of
the total intensity, when the polarisation representation is Stokes.

If the polarisation representation is ``Stokes'' the entered flux values
are read as floating point numbers. But if the polarisation
representation is linear or circular the entered flux values are read
as complex numbers. They are displayed similarly.

\subsubsection{Shape}

The shape frame displays information about the spatial structure of
the component. It always shows the reference direction of the
component, the reference frame and the shape type. If the shape type
in not a point there will be additional fields containing the other
parameters relevant to specific shape.

The reference direction is the for all currently available component
shapes the direction of the centre of the component.  It can be
displayed in a variety of units, formats and precisions using the
pull-down menu to the right of the displayed values. Because the
direction values can be entered in a variety of different formats
entering these strings is more prone to error. Hence I recommend you
always press return after entering a value to see how the editor has
interpreted your string. The previously mentioned note about loss of
precision when in edit mode is particularly relevant in the direction
fields. If sub-arcsecond precision is important to you set the RA
units to 'H:M:S.s' and the declination units to 'D.M.S.s' prior to
entering edit mode.

The reference frames allowed for the direction are currently limited
to those that do not require additional information about when are
where the observation took place. Currently this is 'B1950', 'J2000'
\& 'Galactic' frames.

Three component shapes are currently supported are 'point',
'Gaussian' \& 'disk'. For the Gaussian and disk shapes there are three
additional parameters, namely the major axis, minor axis and position
angle required. Fields displaying these parameters will be displayed
if the shape is not a point shape.

The major axis is always larger than (or equal to) the minor axis and
the position angle is the angle between the major axis and the
North-South axis. The north-south axis is defined using the current
reference frame and hence a component with a position angle of zero
degrees in the galactic reference frame will have a very different
position angle if the component is converted to the J2000 frame.
As with other fields in the componenteditor the units are specified
using pull-down menus to the right of the displayed values. 

\subsubsection{Spectrum}

The spectrum frame displays information about the spectral variation of
the component. Currently there are two models used to describe the
spectral variation, namely 'Constant', and 'Spectral Index'. 

If the spectrum is assumed to be constant then the concept of a
reference frequency is irrelevant. Hence it is not displayed.

If the spectral model used is a spectral index then a reference
frequency, frequency reference frame and spectral index need to be
specified. The units for the reference frequency are specified by a
pull-down menu to the right of the value. 

The frequency frame is specified using a pull-down menu just below the 
reference frequency. Currently no attempt is made to convert the
reference frequency between different frames when in view mode. Hence
you cannot change the frame in view mode.

To fully specify the spectral index of a polarised component four
indices are used. These indices are applied to the I,Q,U\&V components
of the flux separately. If you are not interested in the spectral
index of the polarised flux you can choose to display the spectral
index of just the I component using a pull-down menu to the right of
the I index value.

\subsubsection{Actions}

There are two buttons at the bottom of the componenteditor which
provide quick access to common operations. To the left is the ``Undo''
button and to the right is the ``Dismiss'' button.

The ``Dismiss'' button makes the component editor window go away. Use
this button when you have finished making your changes. Note that the
componenteditor tool has not gone away, just its GUI elements. In
particular you can still access the (possibly edited) component it
contains using the tool functions described below.

The ``Undo'' button will replace the currently displayed component
with the one the component editor was started with\footnote{To be more 
specific it replaces the component with the one that was last supplied 
to it with the use tool function.}. The undo button is disabled if the
editor knows that the currently displayed component is identical with
its initialised one. If the undo button is enabled then the editor
believes that the component has been modified. This may not always be
correct as the editor does not compare numbers to determine if a
component has been modified, it only determines if you had the
potential to modify the component.

\end{ahdescription}

\begin{ahexample}
\begin{verbatim}
include 'componenteditor.g'
ce := componenteditor();
ce.gui();
# After some pointing and clicking in the GUI
mycomponent := ce.get();
ce.done();
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
In this example I show how to use the componenteditor GUI as a
separate tool that is not invoked by the componentlist tool or the
componentlist GUI. The first line is the obligatory include line. The
second constructs the tool. It initialises itself with a default
component but does not start up the GUI until the the third line. I
assume the user clicked on the dismiss button to get rid of the GUI
window. The edited component is extracted from the componenteditor
tool using the get tool function. All the memory used by the
componenteditor is released in the last step. At this point the tool
no longer exists.
\end{ahcomments}

\begin{ahconstructor}{componenteditor}{Create an componenteditor tool}
  \begin{ahdescription}
    This function creates a componenteditor tool. The
    componenteditor initialises itself with a default component but
    does not start up the GUI. Use the GUI tool function described below to
    start up the GUI. The componenteditor always starts up in view mode.
  \end{ahdescription}
  \ahreturns{A componenteditor tool}
\end{ahconstructor}

\begin{ahfunction}{use}{Supply a component to be edited}
  \begin{ahdescription}
    This tool function supplies a component for the GUI to edit. A
    component is a Glish record with the fields and structure
    described in the componentlist tool.

    The optional which argument is to allow multiple componenteditors
    to simultaneously edit different components in a componentlist. It
    contains the index of the component in the main list. This index
    can be obtained at a later time using the which tool function described
    below.

    This scheme will break down if the main list has been sorted or
    components have been added or deleted while an editor is editing a 
    copy of a component.

    The which argument can be totally ignored if the componenteditor
    is not being used in conjunction with a parent list, or if you are
    separately keeping track of which component goes where. Otherwise
    it should be an integer between 1 and the parent list length

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{component}{The component to be viewed and/or edited}
             {no default}{Any Glish record with the appropriate fields}
    \ahaddarg{which}{The index of the component in a parent table}
             {0}{Any integer (see description)}
  \end{ahargs}
  \ahreturns{T}
\end{ahfunction}

\begin{ahfunction}{gui}{Start up the GUI}
  \begin{ahdescription}
    Start up the graphical user interface for this tool. The
    graphical user interface is not started generated when the tool
    is created. This separates the creation and destruction of the
    tool (using the constructor and the done tool function), with the
    creation and destruction of the GUI (using the GUI and dismiss
    tool functions). This separation allows the tool to be initialised,
    using the use tool function, prior to starting up the GUI.
  \end{ahdescription}
  \ahreturns{T or fail if the window could not be created}
\end{ahfunction}

\begin{ahfunction}{dismiss}{Shut down the GUI}
  \begin{ahdescription}
    This tool function will make the GUI disappear from the screen. However
    the tool has not been deleted and hence the component that was
    being edited can still be obtained using the get tool function.
  \end{ahdescription}
  \ahreturns{T}
\end{ahfunction}

\begin{ahfunction}{get}{get the component currently being edited}
  \begin{ahdescription}
    This tool function returns the component currently being edited by this
    tool. The component is constantly kept up to date with the
    graphical representation seen by the user. Hence it can quite
    safely be used regardless of the interim state of the GUI.
  \end{ahdescription}
  \ahreturns{A Glish record representing the edited component}
\end{ahfunction}

\begin{ahfunction}{which}{return the index of this component}
  \begin{ahdescription} 
    This tool function returns index of the (possibly edited) component
    within the a parent componentlist. This index is used to tag which
    component is being edited so that it can be replaced once the
    user has finished editing it.
  \end{ahdescription}
  \ahreturns{The integer supplied to it with the use argument}
\end{ahfunction}

\begin{ahfunction}{done}{Shut down the componenteditor tool}
  \begin{ahdescription}
    This tool function removes all traces of the componenteditor
    tool. It removes the GUI from the screen, deletes the
    component inside the editor and removes all the tool functions. It frees
    up as much memory as possible.
  \end{ahdescription}
  \ahreturns{T}
\end{ahfunction}

\end{ahobject}
