%% Copyright (C) 1999,2000,2003
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: componentlist.help,v 19.4 2004/08/25 01:06:49 cvsmgr Exp $

\begin{ahobject}{componentlist}{A tool for the manipulation of
    groups of components}

\ahinclude{componentlist.g}

\begin{ahdescription}
  A componentlist is a tool that contains functions that manipulate
  components. A component is a functional representation of the sky
  brightness and is described in more detail in the overview of
  \ahlink{this module}{componentmodels}.
  
  The simplest way to make a componentlist tool is to use the
  \ahlink{emptycomponentlist}
  {componentmodels:componentlist.emptycomponentlist.constructor}
  constructor. This creates a componentlist tool that does not contain
  any components and is not associated with any file.
  
  The alternative is to use either the
  \ahlink{componentlist}{componentmodels:componentlist.componentlist}
  or \ahlink{asciitocomponentlist}
  {componentmodels:componentlist.asciitocomponentlist.constructor}
  constructors. These create a componentlist tool by reading the data
  from an \aipspp\ table or a properly formatted ascii file.
  
  The simplest way to add components to a list is to use the
  \ahlink{simulate}{componentmodels:componentlist.simulate}
  function. The components that are added to the list can then be
  edited using the 
  \ahlink{component editor}{componentmodels:componentlist.gui}, or any
  of the manipulate functions like 
  \ahlink{setshape}{componentmodels:componentlist.setshape} or 
  \ahlink{setrefdir}{componentmodels:componentlist.setrefdir}.

\end{ahdescription}

\ahfuncs{}

\begin{ahconstructor}{emptycomponentlist}{Construct an empty componentlist}
\begin{ahdescription}

Use this constructor to construct a componentlist tool that does not
contain any components. Components can be appended to the list using
the \ahlink{simulate}{componentmodels:componentlist.simulate} function
and the list can be stored in an \aipspp\ table by giving it a name
ie., using the \ahlink{rename}{componentmodels:componentlist.rename}
function.

\end{ahdescription}

\begin{ahargs}
  \ahaddarg{log}{Send a message to the logger}
           {T}{Boolean} 
\end{ahargs}

\ahreturns{A componentlist tool}

\begin{ahexample}
\begin{verbatim}
include 'componentlist.g'
cl := emptycomponentlist();
\end{verbatim}
\end{ahexample}
\end{ahconstructor}

\begin{ahconstructor}{componentlist}{Construct an componentlist
    from the data in an \aipspp\ table}
\begin{ahdescription}

  Use this constructor to construct a componentlist tool by reading
  the data from an \aipspp\ table. To ensure that this table contains
  all the necessary columns and to allow the table format to be
  enhanced in the future, it is highly recommended that the table be
  created using a componentlist tool\footnote{To be more precise the
  table should have been created using the functions in the
  ComponentList class (C++).}.

  The table that contains the componentlist may be opened read-only by
  setting the readonly flag to True. When this is done some of the
  functions in the componentlist tool cannot be used. These include
  the ``set'', ``convert'', ``remove'', ``replace'', ``purge'',
  ``recover'', and ``sort'' functions.

\end{ahdescription}

\begin{ahargs}
  \ahaddarg{filename}{The filename of the table}
           {no default}{Any valid componentlist table}
  \ahaddarg{readonly}{Should the table be opened read only}
           {F}{T or F}
  \ahaddarg{log}{Send a message to the logger}
           {T}{Boolean} 
\end{ahargs}
\ahreturns{A componentlist tool}

\begin{ahexample}
\begin{verbatim}
include 'componentlist.g'
cl := componentlist('crux.cl');
\end{verbatim}
\end{ahexample}
\end{ahconstructor}

\begin{ahconstructor}{asciitocomponentlist}
  {Create a componentlist from an ascii file}

\begin{ahdescription}

This constructor allows conversion of a number of ascii-file-based
formats to componentlists. The formats currently supported are the
AIPS star file format, the Caltech model format, and the WENSS, FIRST,
and NVSS surveys.
  
\begin{description}
\item[AIPS ST file] The AIPS star file describes positions of ``stars''
that one might wish to plot overlaid on some other display. It does
not contain source strength information.  In the AIPS help file for
STARS, the format of the star file is described as follows:
\begin{verbatim}
    The text file contains one line per star and each line has
up to 7 logical columns containing, in order:
   1. X position (Right Ascension 00 00 00.00)
   2. Y position (Declination +/-00 00 00.0)
   3. Major axis (Full width in arc seconds on sky)
   4. Minor axis (Full width in arc seconds on sky)
   5. Position Angle (E of N, degrees)
   6. Star Type  (-1 to 20, integer )
   7. Star label (up to 24 character string)
If X and Y are not RA-DEC or DEC-RA, then the logical columns
are also 7 actual columns and the units are in AIPS standard
units (e.g. degrees, m/s etc. ).  In this case the position
angle should be given as 0.0, the major axis is the width in the
Y coordinate and the minor axis is the width in the X
coordinate.  For RA and DEC positions, the sexagesimal notation
is used (e.g. HH MM SS.SSS -DD MM SS.S) for the positions and
arc seconds on the sky are used for the Deltas.
The last 5 columns are not required.  If the last 5 columns are
not given, a value of 1 cell is assumed for the deltas.
If the position angle is not included, the default is 0 degrees.
If the star type is not included, the default type is a cross.
The default is no label string.
There are currently 22 different types of star marks.
 < 0: No Mark, only the star label is printed
   0: Cross             10: Five pointed star
   1: Ellipse           11: Star of David
   2: Box               12: Seven pointed star
   3: Triangle          13: Eight pointed star
   4: Diamond           14: Nine  pointed star
   5: Pentagon          15: Ten   pointed star
   6: Hexagon           16: 11    pointed star
   7: Septagon          17: 12    pointed star
   8: Octagon           18: 13    pointed star
   9: Nine-gon          19: 14    pointed star
  20: Cross with gap   >20: Ellipse
The Box (type=2) is different from the diamond in that the
star size is the half height and width of the box dimensions.
The Box and the Null (<0) are labeled at RA and Dec plus Delta
RA and Delta Dec.  The other marks are labeled at the right
edge of the of the Rotated RA axis.  The CROSS WITH GAP
(type=20) has the inner third of the cross removed so the
marked object is not over written.
\end{verbatim}

For more information, see the AIPS help file for
\htmladdnormallink{STARS}{http://www.cv.nrao.edu/cgi-bin/AIPSHELP?STARS}.

Caveats:
\begin{itemize}
\item In AIPS, the following are supported: 1: 1900; 2: B1950; 3: J2000; 4: Galactic
5: OHLSSON Gal.; 6: VAN TULDER Galactic; 7: Super Galactic; if > 1000 then year assumed.
Currently, \aipspp\ can support 2 (refer='b1950'), 3
(refer='j2000'), 4 (refer='gal'), 7 (refer='supergal'). If you
need any of the others, please contact us.
\end{itemize}

\item[Caltech] The 
\htmladdnormallink{Caltech package}
{http://astro.caltech.edu/\~tjp/citvlb/index.html}
uses a format for specifying positions relative to an undefined
position. In the documentation for {\em modelfit}, the format is
described as follows:

\begin{verbatim}
     Model files are text files that can be typed or printed directly;
they  can  be  modified or created using the standard text editors.  A
model file consists of one line for each component of the model,  with
up to 7 numbers on each line (in free format):

     1.  Component flux density (Jy)

     2.  Distance of center of component  from  origin  (milliarcsec),
         "radius"

     3.  Position angle of center of component  with  respect  to  the
         origin (degrees, North through East), "theta"

     4.  Major axis of component (milliarcsec), "axis"

     5.  Axial ratio (minor/major, i.e.  < 1), "ratio"

     6.  Position angle of major axis (degrees, North  through  East),
         "phi"

     7.  Type:
             0 or 1:  elliptical Gaussian  (major  axis  is  FWHM)  or
             delta-function (major axis = 0)
             2:  uniform elliptical disk (major axis is diameter)
             3:  optically thin spheroid or tapered disk  (major  axis
             is diameter)
             4:  elliptical ring (major axis is diameter)
             5:  line (major axis is length)


For Gaussians and  delta-functions,  the  Type  can  be  omitted;  for
delta-functions, the major-axis, axial-ratio, position- angle and type
can be omitted.  (Not all the  programs  understand  types  2-5.)  The
"origin" is an arbitrary phase-reference point.  The maximum number of
components varies from 600  to  10000,  depending  on  the  individual
program.                                                              
\end{verbatim}

Caveats:
\begin{itemize}
\item In \aipspp, directions in componentlist are currently absolute
only. Hence one must specify the reference direction.
\end{itemize}

\item[WENSS] The \htmladdnormallink{Westerbork Northern Sky Survey (WENSS)}
{http://www.strw.leidenuniv.nl/\%7Edpf/wenss/} is a
low-frequency radio survey that covers the whole sky north of delta=30
degree at a wavelength of 92cm to a limiting flux density of
approximately 18 mJy (5 sigma). This survey has a resolution of 54'' x
54'' cosec (delta) and a positional accuracy for strong sources of
1.5''.  The WSRT Northern Sky Survey catalog is available via a
\htmladdnormallink{Web
interface}{http://www.strw.leidenuniv.nl/\%7Edpf/wenss/search.html}.
Use this interface to search for sources, choose the plain text
output, capture the output into a file and then convert.

\item[FIRST] \htmladdnormallink{Faint Images of the Radio Sky at
Twenty-cm}{http://sundog.stsci.edu/top.html} -- is a project designed
to produce the radio equivalent of the Palomar Observatory Sky Survey
over 10,000 square degrees of the North and South Galactic Caps. Using
the NRAO Very Large Array (VLA) and an automated mapping pipeline,
they produce images with 1.8" pixels, a typical rms of 0.15 mJy, and a
resolution of 5". At the 1 mJy source detection threshold, there are
~90 sources per square degree, ~35\% of which have resolved structure
on scales from 2-30". Go to the \htmladdnormallink{FIRST catalog search
page}{http://sundog.stsci.edu/cgi-bin/searchfirst}, search for the
sources that you want, cut out only the lines that include the
sources, put in a file and then convert.

\item[NVSS] The \htmladdnormallink{NRAO VLA Sky Survey}
{http://www.cv.nrao.edu/~jcondon/nvss.html} The NRAO VLA Sky Survey
(NVSS) is a radio continuum survey covering the sky north of -40 deg
declination. A detailed description appears in the 1998 May issue of
The Astronomical Journal (Condon, J. J., Cotton, W. D., Greisen,
E. W., Yin, Q. F., Perley, R. A., Taylor, G. B., \& Broderick,
J. J. 1998, AJ, 115, 1693). Go to the \htmladdnormallink{NVSS catalog
search page}{http://www.cv.nrao.edu/NVSS/NVSS.html}, search for the
sources that you want, cut out only the lines that include the sources
(you can leave in the alternating lines with error information), put
in a file and then convert.

Caveats:
\begin{itemize}
\item The catalog contains upper limits on some scale sizes. We
have chosen to represent these as actual sizes.
\end{itemize}
\end{description}

\end{ahdescription}
\begin{ahargs}
  \ahaddarg{filename}{Name of output component list table}
           {None}{String}
  \ahaddarg{asciifile}{Name of input ascii file}
           {None}{String}
  \ahaddarg{refer}{Input reference frame}
           {J2000}{Any valid direction reference frame}
  \ahaddarg{format}{Name of format (only ST supported)}
           {ST}{String}
  \ahaddarg{direction}{Direction measure (for relative coordinates)}
           {None}{Direction measure}
  \ahaddarg{spectrum}{Default spectrum field}
           {[type="Constant", frequency=[type="frequency" , refer="LSR" , m0=[unit="GHz" , value=1.0]]}
           {Any valid spectrum field}
  \ahaddarg{flux}{Default flux field}
           {[value=[0.0, 0.0, 0.0, 0.0], unit='Jy', polarization="Stokes"]}
           {Any valid flux field}
  \ahaddarg{log}{Send a message to the logger}
           {T}{Boolean} 
\end{ahargs}
\ahreturns{Number of components found}

\begin{ahexample}
\begin{verbatim}
mycl := asciitocomponentlist('sgra-stars.cl', 'sgra-stars.stfile', refer='j2000', 
format='ST')
\end{verbatim}
\end{ahexample}
\begin{ahcomments}
This takes an AIPS stars file in J2000 positions, and converts the
positions into Galactic. The output is a component list on disk
and available in Glish as mycl.
\end{ahcomments}
\end{ahconstructor}

\begin{ahfunction}{concatenate}{Append components from another componentlist.}
  \ahkeyword{concatenate}{concatenate}
  \begin{ahdescription}

    The concatenate function copies the specified component(s), from
    the specified to list, to the end of the current list.  The
    components are specified by numbering them from one to the length
    of the list.  You cannot append components to a list that has been
    opened read only but the list you are copying from may be
    readonly.

    You use a vector of indices to copy a number of components at
    once. By default all components are copied.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{list}{list to copy from}
             {no default}{a componentlist tool} 
    \ahaddarg{which}{which components to copy}
             {unset}{a integer or integer vector} 
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl1 := componentlist('crux.cl');
      cl2 := emptycomponentlist();
      cl2.concatenate(cl1, [1,3]);
      cl1.done()
      cl2.rename('crux-copy.cl');
      cl2.done()
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a componentlist from an \aipspp\ table and
    copies the first and third component to another a componentlist
    that was initially empty. These components are then saved to the
    table called crux-copy.cl.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{remove}{Remove a component from the list.}
  \ahkeyword{remove}{remove}
  \begin{ahdescription}

    The remove function removes the specified component(s) from the
    list. Components are specified by numbering them from one to the
    length of the list. So removing component one will remove the
    first component. After using this function all the
    remaining components will be shuffled down so that component two
    becomes component one.  You cannot remove components from a list
    that has been opened read only.

    You can specify a vector of indices to remove a number of
    components at once. For example in a five element list removing
    elements [1,3,5] will result in a two element list, now indexed as 
    elements one and two, containing what was previously the second
    and fourth components. 
  
    Components that have been deleted using this function are not
    lost. The \ahlink{recover}{componentmodels:componentlist.recover}
    function can be used to get them back unless the
    \ahlink{purge}{componentmodels:componentlist.purge} function has
    been executed. Then they are completely gone.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{indices of which component(s) to remove}
             {no default}{a vector containing unique integers between
                          1 and the length of the list} 
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.remove(1);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a componentlist from an \aipspp\ table and
    removes the first element from the list.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{purge}{Permanently delete removed components.}
  \ahkeyword{purge}{purge}
  \begin{ahdescription}

    The \ahlink{remove}{componentmodels:componentlist.remove} function
    deletes components from the list but does not remove them from
    memory. They remain accessible and can be obtained with the
    \ahlink{recover}{componentmodels:componentlist.recover}
    function. The purge function frees up the memory occupied by the
    removed components. You cannot use the recover function to obtain
    the removed components after the purge function has been called.

  \end{ahdescription}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.remove(1);
      cl.purge();
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a componentlist from a table and removes the first
    element from the list and then frees up the memory associated with 
    the removed component.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{recover}{Obtain removed components.}
  \ahkeyword{recover}{recover}
  \begin{ahdescription}
    The recover function appends components to the end of the list
    that have been deleted with the
    \ahlink{remove}{componentmodels:componentlist.remove}
    function. This does not include components that were removed
    before the \ahlink{purge}{componentmodels:componentlist.purge}
    function was last executed.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.remove(1);
      cl.recover();
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments} 
    This example reads a componentlist from a table and removes the
    first element from the list. The recover function is then called
    to append the component to the end of the list. Overall the list
    is unchanged although the first component has been moved to the end.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{length}{Find the number of components in the list.}
  \ahkeyword{length}{length}
  \begin{ahdescription}
    The length function returns a non-negative integer that
    indicates how many components the list currently contains. 
  \end{ahdescription}
  \ahreturns{Non-negative integer}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := emptycomponentlist();
      n := cl.length();
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example creates an empty componentlist. Hence the variable
    \texttt{n} will be zero after the length function is executed.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{indices}{Return a vector of indices.}
  \ahkeyword{indices}{indices}
  \begin{ahdescription}
    The indices function returns a vector of non-negative integers that
    can be used to index through the list. This vector always contains
    the integers starting at one and increasing sequentially to the
    length of the list. Its main use is in \texttt{for} loops as is
    illustrated in the example below.
  \end{ahdescription}
  \ahreturns{vector of non-negative integers}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      allcomp := cl.indices();
      cl.convertfluxunit(allcomp, 'jy');
      cl.convertfluxpol(allcomp, 'stokes');
      totalflux := [0,0,0,0];
      for (i in allcomp) {
        totalflux +:= cl.getfluxvalue(i);
      }
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a componentlist from disk and then proceeds to
    sum the flux of all the components. The units for all components
    are initially converted to Jansky's and the polarization
    representations set to Stokes.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{sort}{Sort the components in a list}
  \ahkeyword{sort}{sort}
  \begin{ahdescription}
    The sort function can sort all the components in a list using a
    variety of criteria. Currently the following criteria are
    available.
    \begin{description}
      \item[Flux] Sorts the list so that the brightest
        components, as defined by the $\mbox{abs}(I)$, are at the beginning of
        the list.
      \item[Position] Sorts the list so that components that are
        closest to a reference position, which is currently fixed at 
        (ra,dec) $= (0,0)$, are at the beginning of the list.
      \item[Polarization] Sorts the list so that components with the
        largest fractional polarization, $\frac{\sqrt{Q^2+U^2+V^2}}{I}$, are
        at the front of the list. Components where $I=0$ are placed at 
        the end of the list.
    \end{description}
    The parsing of the string containg the sorting criteria is case
    insensitive. You cannot sort a list that has been opened read only.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{criteria}{a string containg the criteria to use to sort the list}
             {Flux}{'Flux', 'Position' or 'Polarization'}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.sort('Polarization');
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a componentlist from disk and then proceeds to
    sort the components so that the most polarized components are at
    the front of the list.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{is\_physical}{Check if a component is physically plausible}
  \ahkeyword{is\_physical}{is\_physical}
  \begin{ahdescription}
    The is\_physical function is used to check if the specified
    components meet a number of criteria that must be true if the
    component could be used to model a physical process. These
    criteria are:
    \begin{itemize}
    \item $I >= \sqrt{Q^2 + U^2 + V^2}$
    \item That the flux, when represented using the Stokes
          representation, has a zero imaginary value.
    \end{itemize}

    The ``Flux properties'' section of the ComponentModels module
    documentation describes how it is possible to generate a
    component which has non-zero imaginary value in the Stokes
    representation.

    It is possible to check a number of components at once by
    specifying the indicies of all the components. The returned value
    will only be True if all the specified components are physical.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices}
             {no default}{Indices must be between 1 and the list length}
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := emptycomponentlist();
      cl.simulate(2);
      cl.setflux(1, [10, 1+3i, 1-4i, 0]print cl.is_physical(1:2), polarization='linear');
      print cl.is_physical(1:2)
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example creates a non-physical component hence the print
    statement will return F.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{sample}
  {Sample the flux of the list in a specified direction.}
  \ahkeyword{sample}{sample}
  \begin{ahdescription}

    The sample function returns a vector containing the flux in Janskys/pixel
    of all the components in the list, in the specified direction, at
    the specified frequency. The returned vector always contains four
    elements corresponding to the Stokes parameters I,~Q,~U,~V.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{direction}{The direction to sample}
             {no default}{any valid direction measure.}
    \ahaddarg{pixellatsize}{the x-size of the in pixels to use when sampling}
             {no default}{any quantity that has angular units.}
    \ahaddarg{pixellongsize}{the y-size of the in pixels to use when sampling}
             {no default}{any quantity that has angular units.}
    \ahaddarg{frequency}{The frequency to sample at}
             {no default}{Any frequency measure}
  \end{ahargs}
  \ahreturns{A vector with four elements containing the flux in Janskys/pixel
    in the I,~Q,~U,~\&~V polarizations}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      include 'measures.g'
      cl := componentlist('crux.cl', readonly=T);
      dir := dm.direction('J2000', '12h26m35.9', '-63d5m56');
      pixelsize := dm.quantity('1arcsec');
      flux := cl.sample(dir, pixelsize);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    In this example the componentlist is sampled at the position of
    $\alpha$-Cru. The flux will be a vector with four elements. 
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{rename}{Give the list a name so it can save itself.}
  \ahkeyword{rename}{rename}
  \begin{ahdescription}

    The rename function is used to specify the name of the table
    associated with this componentlist.
    
    When a componentlist is created using the
    \ahlink{emptycomponentlist}
           {componentmodels:componentlist.emptycomponentlist.constructor}
    constructor it is not associated with an \aipspp\ table. So when the
    componentlist is removed from memory its contents are lost. But if
    a name is attached to the componentlist, using the rename function,
    then its contents are saved in a table with the specified name.
    
    If the componentlist is created using the
    \ahlink{componentlist}{componentmodels:componentlist.componentlist}
    constructor then this function will rename the table associated
    with the list to the user specified name. You cannot rename a
    componentlist that has been opened read only.
    
    If a table with the specified name already exists then the user is
    prompted, using a popup dialog window, to see whether it should be
    overwritten. In a non-windows environment the file is not
    overwritten.
    
%    If the supplied filename is the null string then any table
%    currently associated with the list is removed. But the list itself
%    still contains all its components.
    
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{filename}{The filename of the table}
             {no default}{Any valid filename}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := emptycomponentlist();
      cl.simulate(1);
      cl.setshape(1, 'gaussian', '35mas', '27mas', '-10d')
      cl.setflux(1, [1.0, 0.2, 0.1, 0.01]);
      cl.rename('smallblob.cl');
      cl.close();
      n := cl.length();
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example creates and empty componentlist tool and then adds
    one component to it. The parameters of this component are then
    modified to change the shape and flux and the list saved in the
    \aipspp\ table called 'smallblob.cl' The data is not written to
    disk until the list is closed, and when it is the componentlist is
    reset. So \texttt{n} contains zero at the end of this example.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{simulate}{Add some simulated components to the list}
  \ahkeyword{simulate}{simulate}
  \begin{ahdescription}
    The simulate function adds simulated components to the list. The
    simulation criterion is very simple, all the components added are
    identical! They are point sources at the J2000 north pole with a
    flux in Stokes I of 1~Jy, and zero in the other polarizations. The
    spectrum is constant. The 'set' functions (eg., 
    \ahlink{setflux}{componentmodels:componentlist.setflux}, 
    \ahlink{setfreq}{componentmodels:componentlist.setfreq}) 
    can be used to change these parameters to desired ones. 

    The howmany argument indicates how many components to append to
    the list.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{howmany}{How many components to simulate}
             {1}{A positive integer}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := emptycomponentlist();
      cl.simulate(2)
      cl.edit(1);
      cl.setflux(2, [2.78, 0, 0, 0]);
      cl.rename('test.cl');
      cl.close();
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example creates a componentlist with two components. The
    component editor gui is then called on the first component to set the
    parameters to the desired ones, and the setflux function is used to
    modify the second one. The list is then saved on disk. I use short
    scripts like this a lot during testing. 

    I expect bad things will happen if you save the list to disk,
    using the \ahlink{close}{componentmodels:componentlist.close}
    function, before having shut down the editor gui (using the done
    button) or if you modify the same component using any of the set
    functions while it is being modified by the gui.

  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{addcomponent}{Add a component to the list}
  \ahkeyword{addcomponent}{addcomponent}
  \begin{ahdescription}

    The addcomponent function is a convenience function that ties
    together the
    \ahlink{simulate}{componentmodels:componentlist.simulate}
    function, and the various set functions. This function adds a
    component to the end of the list. For a description of the
    arguments see the following functions.
    \begin{description}
    \item[flux, fluxunit, polarization] See the
      \ahlink{setflux}{componentmodels:componentlist.setflux} function.
    \item[ra, raunit, dec, decunit] See the
      \ahlink{setrefdir}{componentmodels:componentlist.setrefdir} function.
    \item[dirframe] See the
      \ahlink{setrefdirframe}{componentmodels:componentlist.setrefdirframe} 
      function.
    \item[shape, majoraxis, minoraxis, positionangle] See the
      \ahlink{setshape}{componentmodels:componentlist.setshape} 
      function.
    \item[freq] A frequency quantity which is split into a value and
      units and passed to the 
      \ahlink{setfreq}{componentmodels:componentlist.setfreq} 
      function.
    \item[freqframe] See the 
      \ahlink{setfreq}{componentmodels:componentlist.setfreqframe} 
      function.
    \item[spectrumtype, index] See the 
      \ahlink{setspectrum}{componentmodels:componentlist.setspectrum} 
      function.
    \item[label] See the 
      \ahlink{setlabel}{componentmodels:componentlist.setlabel} 
      function.
    \end{description}
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{flux}{The flux value}
             {[1,0,0,0]}{A vector with four real or complex numbers}
    \ahaddarg{fluxunit}{The units of the flux}
             {Jy}{Any string with the same dimensions as the Jansky}
    \ahaddarg{polarization}{The polarization of the value field}
             {Stokes}{``Stokes'', ``linear'' or ``circular''}
    \ahaddarg{ra}{The RA of the new direction}
             {00:00:00.00}{A formatted string or a number}
    \ahaddarg{raunit}{The units of the RA}
             {'time'}
	          {Any string containing an angular unit or 'angle' or 'time'}
    \ahaddarg{dec}{The declination of the new direction}
             {'90.00.00.00'}{A formatted string or a number}
    \ahaddarg{decunit}{The units of the declination}
             {'time'}
	          {Any string containing an angular unit or 'angle' or 'time'}
    \ahaddarg{dirframe}{The new reference frame}
             {j2000}{A string like 'B1950', 'J2000' or 'galactic'}
    \ahaddarg{shape}{The new shape type}
             {point}{A string that is either 'point', 'Gaussian' or 'disk'}
    \ahaddarg{majoraxis}{The width of the larger axis}
             {2arcmin}{A quantity with angular units}
    \ahaddarg{minoraxis}{The width of the smaller axis}
             {1arcmin}{A quantity with angular units}
    \ahaddarg{positionangle}{The rotation of the axes with respect to
                             the reference frame}
             {0deg}{A quantity with angular units}
    \ahaddarg{freq}{The reference frequency}
             {1.415GHz}{A quantity with units equivalent to the 'Hz'}
    \ahaddarg{freqframe}{The new reference frame}
             {LSR}{A string like 'LSR', 'GEO' or 'TOPO}
    \ahaddarg{spectrumtype}{The new spectrum type}
             {constant}{A string that is either 'constant' or 'spectral index'}
    \ahaddarg{index}{The spectral indices}
             {[1,0,0,0]}{A 4-element vector or real numbers}
    \ahaddarg{label}{The label for the component}
             {The default label}{A string}
  \end{ahargs}
  \ahreturns{nothing}
\end{ahfunction}

\begin{ahfunction}{close}
  {Save the componentlist to disk and reset its state.}
  \ahkeyword{close}{close}
  \begin{ahdescription}
    The close function resets the componentlist to its default state. In
    this state it contains no components and is not associated with
    any table. This is the same state as a componentlist that has been
    newly created using the
    \ahlink{emptycomponentlist}
           {componentmodels:componentlist.emptycomponentlist.constructor}
    constructor.
    
    This function flushes all the components in memory to disk if the
    componentlist is associated with a table. The table is then
    closed, and the contents of the list deleted.
    
    If the list is not associated with a table its contents are still
    deleted and memory used by the list is released.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    See the example for the
    \ahlink{rename}{componentmodels:componentlist.rename} function.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{edit}{Start up the component editor gui}
  \ahkeyword{edit}{edit}
  \begin{ahdescription}

    The edit function starts up a graphical user interface which allows
    the user to view and manipulate individual components. The which
    argument specifies the component to edit. 

    The component being edited is copied into the
    \ahlink{componenteditor}{componentmodels:componenteditor}
    tool. Hence if you add or remove components or change the order
    of components in the list while the component is in the editor it
    will be put back in the wrong place!  So do not manipulate the
    list while editting a component. It is also suggested you only
    edit one component at a time.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    See the example for the
    \ahlink{simulate}{componentmodels:componentlist.simulate} function.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{done}{Delete the componentlist tool}
  \ahkeyword{close}{close}
  \begin{ahdescription}
    The done function frees up all the memory associated with a
    componentlist tool. After calling this function the componentlist 
    tool cannot be used, either to manipulate the current list, or
    to open a new one. This function does not delete the disk
    file associated with a componentlist, but it will shut down the
    server process if there are no other componentlist tools being used.
  \end{ahdescription}
  \ahreturns{T}
  \begin{ahexample}
    See the example for the
    \ahlink{rename}{componentmodels:componentlist.rename} function.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{select}{Mark components in the list}
  \ahkeyword{select}{select}
  \begin{ahdescription}
    The select function is used to mark the specified components as
    ``selected''. This function will be used in conjunction with the
    planned graphical user interface. Other functions functions in the
    componentlist tool will behave no differently if a component is
    marked as ``selected''.

    Components are not selected when the list is initially read
    from disk or when a new component is added to the list using the 
    \ahlink{simulate}{componentmodels:componentlist.simulate} function.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices}
             {no default}{Indices must be between 1 and the list length}
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.select([1,3]);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a list from disk and then marks the first and
    third component as selected.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{deselect}{Unmark components in the list}
  \ahkeyword{deselect}{deselect}
  \begin{ahdescription}

    The deselect function is used to remove the ``selected'' mark from
    specified components in the list. This function wiil be used in
    conjunction with the planned graphical user interface and no other
    functions in the componentlist will behave differently if a
    component is marked as ``selected'' or not.

    Components are not selected when the list is initially read
    from disk or when a new component is added to the list using the 
    \ahlink{simulate}{componentmodels:componentlist.simulate}
    function. Deselecting a component that is already deselected is
    perfectly valid and results in no change.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices}
             {no default}{Indices must be between 1 and the list length}
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.select([1,3]);
      cl.deselect([2,3]);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a list from disk. After the deselect operation
    only the first component is still selected.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{selected}{Determine which components are selected}
  \ahkeyword{selected}{selected}
  \begin{ahdescription}
    The selected function is used to determine which components in a
    list are selected. It returns a vector with indices that indicate
    which components are selected. A zero length vector is returned if 
    no components are selected.

    Components are marked as selected using the
    \ahlink{select}{componentmodels:componentlist.select}
    function. This function will be used in conjunction with the
    graphical user interface and other functions in the componentlist
    tool will behave no differently if a component is marked as
    ``selected'' or not.

  \end{ahdescription}
  \ahreturns{A vector of integers between 1 and the list length}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.select([1,3]);
      cl.deselect([2,3]);
      cl.selected()
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a list from disk. After the deselect operation
    only the first component is still selected and the selected
    function will return \verb|[1]|
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getlabel}{Get the label of the specified component}
  \ahkeyword{getlabel}{getlabel}
  \begin{ahdescription}
     The getlabel function returns the label associated with the specified
     component. The label is an arbitrary text string that can be used 
     to tag a component.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A string}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      print cl.getlabel(1);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
  This example prints the label associated with the first
  component. It returns 'Alpha Crux'.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{setlabel}{Set the label of the specified components}
  \ahkeyword{setlabel}{setlabel}
  \begin{ahdescription}
     The setlabel function is used to reassign the label (an arbitrary
     text string) of the specified components to
     a new value. 
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{value}{The label for the specified components}
             {no default}{A string}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('centarusA.cl');
      cl.setlabel(1, 'Core')
      cl.setlabel(2:10, 'Left Lobe')
      cl.setlabel(11:23, 'Right Lobe')
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example reads a model of Centarus A which contains at least
    23 components. It then marks the first one as the core, the next
    nine as the left lobe, and the next thirteen as the right lobe. The
    lobes may, for example, be modelled using a collection of Gaussian
    shaped components.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getfluxvalue}{Get the flux value of the specified component}
  \ahkeyword{getfluxvalue}{getfluxvalue}
  \begin{ahdescription}
     The getfluxvalue function returns the value of the flux of the
     specified component using the current units and the current
     polarization representation. The functions 
     \ahlink{getfluxunit}{componentmodels:componentlist.getfluxunit} \&
     \ahlink{getfluxpol}{componentmodels:componentlist.getfluxpol} \&
     can be used to get the units and polarization
     representation that corresponds to the supplied value.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A vector of length 4 with the flux values in the current
             units and polarization representation.}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      flux := cl.getfluxvalue(1);
      unit := cl.getfluxunit(1);
      pol := cl.getfluxpol(1);
      err := cl.getfluxerror(1);
    \end{verbatim}
    This example returns the values, units, polarization and error of the
    first component in the list.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{getfluxunit}{Get the flux unit of the specified component}
  \ahkeyword{getfluxunit}{getfluxunit}
  \begin{ahdescription}
     The getfluxunit function returns the units of the flux of the
     specified component. The actual values are obtained using the 
     \ahlink{getfluxvalue}{componentmodels:componentlist.getfluxvalue} function.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A string with the units of the flux for the specified component}
  \begin{ahexample}
  See the example for the
  \ahlink{getfluxvalue}{componentmodels:componentlist.getfluxvalue} function.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{getfluxpol}
  {Get the polarization representation for the flux of the specified component}
  \ahkeyword{getfluxpol}{getfluxpol}
  \begin{ahdescription}
     The getfluxunit function returns the polarization representation
     of the flux of the specified component. The actual values are
     obtained using the
     \ahlink{getfluxvalue}{componentmodels:componentlist.getfluxvalue}
     function.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A string containing either ``Stokes'', ``linear'' or 
             ``circular''. If ``Stokes'' is returned, then the flux
             values are the \verb+[I,Q,U,V]+ components of the
             polarization and are always real. For ``linear and
             ``circular'' the values returned are complex. 
             If the value is
              ``linear'' then the values returned are the
             \verb+[XX,XY,YX,YY]+ components of the polarization.
             The parrallactic angle is assumed to
             be zero in this case. If the value is ``circular'' then
             the values returned are the \verb+[RR,RL,LR,LL]+
             components of the polarization.}
  \begin{ahcomments}
  See the example for the
  \ahlink{getfluxvalue}{componentmodels:componentlist.getfluxvalue} function.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getfluxerror}{Get the error in the flux of the
specified component}
  \ahkeyword{getfluxerror}{getfluxerror}
  \begin{ahdescription}
     The getfluxerror function returns the error in the flux of the
     specified component using the current units and the current
     polarization representation. The functions 
     \ahlink{getfluxvalue}{componentmodels:componentlist.getfluxvalue} \&
     \ahlink{getfluxunit}{componentmodels:componentlist.getfluxunit} \&
     \ahlink{getfluxpol}{componentmodels:componentlist.getfluxpol} \&
     can be used to get the value, units and polarization
     representation that corresponds to the specified error.

     No error calculations are done by this tool. The error can be
     stored and retreived and if any of the parameters of the flux
     change the user is responsible for updating the errors.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A vector of length 4 with the errors in the flux values
             in the current units and polarization representation.}
  \begin{ahcomments}
  See the example for the
  \ahlink{getfluxvalue}{componentmodels:componentlist.getfluxvalue} function.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{setflux}{Set the flux of the specified components}
  \ahkeyword{setflux}{setflux}
  \begin{ahdescription}
     The setflux function is used to reassign the flux of the specified
     components to 
     a new value. The flux value, unit and polarization can be
     specified and any number of components can be set to the new value.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{value}{The flux values for the specified components}
             {no default}{A vector with four real or complex numbers}
    \ahaddarg{unit}{The units of the flux}
             {Jy}{Any string with the same dimensions as the Jansky}
    \ahaddarg{polarization}{The polarization of the value field}
             {Stokes}{``Stokes'', ``linear'' or ``circular''}
    \ahaddarg{error}{The error in the value field}
             {[0,0,0,0]}{A complex vector of length four.}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.setflux(cl.indices(), [1,0,0,0], unit='jy', 
	         polarization='stokes', error=[.3, 0, 0, 0])
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
  This example sets all the components in the list to a flux of 1 Jy
  in I and zero in the Q,~U,~\&~V polarizations.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{convertfluxunit}
	{Change (convert) the flux units of the specified components}
  \ahkeyword{convertfluxunit}{convertfluxunit}
  \begin{ahdescription}
    The convertfluxunit function is used to convert the flux to another 
    unit. The units \emph{must} have the same dimensions as the Jansky.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{unit}{The units of the flux}
             {Jy}{Any string with the same dimensions as the Jansky}
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      print cl.getfluxvalue(1);
      cl.convertflux(cl.indices(), 'WU');
      print cl.getfluxvalue(1);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example converts the flux of all components to ``Westerbork
    Units''. Assuming the units were originally Jansky's then the
    numbers printed before and after the call to the convertfluxunit
    function will differ by a factor of 200.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{convertfluxpol}
 {Change (convert) the polarization representation of the specified components}
  \ahkeyword{convertfluxpol}{convertfluxpol}
  \begin{ahdescription}
    The convertfluxpol function is used to convert the flux to another 
    polarization representation. There are are three representations
    used, namely , 'Stokes', 'linear' \& 'circular'
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{polarization}{The new polarization representation}
             {Stokes}{``Stokes'', ``linear'' or ``circular''}
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('centarusA.cl');
      print cl.getfluxvalue(1);
      cl.convertpol(1, 'linear');
      print cl.getfluxvalue(1);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example converts the flux of the first component to a linear
    representation. If the flux was originally \verb![1,0.1,0,0.01]! (in
    the Stokes representation) then the resultant flux will be 
    \verb![1.1, 0.01i, -0.01i, 0.9]!. Note that the flux is returned as a
    complex vector when the polarization representation is not Stokes.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getrefdir}{Return the reference direction}
  \ahkeyword{getrefdir}{getrefdir}
  \begin{ahdescription}
    The getrefdir function returns, as a direction measure, the
    reference direction for the specified component. The reference
    direction is for all the currently supported component shapes the
    direction of the centre of the component.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A direction measure}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      dir := cl.getrefdir(1);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example returns the direction of the centre of the first
    component in the componentlist. The returned value is a direction
    measure that can be used as an argument to many functions within
    \aipspp.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getrefdirra}{Get the RA of the reference direction.}
  \ahkeyword{getrefdirra}{getrefdirra}
  \begin{ahdescription}
    The getrefdirra function returns the right ascension of the reference
    direction of the component as a formatted string. If the reference
    frame is something other than J2000 or B1950 the value returned is
    the latitude or the azimuthal angle.

    The unit argument specifies the units for the returned value. It
    can be any angular unit (eg. 'deg', 'rad', 'arcsec', 'mas') or it
    can be 'angle' or 'time'. If it is 'angle' then the returned
    string is formatted in degrees, minutes, seconds 
    ie., '+DDD.MM.SS.sss'. If it is 'angle' then the returned string
    is formatted in hours, minutes, seconds ie., 'HH:MM:SS.sss'.

    The precision argument controls the numerical precision of the
    returned value. For the angular units it controls how many digits
    are in the returned string. For the 'angle' unit, precisions of
    two, four \& six control whether the degrees, degrees,minutes or
    degrees, minutes \& seconds are returned. Higher precisions
    increase the precision of the seconds field. Similarly, for the
    'time' unit precisions of two, four \& six control whether the
    hours, hours, minutes or hours, minutes \& seconds are returned.
  
    All directions are stored internally in double precision.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
    \ahaddarg{unit}{The angular unit of the returned value.}
             {deg}{Any string containing an angular unit or 'angle' or 'time'}
    \ahaddarg{precision}{The number of digits in the returned string.}
             {6}{Numbers between 1 and 16 make the most sense}
  \end{ahargs}
  \ahreturns{A formatted string containing the RA of the reference direction.}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      print 'The first component is at RA: ', cl.getrefdirra(1, 'time'),
            ' Dec: ', cl.getrefdirdec(1, 'angle'), 
            ' (', cl.getrefdirframe(1), ')'
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example prints the following:
    \begin{verbatim}
    The first component is at RA:  12:26:36  Dec:  -063.05.55  ( J2000 )
    \end{verbatim}
    which is the direction of the first component.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getrefdirdec}
	{Get the declination of the reference direction.}
  \ahkeyword{getrefdirdec}{getrefdirdec}
  \begin{ahdescription}

    The getrefdirdec function returns the declination of the reference
    direction of the component as a formatted string. If the reference
    frame is something other than J2000 or B1950 the value returned is
    the longitude or the altitude.

    See the
    \ahlink{getrefdirra}{componentmodels:componentlist.getrefdirra}
    function for a description of the unit and precision arguments.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
    \ahaddarg{unit}{The angular unit of the returned value.} 
             {deg}{Any string containing an angular unit or 'angle' or 'time'}
    \ahaddarg{precision}{The number of digits in the returned string.}
             {6}{Numbers between 1 and 16 make the most sense}
 \end{ahargs}
  \ahreturns{A formatted string containing the declination
             of the reference direction.}
  \begin{ahexample}
    See the example for the
    \ahlink{getrefdirra}{componentmodels:componentlist.getrefdirra} function.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{getrefdirframe}
	{Get the reference frame of the reference direction.}
  \ahkeyword{getrefdirframe}{getrefdirframe}
  \begin{ahdescription}
    The getrefdirframe function returns the reference frame of the reference
    direction of the component as a string. The returned string is
    always in upper case. Common frames are, 'J2000', 'B1950' and 'GALACTIC'.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A formatted string containing the reference frame
             of the reference direction.}
  \begin{ahexample}
    See the example for the
    \ahlink{getrefdirra}{componentmodels:componentlist.getrefdirra} function.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{setrefdir}{Set the reference direction}
  \ahkeyword{setrefdir}{setrefdir}
  \begin{ahdescription}
    The setrefdir function sets the reference direction of the
    specified components to a new value. The direction is defined by
    separately specifying the right ascension and the declination.

    The right ascension is specified as a string or a real number (if
    raunit argument is not 'time' or 'angle'). 

    The raunit argument is a string that indicates the units for
    the ra. It can be any angular unit eg., 'deg', 'rad', 'arcsec',
    'mas', or it can be 'time' or 'angle'. If the raunit is 'time'
    then the ra argument must be a string in the format 'HH:MM:SS.sss'
    eg., '19:34:63.8'. If the raunit is 'angle' then the ra argument
    must be a string in the format '+DDD.MM.SS.sss' eg.,
    '127.23.12.37'. 

    Similarly the declination is specified as a string or a real
    number and the decunit can be any angular unit or 'angle' or
    'time'.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{ra}{The RA of the new direction}
             {no default}{A formatted string or a number}
    \ahaddarg{raunit}{The units of the RA}
             {no default}
	          {Any string containing an angular unit or 'angle' or 'time'}
    \ahaddarg{dec}{The declination of the new direction}
             {no default}{A formatted string or a number}
    \ahaddarg{decunit}{The units of the declination}
             {no default}
	          {Any string containing an angular unit or 'angle' or 'time'}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := emptycomponentlist('crux.cl');
      cl.simulate(3);
      cl.setrefdir(1, '12:26:35.9', 'time', '-63.5.56', 'angle')
      cl.setrefdir(2, '12h26m35.9', 'time', '-63d5m56', 'angle')
      cl.setrefdir(3, -173.35, 'deg', '-1.10128', 'rad')
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example sets the reference direction for three newly created
    components to the same value.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{setrefdirframe}{Set the reference frame for the direction}
  \ahkeyword{setrefdirframe}{setrefdirframe}
  \begin{ahdescription}

    The setrefdirframe function sets the reference frame for the
    reference direction of the specified components (what a mouthful)!

    Currently the reference frame does not include additional
    information like when are where the observation took place. Hence
    only reference frames that are independent of this information can be
    used. This includes the common ones of 'J2000', 'B1950', and
    'Galactic'. The \ahlink{measures}{measures} module contains a
    complete listing of all possible reference frames. The parsing of
    the reference frame string is case-insensitive.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{frame}{The new reference frame}
             {no default}{A string like 'B1950', 'J2000' or 'galactic'}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.setrefdirframe(cl.indices(), 'B1950');
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example sets the reference frame for all the components in
    the list to the B1950 reference frame. You would use this example
    if you had entered the B1950 coordinates for the direction of all
    the components in the list but had forgotten that the default
    reference frame was J2000 for newly created components.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{convertrefdir}
	{Convert the reference direction to a new frame}
  \ahkeyword{convertrefdir}{convertrefdir}
  \begin{ahdescription}
    The convertrefdir function changes the specified components to use a
    new direction reference frame. Using this function will change the
    right-ascension and declination of the component(s), unlike the
    setrefdirframe which does not.

    Please see the
    \ahlink{setrefdirframe}{componentmodels:componentlist.setrefdirframe}
    function for a description of what frames are allowed.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{frame}{The new reference frame}
             {no default}{A string like 'B1950', 'J2000' or 'galactic'}
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.convertrefdirframe(cl.indices(), 'J2000');
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example illustrates what you would do if you had a list where
    all the directions were in the B1950 reference frame but you
    needed the coordinates in the J2000 reference frame. Unlike the
    \ahlink{setrefdirframe}{componentmodels:componentlist.setrefdirframe}
    function this one adjusts the right ascension and declination values.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{shapetype}{Returns the shape type of the component}
  \ahkeyword{shapetype}{shapetype}
  \begin{ahdescription}
    The shapetype function returns the current shape of the specified
    component. The shape defines how the flux of the component varies
    with direction on the sky. Currently there are three shapes
    available. These are 'Point', 'Gaussian', and 'Disk'. This
    function returns one of these three strings.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A string specifying the current component shape}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      print 'The first component has a', cl.shapetype(1), ' shape';
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example prints the following:
    \begin{verbatim}
      The first component has a Point  shape
    \end{verbatim}
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getshape}{Return the shape parameters the component}
  \ahkeyword{getshape}{getshape}
  \begin{ahdescription}

    The getshape function returns the shape parameters of a component
    in a record. As different shapes can have a differing number and
    type of parameters the shape parameters are returned in a record
    with fields that correspond to parameters relevant to the current
    shape.

    For a point shape there are only two fields; type and
    direction. These are the shape type, and the reference
    direction. These values are also returned by the
    \ahlink{shapetype}{componentmodels:componentlist.shapetype} and
    \ahlink{getrefdir}{componentmodels:componentlist.getrefdir}
    functions.

    For both the Gaussian and disk shapes there are three additional
    fields; majoraxis, minoraxis \& positionangle. These are angular
    \ahlink{quantities}{quanta}, and hence are records with a value
    and a unit. 

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A record with fields that contain the parameters of the
             component shape.}
  \begin{ahexample}
    See the examples for the
    \ahlink{setshape}{componentmodels:componentlist.setshape} \& 
    \ahlink{convertshape}{componentmodels:componentlist.convertshape}
    functions.  
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{setshape}{Change the shape of the component}
  \ahkeyword{setshape}{setshape}
  \begin{ahdescription}
    The setshape function changes the shape of the specified components
    to the user specified shape.

    The type argument defines what the sort of new shape to use. This
    can be either 'point', 'Gaussian' or 'disk'. The parsing of this
    string is case insensitive.

    If the shape type is 'point' then the remaining arguments in this
    function are ignored. There are no other parameters needed to
    specify a point shape. 

    But if the shape is 'Gaussian' or 'disk', the remaining arguments
    are needed to fully specify the shape. The majoraxis, minoraxis
    and positionangle arguments are quantities (see the
    \ahlink{quanta}{quanta} module for a definition of a
    quantity). Hence they can be specified either as with string eg.,
    '1arcsec' or with a record eg., [value=1, unit='deg'].

    The major axis is the width of the larger axis. For the Gaussian
    shape this is the full width at half maximum. And the minor axis
    is the width of the orthogonal axis. The positionangle is the
    specifies the rotation of these two axes with respect to a line
    connecting the poles of the current direction reference frame. If
    the angle is positive the the north point of the component moves
    in the eastern direction.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{type}{The new shape type}
             {Point}{A string that is either 'point', 'Gaussian' or 'disk'}
    \ahaddarg{majoraxis}{The width of the larger axis}
             {1arcmin}{A quantity with angular units}
    \ahaddarg{minoraxis}{The width of the smaller axis}
             {1arcmin}{A quantity with angular units}
    \ahaddarg{positionangle}{The rotation of the axes with respect to
                             the reference frame}
             {0deg}{A quantity with angular units}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl', readonly=F);
      cl.setshape(3, 'disk',  '45mas', '45mas');
      print cl.getshape(3).majoraxis;
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example revises the model for Gamma-Crux changing its shape
    from a point to a circular disk of diameter 45mas. The output from 
    the print statement is \verb|[value=45, unit=mas]|.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{convertshape}{Change the units of the shape parameters}
  \ahkeyword{convertshape}{convertshape}
  \begin{ahdescription}

    The convertshape function changes the units of the specified shape
    parameters on the specified components. When changing the units it 
    also converts the values so that overall the angle has not changed.

    Depending on the component shape some arguments of this function
    are ignored. If the shape type is 'point', then all but the which
    argument are ignored. This function is useless for points.

    If the shape is a 'gaussian' or 'disk' then this will modify the
    units of the major and minor axes and the positionangle. Use the 
    \ahlink{getshape}{componentmodels:componentlist.getshape} function
    to see these parameters using the new units.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{majoraxis}{The units to use on the larger axis}
             {arcmin}{A string with angular units}
    \ahaddarg{minoraxis}{The units to use on the smaller axis}
             {arcmin}{A string with angular units}
    \ahaddarg{positionangle}{The units to use for the rotation of
                             these axes}
             {deg}{A string with angular units}
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      cl.convertshape(3, 'arcsec', 'arcsec');
      print cl.getshape(3).minoraxis;
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example converts the units for the majoraxis and minor axis
    widths to arc-seconds. Assuming they where originally set to
    45mas, as is done in the example for the
    \ahlink{setshape}{componentmodels:componentlist.setshape} function, 
    the value printed would be \verb|[value=0.045, unit=arcsec]|.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{spectrumtype}{Returns the spectral shape of the component}
  \ahkeyword{spectrumtype}{spectrumtype}
  \begin{ahdescription}
    The spectrumtype function returns the current spectral shape of the
    specified component. The spectral shape defines how the flux of
    the component varies with frequency. Currently there are two
    spectral shapes available. These are 'Constant' and 'Spectral
    Index'. This function returns one of these two strings.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A string specifying the spectral shape of the specified component}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('crux.cl');
      print 'The first component has a', cl.spectrumtype(1), ' spectrum';
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example prints the following:
    \begin{verbatim}
      The first component has a Constant  spectrum
    \end{verbatim}
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getspectrum}{Return the spectral parameters the component}
  \ahkeyword{getshape}{getshape}
  \begin{ahdescription}

    The getspectrum function returns the spectral parameters of a
    component in a record. As different spectral shapes can have a
    differing number and type of parameters the spectral parameters
    are returned in a record with fields that correspond to parameters
    relevant to the current spectral shape.

    For a constant spectrum there are only two fields; type and
    frequency. These are the spectral type, and the reference
    frequency. These values are also returned by the
    \ahlink{spectrumtype}{componentmodels:componentlist.spectrumtype} and
    \ahlink{getfreq}{componentmodels:componentlist.getfreq}
    functions.

    For the spectral index spectral shape there is also an index
    field.  This contains a vector with four numbers, these are the
    spectral indicies for the I,~Q,~U,~\&~V components of the flux.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A record with fields that contain the parameters of the
             spectral type.}
  \begin{ahexample}
    See the examples for the
    \ahlink{setspectrum}{componentmodels:componentlist.setspectrum} \& 
    \ahlink{getspectrum}{componentmodels:componentlist.getspectrum}
    functions.  
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{setspectrum}{Change the spectrum of the component}
  \ahkeyword{setspectrum}{setspectrum}
  \begin{ahdescription}
    The setspectrum function changes the spectrum of the specified components
    to the user specified spectrum.

    The type argument defines what the sort of new spectrum to use. This
    can be either 'constant'or 'spectral index'. The parsing of this
    string is case insensitive.

    If the spectrum type is 'constant' then the remaining arguments in
    this function are ignored. There are no other parameters needed to
    specify a constant spectrum.

    But if the spectrum is 'spectral index', the index argument is
    needed to fully specify the spectrum. The index argument is a
    4-element vector that contains the spectral index of the
    I,~Q,~U,~\&~V polarizations. You should ensure that the reference
    frequency is set to the value you desire, using the
    \ahlink{setfreq}{componentmodels:componentlist.setfreq}
    function if you change to the spectral index shape.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{type}{The new spectrum type}
             {Constant}{A string that is either 
			'constant or 'spectral index'}
    \ahaddarg{index}{The spectral indices}
             {[1,0,0,0]}{A 4-element vector or real numbers}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('centarusA.cl');
      cl.setspectrum(2:10, 'spectral index', [-0.5, 0, 0, 0]);
      print cl.getshape(2).index;
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example revises the model for Centaurus-A changing the
    spectral index of all the components in the left lobe. The output
    from the print statement is \verb|[-0.5 0 0 0]|
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getfreq}{Get the reference frequency}
  \ahkeyword{getfreq}{getfreq}
  \begin{ahdescription}

    The getfreq function returns, as a frequency measure, the reference
    frequency for the specified component. At the reference frequency
    the flux of the component is the value obtained with the
    getfluxvalue function. The flux may be different at other
    frequencies, depending on the components spectral shape.

    If the spectral shape is constant then changing the reference
    frequency will not affect the spectrum of the component.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A frequency measure (a record)}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('centarusA.cl');
      f := cl.getfreq(2);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example returns the reference frequency of the first
    component in the componentlist. The returned value is a frequency
    measure that can be used as an argument to many functions within
    \aipspp .
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getfreqvalue}{Get the reference frequency value}
  \ahkeyword{getfreqvalue}{getfreqvalue}
  \begin{ahdescription}

    The getfreqvalue function returns as a floating point number the
    value of the reference frequency. To fully interpret this value
    you should also use the frequency unit, obtained using the
    \ahlink{getfrequnit}{componentmodels:componentlist.getfrequnit}
    function and the frequency reference frame, obtained using the
    \ahlink{getfrequnit}{componentmodels:componentlist.getfrequnit}
    function

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A number containing the value of the reference frequency.}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('centarusA.cl');
      print 'The reference frequency is ', cl.getfreqvalue(1), ' ', 
            cl.getfrequnit(1), '(', cl.getfreqframe(1), ')'
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example prints the following:
    \begin{verbatim}
    The reference frequency is  1   GHz ( LSR )
    \end{verbatim}
    which is the reference frequency of the first component.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{getfrequnit}{Get the reference frequency unit}
  \ahkeyword{getfrequnit}{getfrequnit}
  \begin{ahdescription}

    The getfrequnit function returns as a string that defines the units
    of the reference frequency. This unit should be used in
    conjunction with the
    \ahlink{getfreqvalue}{componentmodels:componentlist.getfreqvalue}
    function.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A string containing the unit of the reference frequency.}
  \begin{ahexample}
    See the example for the
    \ahlink{getfreqvalue}{componentmodels:componentlist.getfreqvalue} function.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{getfreqframe}{Get the reference frequency frame}
  \ahkeyword{getfreqframe}{getfreqframe}
  \begin{ahdescription}
    The getfreqframe function returns as a string the reference frame of
    the reference frequency of the specified component.

    See the \ahlink{measures}{measures} module for a description of
    the available frequency reference frames. Common frames are,
    'LSR', 'TOPO' and 'GEO'.

    The frame string is always returned in upper case.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {no default}{An integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{A string containing the reference frame
             of the reference frequency.}
  \begin{ahexample}
    See the example for the
    \ahlink{getfreqvalue}{componentmodels:componentlist.getfreqvalue} function.
  \end{ahexample}
\end{ahfunction}

\begin{ahfunction}{setfreq}{Set the reference frequency}
  \ahkeyword{setfreq}{setfreq}
  \begin{ahdescription}

    The setfreq function sets the reference frequency of the specified
    components to a new value. The frequency is defined by separately
    specifying the value and its units. Use the
    \ahlink{setfreqframe}{componentmodels:componentlist.setfreqframe}
    function to set the frequency reference frame

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{value}{The new frequency value}
             {no default}{A number}
    \ahaddarg{unit}{The units of the frequency}
             {'GHz'}{Any string with the same dimensions as the 'Hz'}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('centarusA.cl');
      cl.setfreq(1, 1.415, 'GHz');
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example sets the reference frequency of the first component
    to 1.415 GHz. If the spectral type is 'spectral index' and the
    indicies are non-zero then this will change the flux of the
    component at all frequencies.
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{setfreqframe}{Set the reference frame for the frequency}
  \ahkeyword{setfreqframe}{setfreqframe}
  \begin{ahdescription}

    The setfreqframe function sets the reference frame for the
    reference frequency of the specified components.

    Currently the reference frame does not include additional
    information like when are where the observation took place. Hence
    no conversion between reference frames is available. In the
    interim I recommend you always use the same frame.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{frame}{The new reference frame}
             {no default}{A string like 'LSR', 'GEO' or 'TOPO}
    \ahaddarg{log}{Send a message to the logger}
             {T}{Boolean} 
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('centarusA.cl');
      cl.setfreqframe(1:23, 'LSR')
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example sets the reference frequency frame for the first
    component to LSR (local standard of rest). 
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{convertfrequnit}
	{Convert the reference frequency to a new unit}
  \ahkeyword{convertfrequnit}{convertfrequnit}
  \begin{ahdescription}

    The convertfrequnit function changes the specified components to use
    a new unit for the reference frequency. Using this function will
    change the frequency value also so that the overall reference
    frequency is not changed. It will affect the values and units
    obtained with
    \ahlink{setfreqvalue}{componentmodels:componentlist.setfreq}
    function.

    Any unit can be used that has the same dimensions as the 'Hz'.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to modify}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{unit}{The new frequency unit}
             {'GHz'}{Any string with the same dimensions as the 'Hz'}
  \end{ahargs}
  \ahreturns{nothing}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      cl := componentlist('centarusA.cl');
      cl.convertfrequnit(1, 'kHz');
      print 'The reference frequency is ', cl.getfreqvalue(1), ' ', 
            cl.getfrequnit(1), '(', cl.getfreqframe(1), ')'
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example prints, when used in conjunction with example from
    the \ahlink{setfreq}{componentmodels:componentlist.setfreq} function
    the following:
    \begin{verbatim}
    The reference frequency is  1.415e+06   kHz ( LSR )
    \end{verbatim}
  \end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{component}{Extract a component from the list.}
  \ahkeyword{component}{component}
  \begin{ahdescription}

    The component function returns a record, showing the current state
    of the specified component in the list.

    Modifying the record that is returned by this function does not
    modify the component in the list. To do this you must remove the
    component from the list, using the
    \ahlink{remove}{componentmodels:componentlist.remove} function,
    and add the modified component using the
    \ahlink{add}{componentmodels:componentlist.add} function, or use
    the \ahlink{replace}{componentmodels:componentlist.replace} object
    function.  This function will be removed in a future release of
    aips++ and you are urged to use the get functions to extract
    information about a component.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{index of which component to extract}
             {no default}{integers between 1 and the length of the list}
    \ahaddarg{iknow}{Suppress the warning message}
             {F}{Boolean}
  \end{ahargs}
  \ahreturns{A record representing a component.}
\end{ahfunction}

\begin{ahfunction}{add}{Add a component to the list.}
  \ahkeyword{add}{add}
  \begin{ahdescription}
    The add function adds a component to the component
    list. You cannot add components to a list that has been opened
    read only. To use this function you need to know the details of
    the record format. however this has been deprecated and you are
    urged to use the set functions, in conjunction with the simulate
    function to add a component to the list.
    This function will be removed in a future release of aips++.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{component}{A record that represents a component}
             {no default}{any record that contains the required fields}
    \ahaddarg{iknow}{Suppress the warning message}
             {F}{Boolean}
  \end{ahargs}
  \ahreturns{nothing}
\end{ahfunction}

\begin{ahfunction}{replace}{Replace components in the list.}
  \ahkeyword{replace}{replace}
  \begin{ahdescription}

    The replace function replaces the components from the list with
    the specified components from another list. The source list can be
    opened readonly and the length of the vectors in the first and
    third arguments must the the name.

    You cannot replace components in a list that has been opened read
    only.

  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{A vector of indices specifying the components to replace}
             {no default}{A vector with indices between 1 and the list length}
    \ahaddarg{list}{The list containing the components to copy}
             {no default}{A componentlist tool}
    \ahaddarg{whichones}{A vector of indices specifying the components to copy}
             {F}{A vector with indices between 1 and the length of the 
list in the second argument}
  \end{ahargs}
  \ahreturns{nothing}
\end{ahfunction}

  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      newcl := componentlist('core', readonly=F);
      othercl := componentlist('centarusA.cl', readonly=T);
      newcl.replace(1:2, othercl, [10,13]);
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example replaces components 1 and 2 in the newcl list with
    components 10 \& 13 from the othercl list.
  \end{ahcomments}

\begin{ahfunction}{print}
  {Summarize the specified component to the logger}
  \ahkeyword{print}{print}

  \begin{ahdescription}
     The print function summarizes the contents of the specified components to the logger.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{which}{An index specifying which component}
             {All components}{Unset or an integer between 1 and the list length}
  \end{ahargs}
  \ahreturns{T}
\end{ahfunction}

\end{ahobject}

%% Global functions

\begin{ahfunction}{is\_componentlist}{Is the argument a componentlist tool?}
  \ahkeyword{is\_componentlist}{is\_componentlist}
  \begin{ahdescription}
    This global function can be used to determine if the supplied
    argument is a componentlist tool. If so it returns True, otherwise 
    it returns False.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{tool}{The variable that you wish to test}
             {no default}{Any glish variable}
  \end{ahargs}

  \ahreturns{T or F, indicating if the argument is a componentlist
             tool or not.}
  \begin{ahexample}
    \begin{verbatim}
      include 'componentlist.g'
      if (is_componentlist(cl)) {
        cl.simulate(2);
      } else { 
        fail 'Not a componentlist';
      }
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example shows how you can use this function to determine if
    the supplied variable is a componentlist.
  \end{ahcomments}

\end{ahfunction}

