%% Copyright (C) 2000
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: wnbt.help,v 19.2 2004/08/25 01:57:32 cvsmgr Exp $
\documentclass{book}
\usepackage{aips2help,html}
\begin{document}


\begin{ahmodule}{wnbt}{Test interfaces and modules}

\ahinclude{wnbt.g}

\ahkeyword{test}{}


\begin{ahdescription}

\bigskip


wnbt contains some modules to be tested. At the moment it has
functions to open/close an image; to read an element of the image
(first plane), and to do a rough finding for sources for calibration
 purposes.


\begin{ahexample}
In the example an image is opened; the header is shown; a find is
doen, and again; and the image is closed.
\begin{verbatim}
Glish version 2.6. 
- include 'wnbt.g'
- wnb.imop('crs')
crs 
- wnb.imph()
NORMAL: 
Image name       : crs
Image mask       : None
Image units      : Jy/beam
Restoring Beam   : 3.74455 arcsec, 3.25875 arcsec, 32.804 deg
NORMAL: 
Direction system : B1950
Frequency system : LSRK
Velocity  system : RADIO
Telescope        : UNKNOWN
Observer         : UNKNOWN
Date observation : UNKNOWN

Name             Proj Shape Tile   Coord value at pixel    Coord incr Units
--------------------------------------------------------------------------- 
Right Ascension   SIN   300  150  12:26:33.248   151.00 -7.000000e-01 arcsec
Declination       SIN   300  150 +02.19.43.290   151.00  7.000000e-01 arcsec
Stokes                    2    1            IV
Frequency                 1    1  8.085000e+09     1.00  5.000000e+07 Hz
Velocity                                  Fail     1.00          Fail km/s
crs 
- wnb.imfd()
[[1:1,]
    29.8182 150.001 150] 
- wnb.imfd(maplim=0.05)
[[1:2,]
    29.8182 150.001 150
    2.50506 127.84  169.982] 
- wnb.imcl()
T 
- 
\end{verbatim}
\end{ahexample}


\end{ahdescription}

\ahfuncs{}
\ahobjs{}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahobject}{wnbt}{wnb test tool}
\ahcategory{utility}
\ahkeyword{wnbt}{}

\ahfuncs{}

\begin{ahconstructor}{wnbt}{Construct wnbt tool}
\begin{ahargs}
\end{ahargs}
\ahreturns{tool}
\end{ahconstructor}
%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{imop}{Open an image in the tool}
\begin{ahargs}
\ahaddarg{infile}{number of unknownspath of image}{}{string}
\end{ahargs}
\ahreturns{Bool}
\begin{ahdescription}

Open an image in the tool.


\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{imcl}{Close an image in the tool}
\begin{ahargs}
\end{ahargs}
\ahreturns{Bool}
\begin{ahdescription}

Close  an image in the tool.


\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{imph}{Print header of image in the tool}
\begin{ahargs}
\end{ahargs}
\ahreturns{Bool}
\begin{ahdescription}

Print header of the image


\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{imel}{Get an element in image in the tool}
\begin{ahargs}
\ahaddarg{index}{full index of element}{[0,0,0,0]}{vector of integers}
\end{ahargs}
\ahreturns{Double}
\begin{ahdescription}

Get an element in the image in the tool.


\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{imfd}{Find sources in image in the tool}
\begin{ahargs}
\ahaddarg{number}{max number to find}{20}{positive integer}
\ahaddarg{maplim}{max range to find}{0.1}{double between 0 and 1}
\ahaddarg{afind}{find also negative sources}{F}{bool}
\end{ahargs}
\ahreturns{matrix of ampl and positions}
\begin{ahdescription}

Find in an image the most intense (point) sources. Only a rough method
is used, for calibration purposes. It is assumed that a source to be
found will peak in the image. Once found, a least squares fit of a
general ellipsoid is done to better the grid position and
amplitude. Only sources with a peak flux greater than maplim fraction
of strongest will be found. Only positive sources will be found,
unless the afind (absolute find) is true.

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{compdef}{Define an update component object in the tool}
\begin{ahargs}
\ahaddarg{compl}{component list to update}{}{file path string}
\end{ahargs}
\ahreturns{boolean}
\begin{ahdescription}

Define the componentlist that has to be updated

\end{ahdescription}
\end{ahfunction}

\end{ahobject}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{comprem}{Close an update component object in the tool}
\begin{ahargs}
\end{ahargs}
\ahreturns{boolean}
\begin{ahdescription}

Close the update componentlist object

\end{ahdescription}
\end{ahfunction}

\end{ahobject}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{compmak}{Create the update equations}
\begin{ahargs}
\ahaddarg{deriv}{derivatives to solvables}{}{3d array of double complex}
\ahaddarg{dat}{corrected visibilities}{}{1d array of double complex}
\end{ahargs}
\ahreturns{boolean}
\begin{ahdescription}

compmak creates the normal equations to solve for the uv-plane source
components. At the moment it will solve for the three main variables
(I, l, m), given the [3,nmodel,nuv] derivatives of the model sources,
and the [nuv] corrected visibilities.

\end{ahdescription}
\end{ahfunction}

\end{ahobject}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{compsol}{Solve the update equations}
\begin{ahargs}
\ahaddarg{sol}{update solutions}{}{2d array of doubles}
\ahaddarg{err}{update solutions errors}{}{2d array of doubles}
\end{ahargs}
\ahreturns{boolean}
\begin{ahdescription}

compsol returns the dI/I, dl and dm calculated from the update
equations, and their standard deviations in [3,nmodel] matrices.

\end{ahdescription}
\end{ahfunction}

\end{ahobject}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{ahmodule}
\end{document}






