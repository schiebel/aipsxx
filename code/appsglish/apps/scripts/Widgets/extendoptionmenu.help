%% Copyright (C) 1999,2000
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: extendoptionmenu.help,v 19.2 2004/08/25 02:13:38 cvsmgr Exp $
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{extendoptionmenu}{Tk widget where the (interactively
extendable) menu label changes with selection}

\ahinclude{extendoptionmenu.g}

\ahcategory{widgets}

   %
   %ahkeyword registers module keywords
   %

\ahkeyword{widgets}{}
\ahkeyword{Tk}{}

\ahmethods{}

\begin{ahdescription}

This Tk widget enables you to create a flat (i.e.  no submenus) menu in
a specified frame.  You can associate a label (that which appears on the
top menu button), a name (that which appears in the menu list) and a
value (whatever you like, it may be different from the label) for each
menu item.  When you select one of the items in the menu, the label of
the menu button changes to reflect the label of the selected item. 

If your list of items is very long, a menu may be too long to sensibly  
manage. Therefore, you can optionally choose (see constructor) to use a popup
scrolling listbox rather than a menu (it's really implemented with a
\ahlink{selectabelist}{widgets:selectablelist} widget).

It can be treated like any of the built in Tk widgets, and has almost all of
the same construction arguments as the button Tk widget. 

Whenever a selection is made, this widget emits an event called {\tt
select}.  In the \$value of this event, you can find a record with
fields {\tt label}, {\tt name} and {\tt value} containing that
information for the selected item.  The event generation can be disabled
if you desire with the
\ahlink{seteventmask}{widgets:extendoptionmenu.seteventmask} tool
function.   

Whenever the menu is replaced with the
\ahlink{replace}{widgets:extendoptionmenu.replace} tool function, this
widget emits an event called {\tt replaced} (it has no value).  Note
that the tool function
\ahlink{extend}{widgets:extendoptionmenu.extend} invokes the {\tt
replace} function, so a {\tt replaced} event is generated then as well. 

The widget accepts an event called {\tt setwidth}.  It is the same as
calling the \ahlink{setwidth}{widgets:extendoptionmenu.setwidth} tool
function.

This widget is very much like the
\ahlink{optionmenu}{widgets:optionmenu} widget.  There are two
differences.  First, the {\tt extendoptionmenu} menu can be extended
interactively during use.  When constructed, you specify a special
symbol for the menu (defaults to the ellipsis).  When the user selects
this item, you can type in a new entry in a
ahlink{dialogbox}{widgets:dialogbox} or use callback functions that the
programmer provides.  Second, {\tt extendoptionmenu} only offers you
labels for the menu items, whereas
\ahlink{optionmenu}{widgets:optionmenu} offers you labels, names, and
values for each menu item. The {\tt select} event is also triggered when you 
add an item to the menu.


\end{ahdescription}



\begin{ahconstructor}{extendoptionmenu}{Construct an extendoptionmenu}
\begin{ahargs}
  \ahaddarg{parent}{Parent of the menu}{}{Widget}
  \ahaddarg{labels}{The menu item labels}{Empty menu}{Vector of strings}
  \ahaddarg{hlp}{Short popuphelp text}{No help}{String}
  \ahaddarg{hlp2}{Long popuphelp text}{No help}{String}
  \ahaddarg{nbreak}{The break point for menu or listbox usage}{20}{Integer}
  \ahaddarg{symbol}{Special symbol for menu extension}{`...'}{String}
  \ahaddarg{callback1}{Callback function when special symbol selected}{F}{String}
  \ahaddarg{callback2}{Callback function when special symbol selected}{F}{String}
  \ahaddarg{callbackdata}{Data for callback2 calculations}{F}{Any Glish variable}
  \ahaddarg{dialoglabel}{Label for dialogbox}{`Item'}{String}
  \ahaddarg{dialogtitle}{Title for dialogbox}{`Enter new item <CR>'}{String}
  \ahaddarg{padx}{Horizontal padding around text}{7}{Integer}
  \ahaddarg{pady}{Vertical padding around text}{3}{Integer}
  \ahaddarg{width}{Width in character units}{Auto-scale}{Integer}
  \ahaddarg{updatelabel}{Update menu label with selected item}{T}{T or F}
  \ahaddarg{height}{Height in character units}{1}{Integer}
  \ahaddarg{justify}{Justification of text}{`center'}{String from `center', 'left', 'right'}
  \ahaddarg{font}{Font of text }{}{X font}
  \ahaddarg{relief}{Edge relief}{`groove'}{String from `flat', `ridge', 
                                           `raised', `sunken', `groove'}
  \ahaddarg{borderwidth}{Border width}{2}{Integer}
  \ahaddarg{foreground}{Color of text}{`black'}{X color}
  \ahaddarg{background}{Background color}{`lightgrey'}{X color}
  \ahaddarg{disabled}{Is inactivated ?}{F}{Boolean}
  \ahaddarg{anchor}{Location of text}{`c'}{String  from 'c', 'n', 's', 'e', 'w', 'ne',
                                           'nw', 'se', 'sw'}
  \ahaddarg{fill}{How to expand when resized}{'none'}{String from `x', `y', `both', `none'}
  \ahaddarg{widgetset}{The widget server to use}{dws}{widgetserver tool}
\end{ahargs}
\ahreturns{Agent}

\begin{ahdescription}

By default, the {\tt extendoptionmenu} will insert a ``...'' into the
menu (you don't include it in the {\tt labels} list).  Use the argument
{\tt symbol}) to use a different special selection symbol.  When the user selects this
item from the menu, a few things might happen. 

First, if {\tt callback1} is a valid function, then it is invoked (it has no arguments),
and the result is expected to be a string which is inserted into the menu
(duplicates are ignored).

Second, if {\tt callback1} is not a valid function, then a
ahlink{dialogbox}{widgets:dialogbox} widget is created, and the user
types the new menu item label into the entry box of this widget.  If the
new item is a duplicate, nothing further happens.  Otherwise, if {\tt
callback2} is a valid function, then it is invoked with arguments {\tt
callback2(newitem, labels, callbackdata}.  Here, {\tt newitem} is the
string that came from the {\tt dialogbox}.  {\tt labels} is the list of
current menu labels, and {\tt callbackdata} is any Glish variable you
care to pass into the {\tt callback2} function.  It is up to you, the
programmer, whether you need to use {\tt callbackdata} or not.  If the
result returned from {\tt callback2} is {\tt T}, then the {\tt newitem}
is placed in the menu. 

Note that the {\tt width} argument can be used in three ways.
If {\tt width=-1} (the default), the menu button will be wide enough
(and of fixed width) to accomodate all of the item labels in the menu.  
This means that the GUI won't jitter when you write different
length labels into it.   If {\tt width=0}, then the menu button 
will change its width to accomodate whatever label is written
into it.  If {\tt width > 0}, then the button is again of fixed
width, with the width that you specify.

If there are less items in the list than {\tt nbreak}, you will see a
flat menu.  Otherwise, you will see a scrolling list box.  Note that
to activate the listbox you must press and release the main button.
Whereas for the flatmenu, pressing is enough to activate it.   


\end{ahdescription}


\begin{ahexample}
\begin{verbatim}
- include 'extendoptionmenu.g'   
- labels := "m cm mm";
- f := frame();
- em := extendoptionmenu(f, labels);
\end{verbatim}

The ellipsis is used, by default, as the menu extend symbol.  A dialog
box will appear if the user selects the extend symbol.  If the user
types in a string which is not already in the list of labels, it will be
added to the menu. 
\end{ahexample}

\begin{ahexample}
\begin{verbatim}
- include 'quanta.g'
- include 'extendoptionmenu.g'   
- qs := quanta();
- labels := "m cm mm";
- f := frame();
- em := extendoptionmenu(f, labels, callback2=myfun, callbackdata=qs)
\end{verbatim}

The ellipsis is used, by default, as the menu extend symbol.  A dialog
box will appear if the user selects the extend symbol.  If the user
types in a string which is not already in the list of labels, it will be
added to the menu provided the function {\tt myfun}, which you supply,
returns T.  Function {tt myfun} is given the quanta server tool, {\tt qs}
for use.


\end{ahexample}

\end{ahconstructor}
 

\begin{ahfunction}{extend}{Extend the menu with more items}
\begin{ahargs}  
  \ahaddarg{labels}{The menu item labels}{Empty menu}{Vector of strings}
  \ahaddarg{width}{Width in character units}{Auto-scale}{Integer}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This tool function extends the menu with the supplied items.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m cm mm";
- f := frame();
- m := extendoptionmenu(f, labels);
- m.extend(labels="dm Dm");
- m.getlabels();
m cm mm dm Dm
-
\end{verbatim}

\end{ahexample}

Note that unlike when you interactively extend the menu, no
checking for the validity of the new items is done.
That is your responsibility.
\end{ahfunction}



\begin{ahfunction}{replace}{Replace the menu with the provided items}
\begin{ahargs}  
  \ahaddarg{labels}{The menu item labels}{Empty menu}{Vector of strings}
  \ahaddarg{width}{Width in character units}{Auto-scale}{Integer}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This tool function replaces the menu with the supplied items.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m cm mm";
- f := frame();
- m := extendoptionmenu(f, labels);
m.getlabels();
m cm mm
- m.replace("dm Dm");
- m.getlabels();
dm Dm
-
\end{verbatim}

\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{selectindex}{Select an item in the menu by index}
\begin{ahargs}  
  \ahaddarg{idx}{The menu item index}{}{Integer}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This tool function selects a menu item by its index. It is equivalent
to selecting the item with the GUI interface.  If the index is
invalid, it returns {\tt F}.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels);
- m.selectindex(3);
- m.getlabel();
cm
-
\end{verbatim}

\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{selectlabel}{Select an item in the menu by label}
\begin{ahargs}  
  \ahaddarg{label}{The menu item label}{}{Same type as the array ``labels'' used in construction}
\end{ahargs}
\ahreturns{Bool}
 
\begin{ahdescription}
 
This tool function selects a menu item by its label.  It is equivalent
to selecting the item with the GUI interface.  If the label is invalid,
it returns {\tt F}. 
 
\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels)
- m.selectlabel('mm');
- m.getlabel(); 
mm
-
\end{verbatim}
 
\end{ahexample}
\end{ahfunction}



\ahreturns{Bool}
 
\begin{ahdescription}
 
This tool function selects a menu item by its name.  It is equivalent
to selecting the item with the GUI interface.  If the name is invalid,
it returns {\tt F}. 

 
\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- names := "A B C";
- f := frame();
- m := extendoptionmenu(f, labels, names);
- m.selectname("C");
- m.getindex(); 
3
-
\end{verbatim}
 
\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{getindex}{Get the index of the current selection}
\ahreturns{Integer or F}

\begin{ahdescription}

This tool function recovers the index of the currently selected item
in the menu.  If the menu is empty, it returns {\tt F}.  If no menu item
has been selected by the user, it returns unity.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels)
- m.selectindex(2);
- m.getindex();
2
\end{verbatim}

\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{getpreviousindex}{Get the index previous to the current selection}
\ahreturns{Integer or F}

\begin{ahdescription}

This tool function recovers the index that you selected previous to
the current selection.  If the menu is empty, it returns {\tt F}.  If no
menu item has been selected by the user, it returns unity. 


\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels);
- m.selectindex(2);
- m.selectindex(3);
- m.getpreviousindex();
2
\end{verbatim}

\end{ahexample}
\end{ahfunction}




\begin{ahfunction}{getlabel}{Get the label of the current selection}
\ahreturns{String or F}

\begin{ahdescription}

This tool function recovers the label of the currently selected item
in the menu.  If the menu is empty, it returns {\tt F}.  If no menu item
has been selected by the user, it returns the first item. 

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels);
- m.selectindex(2);
- m.getlabel();
mm
\end{verbatim}

\end{ahexample}
\end{ahfunction}




\begin{ahfunction}{getlabels}{Gets all of the labels associated with the menu}
\ahreturns{Vector of String}

\begin{ahdescription}

This tool function recovers the labels associated with each item in 
the menu.  If the menu is empty, it returns an empty array.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels);
- m.getlabels();
m mm cm ...

\end{verbatim}

\end{ahexample}
Note the ellipsis shows in the list.
\end{ahfunction}




\begin{ahfunction}{findlabel}{Find the index of the item with the given label}
\begin{ahargs}  
  \ahaddarg{label}{The menu item label}{}{Same type as the array ``labels'' used in construction}
\end{ahargs}
\ahreturns{Integer or F}
 
\begin{ahdescription}
 
This tool function find the index in the menu of the item specified by
its label.  If you give an invalid label, {\tt F} is returned. 
 
\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels);
- m.findlabel('cm');
3
\end{verbatim}
 
\end{ahexample}
\end{ahfunction}





\begin{ahfunction}{geteventmask}{Get the event mask}
\ahreturns{Vector of Bool}

\begin{ahdescription}

This tool function recovers the event mask.  This mask indicates
whether the {\tt select} event will be emitted or not when you select a
menu item.  By default the mask is all T.  You can modify it with the
\ahlink{seteventmask}{widgets:extendoptionmenu.seteventmask} tool function. 
New items added to the menu get a T value for their mask.  

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels);
- m.geteventmask();
[T T T T]
- m.seteventmask([T,F,F,T]);
- m.geteventmask();
[T F F T]
\end{verbatim}
Note that an element for the ellipsis is recovered
too (element 4).
\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{seteventmask}{Set the event mask}
\begin{ahargs}  
  \ahaddarg{mask}{The event mask}{}{Vector of Bool}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This tool function sets the event mask.  This mask indicates whether
the {\tt select} event will be emitted or not when you select a menu
item.  By default the mask is all T.  You can get the current mask with
the \ahlink{geteventmask}{widgets:extendoptionmenu.geteventmask} tool
function.  If the mask is invalid, it returns {\tt F}. 
New items added to the menu get a T value for their mask.   


\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- labels := "m mm cm";
- f := frame();
- m := extendoptionmenu(f, labels);
- m.seteventmask([T,F,T,T]);
- m.geteventmask();
[T F T T]
- whenever m->select do {print $value;};
\end{verbatim}

In this example, when you selected the second item, no
event would be emitted.
Note that an element for the ellipsis is required
too (element 4).

\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{setforeground}{Set the color of the foreground of the extendoptionmenu button}
\begin{ahargs}
  \ahaddarg{color}{The color}{}{Any X color encoded as a String}
\end{ahargs}    
\ahreturns{Bool}

\begin{ahdescription} 

This tool function sets the color of the foreground of the extendoptionmenu
button.

\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{setbackground}{Set the color of the background of the extendoptionmenu button}
\begin{ahargs}
  \ahaddarg{color}{The color}{}{Any X color encoded as a String}
\end{ahargs}    
\ahreturns{Bool}

\begin{ahdescription}

This tool function sets the color of the background of the extendoptionmenu
button.

\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{setwidth}{Set the width of the optionmenu button}
\begin{ahargs}
  \ahaddarg{width}{The width in character units}{}{Integer}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This tool function sets the width of the optionmenu button  in character
units.

\end{ahdescription}
\end{ahfunction}   




\begin{ahfunction}{disabled}{Disable or enable the extendoptionmenu widget}
\begin{ahargs}
  \ahaddarg{disable}{Disable the widget}{T}{T or F}
\end{ahargs}    
\ahreturns{Bool}

\begin{ahdescription}

This tool function disables or enables the extendoptionmenu.  

\end{ahdescription}
\end{ahfunction}


\begin{ahfunction}{done}{Destroy ourselves}
\ahreturns{Bool}
 
\begin{ahdescription}
 
This tool function destroys the widget.
 
\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- f := frame();
- m := extendoptionmenu(f, labels="a b c");
- m.done();
T
- m
F
-
\end{verbatim}
 
\end{ahexample}
\end{ahfunction}




\end{ahobject}
