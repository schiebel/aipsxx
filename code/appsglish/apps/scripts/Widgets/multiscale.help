%% Copyright (C) 1999,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: multiscale.help,v 19.2 2004/08/25 02:17:04 cvsmgr Exp $
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{multiscale}{Glish/Tk widget to specify multiple values in a single domain}

\ahinclude{multiscale.g}

\ahcategory{widgets}

   %
   %ahkeyword registers module keywords
   %

\ahkeyword{widgets}{}
\ahkeyword{Tk}{}

\ahmethods{}

\begin{ahdescription}

{\bf Note: the following information describes what the multiscale
widget {\em should} do.  At present, only one scale is supported.}

This Glish/Tk widget provides one or more basic Glish/Tk scale widgets
having identical value ranges, but different values.  Its intelligence
lies in its ability to ensure that values remain ordered.  That is, it 
can be used for the selection of minimum and maximum values of data,
and ensures that the minimum is always less than or equal to the
maximum.

Whenever the user modifies any one of the scales in the multiscale
widget, an event "values" is emitted from the multiscale, whose value
is a vector of floats being the position of each slider.

If you chooser to show an entry box as well ({\tt entry=T}) as the slider,
then they are connected.  The values selected with the slider
show in the entry box.  When you enter a value in the 
entry box, after you press carriage return, the slider will
update its value.

You can also interactively extend the range of the slider ({\tt
extend=T} and {\tt entry=T}).  In this case, a check box is offered.  If
checked, then any value you enter in the entry box which is outside of
the current slider range, will extend the slider range.

\end{ahdescription}




\end{ahexample}


\begin{ahconstructor}{multiscale}{Construct a multiscale}
\begin{ahargs}
  \ahaddarg{parent}{Parent of the label}{}{Tk frame}
  \ahaddarg{start}{Lower limit of range}{0.0}{float}
  \ahaddarg{end}{Upper limit of range}{100.0}{float}
  \ahaddarg{values}{initial values}{[0.0, 100.0]}{vector of floats}
  \ahaddarg{names}{text labels for each scale}{['Minimum', 'Maximum']}
	{vector of strings}
  \ahaddarg{helps}{popup help text for each label}{""}{vector of strings}
  \ahaddarg{constrain}{whether to enforce ordering of numbers}{T}{T F}
  \ahaddarg{entry}{provide an entry box as well}{F}{T F}
  \ahaddarg{extend}{extend the scale if entered value beyond current extrema}{F}{T F}
  \ahaddarg{length}{length of the scale widgets}{110}{dimension}
  \ahaddarg{resolution}{step value along scales}{1.0}{float}
  \ahaddarg{orient}{orientation of scale}{'horizontal'}{'horizontal'
	'vertical'}
  \ahaddarg{width}{transverse width of the scales}{15}{dimension}
  \ahaddarg{font}{text font}{''}{X font}
  \ahaddarg{relief}{border relief}{'flat'}{`flat' `ridge', 
                                           `raised' `sunken' `groove'}
  \ahaddarg{borderwidth}{border width}{2}{dimension}
  \ahaddarg{foreground}{color of text}{`black'}{X color}
  \ahaddarg{background}{background color}{`lightgrey'}{X color}
  \ahaddarg{fill}{how to expand when resized}{'none'}{'x' 'y' 'both' 'none}
  \ahaddarg{widgetset}{widgetserver to use to make label}{dws}{widgetserver toolXS}
\end{ahargs}
\ahreturns{multiscale widget}
\begin{ahdescription}
Constructs a multiscale according to the specified construction arguments,
and returns a ref to the widget.
\end{ahdescription}



\begin{ahexample}
\begin{verbatim}
include 'multiscale.g'   
f := frame();
ms := multiscale(f, start=20.0, end=55.0, resolution=0.2);
\end{verbatim}
\end{ahexample}
\end{ahconstructor}


\begin{ahfunction}{disable}{Disable widget}
\ahreturns{T}
\begin{ahdescription}
This function disables the widget.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
f := frame();
ms := multiscale(f);
ms.disable();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{enable}{Enable widget}
\ahreturns{T}
\begin{ahdescription}
This function enables the widget.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
f := frame();
ms := multiscale(f);
ms.disable();
ms.enable();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

 

\begin{ahfunction}{getvalues}{Retrieve the current scale value/s}
\ahreturns{vector of floats}
\begin{ahdescription}
This function is used to retrieve the value of each of the scales.
A vector of floats is returned.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
- ms := multiscale(spareframe);
- print ms.getvalues();
[0 100]
\end{verbatim}
\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{setrange}{Change the lower and upper limits of the
scales}
\begin{ahargs}
  \ahaddarg{start}{lower limit for scale/s}{Current value}{float}
  \ahaddarg{end}{upper limit for scale/s}{Current value}{float}
\end{ahargs}
\ahreturns{none}
\begin{ahdescription}
This function can be used to change the range of the scale/s after
construction of the widget.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
ms := multiscale(spareframe);
ms.setrange(-30.0, 30.0);
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{setresolution}{Set the step value for the scales}
\begin{ahargs}
  \ahaddarg{resolution}{step size for scales}{1.0}{float}
\end{ahargs}
\ahreturns{none}
\begin{ahdescription}
This function should be used to modify the step size on the scale/s
after construction of the widget.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
ms := multiscale(spareframe);
ms.setresolution(0.01);
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{setvalues}{Set the scale value/s}
\begin{ahargs}
  \ahaddarg{values}{values for the scales}{}{vector of floats}
\end{ahargs}
\ahreturns{none}
\begin{ahdescription}
This function should be used to change the values shown on the scale/s
after construction of the widget.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
ms := multiscale(spareframe, names="bass mid treble", 
                 values=[50, 50, 50], constrain=F,
                 orient='vertical', labelside='top');
ms.setvalues([10, 40, 60]);
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{dismiss}{Disable and dismiss the multiscale}
\ahreturns{None}
\begin{ahdescription}
This provides a tidy way to remove a multiscale once it is finished with.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
f := frame();
ms := multiscale(f);
# ... things happen here ...
ms.dismiss();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

