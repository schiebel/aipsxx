%% Copyright (C) 1999,2000
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: rollup.help,v 19.2 2004/08/25 02:19:09 cvsmgr Exp $
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{rollup}{Tk widget to hide and expose an embedded frame on demand}

\ahinclude{rollup.g}

\ahcategory{widgets}

   %
   %ahkeyword registers module keywords
   %

\ahkeyword{widgets}{}
\ahkeyword{Tk}{}

\ahmethods{}

\begin{ahdescription}

This Tk widget will manage the hiding and exposure of an embedded
frame.  The idea is that you create a rollup, and then place GUI items 
(eg.\ frames, buttons, listboxes) inside the frame that the rollup
provides.  The widget builds itself with a titlebar, which the user
can press to switch the view between hidden and exposed.  Functions
exist to control the visibility of the rollup from the command line.

The rollup widget can be treated like many of the built in Tk widgets,
except that a frame is not returned: the programmer must explicitly
extract the embedded frame with the "frame" function.  Many of the
construction arguments are identical to those of the built in Tk
widgets.

\end{ahdescription}




\end{ahexample}


\begin{ahconstructor}{rollup}{Construct a rollup}
\begin{ahargs}
  \ahaddarg{parent}{Parent of the menu}{}{Tk frame}
  \ahaddarg{font}{Font of text }{''}{X font}
  \ahaddarg{relief}{Edge relief}{'flat'}{String from `flat', `ridge', 
                                           `raised', `sunken', `groove'}
  \ahaddarg{borderwidth}{Border width}{2}{Integer}
  \ahaddarg{side}{Direction for child placement}{'top'}{String from
	'top', 'left', 'right', 'bottom'}
  \ahaddarg{padx}{Horizontal padding around text}{0}{Integer}
  \ahaddarg{pady}{Vertical padding around text}{0}{Integer}
  \ahaddarg{expand}{How to expand when resized}{'both'}{String from `x', `y', `both', `none'}
  \ahaddarg{foreground}{Color of text}{`black'}{X color}
  \ahaddarg{background}{Background color}{`lightgrey'}{X color}
  \ahaddarg{title}{String displayed at top of widget}{''}{String}
  \ahaddarg{titleforeground}{Color of title text}{`black'}{X color}
  \ahaddarg{titlebackground}{Background title color}{`lightgrey'}{X color}
  \ahaddarg{show}{Whether to expose frame immediately}{T}{Boolean}
  \ahaddarg{widgetset}{Widget set to use}{dws}{A widgetserver closure tool}
\end{ahargs}
\ahreturns{rollup widget}
\begin{ahdescription}
Constructs a rollup according to the specified construction arguments,
and returns a ref to the widget.
\end{ahdescription}



\begin{ahexample}
\begin{verbatim}
include 'rollup.g'   
f := frame();
r := rollup(f, title='My rollup');
\end{verbatim}
\end{ahexample}
\end{ahconstructor}
 

\begin{ahfunction}{frame}{Return the embedded frame for use}
\ahreturns{Tk frame}
\begin{ahdescription}
This simply returns the frame that will be exposed and hidden by the
rollup widget.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
f := frame();
r := rollup(f, title='My rollup');
embedded := r.frame();
b := button(embedded, 'A button');
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{switch}{Flip the visible state of the rollup}
\ahreturns{Bool}
\begin{ahdescription}
A call to this function flips the state of the rollup to hidden if it
was previously exposed, and vice versa.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
r := rollup(f, title='My rollup');
r.switch();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{down}{Show the rollup contents}
\ahreturns{Bool}
\begin{ahdescription}
A call to this function makes the rollup expose the embedded frame.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
r := rollup(f, title='My rollup', show=F);
# ...
r.down();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{up}{Hide the rollup contents}
\ahreturns{Bool}
\begin{ahdescription}
A call to this function makes the rollup hide the embedded frame.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
r := rollup(f, title='My rollup', show=T);
# ...
r.up();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{disable}{Disable the rollup}
\ahreturns{Bool}
\begin{ahdescription}
A call to this function disables the rollup.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
r := rollup(f, title='My rollup', show=T);
# ...
r.disable();
\end{verbatim}
\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{enable}{Enable the rollup}
\ahreturns{Bool}
\begin{ahdescription}
A call to this function enables the rollup.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
r := rollup(f, title='My rollup', show=T);
# ...
r.enable();
\end{verbatim}
\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{hidden}{Is the rollup hidden ?}
\ahreturns{Bool}
 
\begin{ahdescription}
 
This tool function returns T if the rollup
is hidden (rolled up) and F if it is exposed
(rolled down).
 
\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- r := rollup(f, title='My rollup', show=T);
- r.up()
- r.hidden();
T
- r.down()
- r.hidden();
F
\end{verbatim}
 
 \end{ahexample}
\end{ahfunction}


\begin{ahfunction}{done}{Destroy ourselves}
\ahreturns{Bool}
 
\begin{ahdescription}
 
This tool function destroys the widget.
 
\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- r := rollup(f, title='My rollup', show=T);
- r.done();
T
- r
F
-
\end{verbatim}
 
\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{setpopuphelp}{Set new popuphelp}

\begin{ahargs}
\ahaddarg{short}{Short help}{}{String}
\ahaddarg{long}{Long help}{Unset}{String}
\ahaddarg{width}{Width of short help}{60}{Integer}
\end{ahargs}

\ahreturns{T or fail}
 
\begin{ahdescription}
 
This tool function allows you to set the popuphelp that is attached to
the rollup.  By default, when the rollup is contructed, you get a basic
popuphelp.  This enables you to write something more informative to the
user if appropriate.  As with standard
\ahlink{popuphelp}{guiutils:popuphelp}, you can specify a short
(required) and long (optional) help (i.e.  when you click the right
button the long help is shown in addition to the short).  Likewise the
standard \ahlink{popuphelp}{guiutils:popuphelp} short-help {\stfaf
width} argument is also provided. 
 
\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- r := rollup(f, title='My rollup', show=T);
- r.setpopuphelp('This is my rollup', 'You should know what it does')
\end{verbatim}
 
\end{ahexample}
\end{ahfunction}

 
\end{ahobject}
