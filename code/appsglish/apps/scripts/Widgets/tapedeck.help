%% Copyright (C) 1999
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: tapedeck.help,v 19.2 2004/08/25 02:21:02 cvsmgr Exp $
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{tapedeck}{Glish/Tk widget providing tapedeck-like control buttons}

\ahinclude{tapedeck.g}

\ahcategory{widgets}

   %
   %ahkeyword registers module keywords
   %

\ahkeyword{widgets}{}
\ahkeyword{Tk}{}

\ahmethods{}

\begin{ahdescription}

This Glish/Tk widget is simply a collection of upto seven buttons 
which can be used wherever operations like "play", "rewind" and 
"stop" are required.  The constructor offers flexibility in 
which buttons are made available, and what colors they will be.
An event is emitted whenever a button is pressed, and is one of:
{\tt tostart, reversestep, reverseplay, stop, forwardplay, 
forwardstep, toend}.

\end{ahdescription}




\end{ahexample}


\begin{ahconstructor}{tapedeck}{Construct a tapedeck}
\begin{ahargs}
  \ahaddarg{parent}{Parent of the menu}{}{Tk frame}
  \ahaddarg{background}{Background color}{`lightgrey'}{X color}
  \ahaddarg{hasstop}{Whether to provide 'stop' button}{T}{Boolean}
  \ahaddarg{hasplay}{Whether to provide 'play' button/s}{T}{Boolean}
  \ahaddarg{hasstep}{Whether to provide 'step' button/s}{T}{Boolean}
  \ahaddarg{hasto}{Whether to provide 'to' button/s (ie. to end, to start)}{T}{Boolean}
  \ahaddarg{hasforward}{Whether to provide forward-direction buttons}{T}{Boolean}
  \ahaddarg{hasreverse}{Whether to provide reverse-direction buttons}{T}{Boolean}
  \ahaddarg{stopcolor}{Color of the 'stop' button}{'black'}{X color}
  \ahaddarg{playcolor}{Color of the 'play' button/s}{'black'}{X color}
  \ahaddarg{stepcolor}{Color of the 'step' button/s}{'black'}{X color}
  \ahaddarg{tocolor}{Color of the 'to' (cue) button/s}{'black'}{X color}
  \ahaddarg{orient}{Orientation of the tapedeck}{'horizontal'}{'horizontal' 'vertical'}
  \ahaddarg{widgetset}{Widget set to use}{dws}{A widgetserver closure tool}
\end{ahargs}
\ahreturns{tapedeck widget}
\begin{ahdescription}
Constructs a tapedeck according to the specified construction arguments,
and returns a ref to the widget.
\end{ahdescription}



\begin{ahexample}
\begin{verbatim}
include 'tapedeck.g'   
f := frame();
td := tapedeck(f, background='black', hasto=F);
\end{verbatim}
\end{ahexample}
\end{ahconstructor}
 

\begin{ahfunction}{dismiss}{Disable and dismiss the tapedeck}
\ahreturns{None}
\begin{ahdescription}
This provides a tidy way to remove a tapedeck once it is finished with. 
This is now deprecated - use 'done' instead.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
f := frame();
td := tapedeck(f);
# ... fill in whenevers ...
await td->stop;
td.dismiss();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{done}{Disable and dismiss the tapedeck}
\ahreturns{None}
\begin{ahdescription}
This provides a tidy way to remove a tapedeck once it is finished with.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
f := frame();
td := tapedeck(f);
# ... fill in whenevers ...
await td->stop;
td.done();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{enable}{Enable the tapedeck controls}
\ahreturns{None}
\begin{ahdescription}
This will enable the tapedeck buttons, provided it is balanced
by an equal number of calls to disable.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
f := frame();
td := tapedeck(f);
td.disable();
# ... fill in some whenevers
td.enable();
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{disable}{Disable the tapedeck controls}
\ahreturns{None}
\begin{ahdescription}
This will disable the tapedeck buttons, provided it is balanced
by an equal number of calls to enable.
\end{ahdescription}
\begin{ahexample}
\begin{verbatim}
f := frame();
td := tapedeck(f);
td.disable();
# ... fill in some whenevers
td.enable();
\end{verbatim}
\end{ahexample}
\end{ahfunction}



