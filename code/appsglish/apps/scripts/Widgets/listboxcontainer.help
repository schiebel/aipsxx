%% Copyright (C) 1999,2000,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%%	$Id: listboxcontainer.help,v 19.2 2004/08/25 02:15:55 cvsmgr Exp $	
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{listboxcontainer}{A scrolllistbox with an underlying
itemcontainer.}

\ahinclude{listboxcontainer.g}

\ahcategory{widgets}

   %
   %ahkeyword registers module keywords
   %

\ahkeyword{widgets}{}
\ahkeyword{Tk}{}
\ahkeyword{listbox}{}
\ahkeyword{scrolllistbox}{}

\ahmethods{}

\begin{ahdescription}

The listboxcontainer widget is a {\tt scrolllistbox} widget. It has
some similarity to the interface of the {\tt scrolllistbox} widget.
The difference to the original listbox and scrolllistbox is, that this
widgets is a wrapper for an itemcontainer. Everything inserted into
the widget is stored in an itemcontainer as a name-value pair (an item). The
name is displayed  in the widget. Items can be accessed by name or by
index. One has to be careful if using indices, because the
listboxcontainer is adjusting itself (eg. deleting an item pushes all
other items up by 1).
Another difference to the standard {\tt listbox} and {\tt
scrolllistbox} is the indexing. Indices are integers not strings!
Indexing starts at ``0'' as opposed to the {\tt itemcontainer}, where
indexing starts the ``Glish'' way at ``1''.

The listboxcontainer widget supports all scrolllistbox widget events.
For the events ``background bind borderwidth exportselection font
height hscrollbar mode relief seeoninsert view vscrollbar vscrollview
width'' see the documentation on {\tt scrolllistbox} and {\tt listbox}.

All events which are emitted by the underlying {\tt listbox} are forwarded
and will be seen to be emitted by the listboxcontainer.

Note that most of the functions listed here are actually events.

\end{ahdescription}


\begin{ahexample}
\begin{verbatim}
include 'listboxcontainer.g'   
f := frame()
lbc := listboxcontainer(f)
lbc->insert('x',1)
lbc->insert('y',2)
# you want to add a record
r := [a=111,b=222,c=333]
lbc->insert(r)
# you want to get the current selection(s), if any
s := lbc->selection();
#you want to delete 'x' and 'y' by name
lbc->delete('x','y')
#or by index
lbc->delete(0:1)
# to retrieve the value bound to name 'a'
a := l->get('a')

\end{verbatim}
\end{ahexample}


\begin{ahconstructor}{listboxcontainer}{Construct a listboxcontainer}
\begin{ahargs}
  \ahaddarg{parent}{Parent of the listboxcontainer}{}{Tk frame}
  \ahaddarg{container}{Create from an itemcontainer}{unset}{itemcontainer}
  \ahaddarg{hscrollbar}{Show a horizontal scrollbar?}{T}{Boolean}
  \ahaddarg{vscrollbar}{Show a vertical scrollbar?}{T}{Boolean}
  \ahaddarg{vscrollbarright}{Show vertical scrollbar on right? (F=left)}{T}{Boolean}
  \ahaddarg{seeoninsert}{See the end after each insert?}{T}{Boolean}
  \ahaddarg{width}{Width in characters units}{20}{Integer}
  \ahaddarg{height}{Height in characters units}{6}{Integer}
  \ahaddarg{mode}{Listbox mode}{`browse'}{String from `browse', `single',
						`extended', `multiple'}
  \ahaddarg{font}{Font of text }{`'}{X font}
  \ahaddarg{relief}{Edge relief}{`sunken'}{String from `flat', `ridge', 
                                           `raised', `sunken', `groove'}
  \ahaddarg{borderwidth}{Border width}{2}{Integer}
  \ahaddarg{foreground}{Color of text}{`black'}{X color}
  \ahaddarg{background}{Background color}{`lightgrey'}{X color}
  \ahaddarg{exportselection}{export to X clipboard?}{F}{Boolean}
  \ahaddarg{fill}{how to expand when resized}{`both'}{String from `x', `y',
							`both', `none'}
  \ahaddarg{widgetset}{Widget set to use}{dws}{A widgetserver closure tool}
\end{ahargs}
\ahreturns{listboxcontainer widget}
\begin{ahdescription}
Constructs a listboxcontainer according to the specified construction arguments,
and returns a ref to the widget.
\end{ahdescription}
\end{ahconstructor}

% \begin{ahfunction}{listbox}{Return the underlying listbox agent}
% \ahreturns{Tk listbox agent}

% \begin{ahdescription}

% This function returns the underlying listbox agent.  Be careful
% when using this as it is possible to delete the underlying 
% listbox.  Also, insertions made directly to the listbox will not
% trigger the automatic "see" of the end of the listbox which
% would normally occur when seeoninsert is set to T.
% \end{ahdescription}

%\end{ahexample}
%\end{ahfunction}

\begin{ahfunction}{done}{Destroy ourselves}
\ahreturns{Bool}

\begin{ahdescription}

This function destroys the widget.

\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{hscrollbar}{(EVENT) Turn on or off the horizontal scrollbar}
\begin{ahargs}
  \ahaddarg{torf}{Show a horizontal scrollbar?}{}{Boolean} 
\end{ahargs}

\begin{ahdescription}
This is an event which turns on or off the horizontal scrollbar.

\begin{ahexample}
\begin{verbatim}
# lbc is a previously created listboxcontainer
# turn off the horizontal scrollbar
lbc->hscrollbar(F);
# turn it back on
lbc->hscrollbar(T);
\end{verbatim}
\end{ahexample}
\end{ahdescription}

\end{ahfunction}

\begin{ahfunction}{vscrollbar}{(EVENT) Turn on or off the vertical scrollbar}
\begin{ahargs}
  \ahaddarg{torf}{Show a vertical scrollbar?}{}{Boolean} 
\end{ahargs}

\begin{ahdescription}
This is an event which turns on or off the vertical scrollbar.
If turned on, the constructor argument 'vscrollbarright' determines if
the scrollbar is placed on the left or right side of the listbox.
\end{ahdescription}

\end{ahfunction}

\begin{ahfunction}{seeoninsert}{(EVENT) See the end after each insert?}
\begin{ahargs}
  \ahaddarg{torf}{See the end after each insert?}{}{Boolean} 
\end{ahargs}

\begin{ahdescription}

This event turns on or off the action which this widget
does after each insert event.  When on (T) a "see" event is sent
to the listbox to show the end of the listbox after each inset event.
When off (T) no such "see" event is sent.

\begin{ahexample}
\begin{verbatim}
# slb is a previously created listboxcontainer
# don't see the end after each insert event
lbc->seeoninsert(F);
# see the after each insert event
lbc->seeoninsertT);
\end{verbatim}
\end{ahexample}
\end{ahdescription}

\end{ahfunction}

% ---- fromforeign
\begin{ahfunction}{fromforeign}{insert items from container or record}
\begin{ahargs}
  \ahaddarg{container}{Itemcontainer or record to put into listboxcontainer}{}{itemcontainer or record} 
\end{ahargs}

\begin{ahdescription}
Insert an itemcontainer or record into an (empty)
listboxcontainer. This function overwrites existing contents.
\end{ahdescription}
\end{ahfunction}

% ---- hasitem
\begin{ahfunction}{hasitem}{check if item is present in listboxcontainer}
\begin{ahargs}
  \ahaddarg{item}{Item to be checked if present}{}{string} 
\end{ahargs}
\ahreturns{A Boolean}

\begin{ahdescription}
Equivalent to has\_item in {\tt itemcontainer}.
\end{ahdescription}

\end{ahfunction}

% ---- itemnames
\begin{ahfunction}{itemnames}{Get the names of all items.}
\ahreturns{A vector of strings}

\begin{ahdescription}
Equivalent to item\_names in {\tt itemcontainer}.
\end{ahdescription}

\end{ahfunction}

% ---- clear
\begin{ahfunction}{clear}{(EVENT) clear selections}
\begin{ahargs}
  \ahaddarg{namesorindices}{names or indices or ``all''}{}{vector of strings or integers}
\end{ahargs}

\begin{ahdescription}
This {\bf event} clears the given selections. This can be
done by name or index. Vectors are accepted. ``all'' deselects all selections.
\end{ahdescription}
\end{ahfunction}

% ---- delete
\begin{ahfunction}{delete}{(EVENT) delete a name-value pair}
\begin{ahargs}
  \ahaddarg{namesorindices}{names or indices}{}{vector of strings or integers} 
\end{ahargs}

\begin{ahdescription}
This {\bf event} deletes the given items from the listbox. This can be
done by name or index. Vectors are accepted.
{\bf Note:} The functionality varies from {\tt listbox}!
\begin{ahexample}
\begin{verbatim}
# by name
lbc->delete('test');
# or by index if test is the first(=0) item in the listboxcontainer.
lbc->delete(0)
\end{verbatim}
\end{ahexample}
\end{ahdescription}
\end{ahfunction}  

% ---- get
\begin{ahfunction}{get}{(EVENT) return the value of the item specified}
\begin{ahargs}
  \ahaddarg{nameorindex}{name or index}{}{string or integer}
\end{ahargs}

\ahreturns{any}

\begin{ahdescription}
The items selected in the {\tt listbox} are returned as a record.
\end{ahdescription}
\end{ahfunction}

% ---- insert
\begin{ahfunction}{insert}{(EVENT) Insert a name-value pair or record
elements, or overwrite values of existing pairs}
\begin{ahargs}
  \ahaddarg{stringorrecord}{}{}{string or record}
  \ahaddarg{}{only if first argument is string}{}{any}  
\end{ahargs}

\begin{ahdescription}
This {\bf event} inserts a new item into the listboxcontainer or replaces
the value of an existing one.
{\bf Note:} The functionality varies from {\tt listbox}!
\begin{ahexample}
\begin{verbatim}
# insert
- lbc->insert('test',55)
- lbc->insert('dummy',[xyz='hello'])
- print l->get('dummy');
[xyz=hello]
# overwrite
- lbc->insert('dummy',1000);
- print l->get('dummy');
1000
\end{verbatim}
\end{ahexample}
\end{ahdescription}
\end{ahfunction}

% ---- see
\begin{ahfunction}{see}{(EVENT) scroll to the specified item}
\begin{ahargs}
  \ahaddarg{nameorindex}{name or index}{}{string or integer}
\end{ahargs}

\begin{ahdescription}
See {\tt see} in scrolllistbox.
\end{ahdescription}
\end{ahfunction}

% ---- select
\begin{ahfunction}{select}{(EVENT) make selection}
\begin{ahargs}
  \ahaddarg{namesorindices}{names or indices}{}{vector of strings or integers}
\end{ahargs}

\begin{ahdescription}
This {\bf event} selects the given items. This can be
done by name or index. Vectors are accepted.
\end{ahdescription}
\end{ahfunction}


% ---- selection
\begin{ahfunction}{selection}{(EVENT) return a record of items selected}
\ahreturns{record}

\begin{ahdescription}
The items selected in the {\tt listbox} are returned as a record.
\end{ahdescription}
\end{ahfunction}

\end{ahobject}
