%% Copyright (C) 1999,2000,2002
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: 
\begin{ahobject}{twodactionoptionmenu}{Pop-up, 'two-dimensional' menu}

\ahinclude{twodactionoptionmenu.g}
\ahcategory{widgets}

\ahkeyword{widgets}{}
\begin{ahdescription}

This \tool\ is designed for use when a large number of menu items are
required. It allows menu options (either icons or text) to be
positioned in columns and rows. These menu options appear when a user
clicks the button, which is represented by the default choice. The
widget is similar to the
\ahlink{actionoptionmenu}{widgets:actionoptionmenu} widget, however it allows
for columns of options, as opposed to a one dimensional list. It was
designed for use with bitmaps in mind, however text buttons will also
work, although they are not currently ``justified''. Currently, this 
widget is a little 'light on' for functionality - e.g. functions such
as 'setvalue' etc (as opposed to the current method of setting by index)
would be nice. 

\end{ahdescription}


\begin{ahconstructor}{twodactionoptionmenu}{Construct an optionmenu}
\begin{ahargs}
  \ahaddarg{parent}{Parent of the menu}{}{Widget}
  \ahaddarg{images}{Filenames of bitmaps to use}{Empty menu}{Vector of strings}
  \ahaddarg{names}{The menu item names}{Empty menu}{Vector of strings}
  \ahaddarg{values}{The menu item values}{Empty menu}{Vector of anything}
  \ahaddarg{ncolumn}{Number of columns of buttons}{3}{Integer}
  \ahaddarg{hlp}{Short popuphelp text}{No help}{String}
  \ahaddarg{hlp2}{Long popuphelp text}{No help}{String}
  \ahaddarg{padx}{Horizontal padding around text}{2}{Integer}
  \ahaddarg{pady}{Vertical padding around text}{2}{Integer}
  \ahaddarg{borderwidth}{Border width}{2}{Integer}
  \ahaddarg{widgetset}{The widget server to use}{dws}{widgetserver tool}
\end{ahargs}
\ahreturns{Agent}

\begin{ahdescription}
This is the constructor. The menu either uses icons ({\stfaf images}),
or text labels ({\stfaf names}). The array provided with the most elements is
used. The number of elements in the array used must equal the number
of elements in {\stfaf labels}. The menu is built by construction the
specified number of columns * required rows in order to fit all menu
options on the pop up frame.
\end{ahdescription}

\begin{ahexample}
\begin{verbatim}
- include 'twodactionoptionmenu.g'   
- names := ['Absolute', 'Relative to ref. pixel', 'Relative to center'];
- values := [1,2,3];
- f := frame();
- hlp := 'Select type of coordinate';
- m := twodactionoptionmenu(parent = f, names = names, 
			values = values, ncolumn = 2, hlp = hlp);
\end{verbatim}
Creates a two dimensional option menu with 2 columns and required rows
(in this case 2). If bitmaps were required instead:

\begin{verbatim}
- include 'twodactionoptionmenu.g'   
- images := ['abs.xbm', 'rel.xbm', 'relcent.xbm'];
- values := [1,2,3];
- f := frame();
- hlp := 'Select type of coordinate';
- m := twodactionoptionmenu(parent = f, names = names, 
			values = values, ncolumn = 2, hlp = hlp);
\end{verbatim}

\end{ahexample}

\end{ahconstructor}
 

\begin{ahfunction}{currentvalue}{Return the currently selected value}
\begin{ahargs}  
\end{ahargs}
\ahreturns{Whatever is supplied in the value array on construction}

\begin{ahdescription}

This function returns the {\stfaf value} of the currently selected option. 

\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{newselection}{Select a new option based on index}
\begin{ahargs}  
  \ahaddarg{index}{The index of the new option}{}{Integer}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This sets the current selection to that specified. You must use the
index, and not the value or names field to select a new option.

\end{ahdescription}
 \end{ahfunction}

\end{ahobject}
