%% Copyright (C) 1999,2000,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: tabdialog.help,v 19.2 2004/08/25 02:20:47 cvsmgr Exp $
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{tabdialog}{Tk widget where the menu label changes with selection}

\ahinclude{tabdialog.g}

\ahcategory{widgets}


\ahkeyword{widgets}{}
\ahkeyword{Tk}{}

\ahmethods{}

\begin{ahdescription}

Glish/Tk does not yet come with a Tab widget.  When we are bound to
a richer widget set such as Tix, such a widget will be available.

In the mean time, this widget simulates a Tab widget with a button bar.

The widget provides you a frame into which you place your Tabs.  For
each Tab there is a button; pushing it maps the Tab to the foreground
and the previous one to the background. The active tab is denoted by
a sunken relief for the button. Otherwise, buttons are shown with
raised relief.

\end{ahdescription}



\begin{ahconstructor}{tabdialog}{Construct an tabdialog}
\begin{ahargs}
  \ahaddarg{parent}{Parent of the tabdialog}{}{Agent}
  \ahaddarg{colmax}{Maximum number of Tab buttons per row}{5}{Integer}
  \ahaddarg{title}{Title place above button row}{'Select'}{String}
  \ahaddarg{hlthickness}{Thickness of tab border}{5}{Integer}
  \ahaddarg{widgetset}{The widget server to use}{dws}{widgetserver tool}
\end{ahargs}
\ahreturns{Agent}

\begin{ahdescription}

This is the constructor.  If you assign {\stfaf title=unset}
then no title will appear.   As many rows of buttons as needed
will be created as you add TABs.

\end{ahdescription}



\begin{ahexample}
\begin{verbatim}
include 'tabdialog.g'   
f := dws.frame();
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1', 'Press for tab1')
t.add(frames['2'], 'TAB2', 'Press for yet another tab')
\end{verbatim}
This will make one row of buttons with two Tabs.
\end{ahexample}

\end{ahconstructor}
 

\begin{ahfunction}{add}{Add a new Tab}
\begin{ahargs}  
  \ahaddarg{tab}{The Tab}{}{Agent}
  \ahaddarg{tabname}{Name of the tab for the tab button}{}{String}
  \ahaddarg{hlp}{Popup help text for tab button}{}{String}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This function adds the specified Tab and adds a button with the given name.
Note that adding a Tab does not make it the visible one unless it's
the first Tab.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
\end{verbatim}
This will make one row of buttons with two Tabs. The first
Tab will be the visible one.
\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{available}{Is this Tab available}
\begin{ahargs}  
  \ahaddarg{tabname}{Name of the tab for the tab button}{}{String}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This function indicates whether the specified Tab name
has been added or not.


\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
#
t.available('TAB1')
T
t.available('TAB10')
F

\end{verbatim}
\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{delete}{Delete an existing Tab}
\begin{ahargs}  
  \ahaddarg{tabname}{Name of the tab for the tab button}{}{String}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This function deletes the specified Tab. Subsequent additions will
first fill this empty location.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
t.delete('TAB1')
\end{verbatim}
This will make one row of buttons with two Tabs. The first
Tab will be the visible one. The first tab is then deleted.
\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{deleteall}{Delete all of the Tabs}
\ahreturns{Bool}

\begin{ahdescription}

This function deletes all of the Tabs.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();   
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
#
t.deleteall()
\end{verbatim}

\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{dialogframe}{Get the internal dialog frame}
\ahreturns{Agent}

\begin{ahdescription}

This function recovers the internal Tab dialog frame into which you should
place your Tabs.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();   
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
\end{verbatim}
\end{ahexample}
\end{ahfunction}




\begin{ahfunction}{done}{Destroy ourselves}
\ahreturns{Bool}
 
\begin{ahdescription}
 
This function destroys the widget.
 
\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- include 'tabdialog.g'
- f := dws.frame();
- t := tabdialog(f)
- t.done()
\end{verbatim}
 
\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{front}{Bring this Tab to the front}
\begin{ahargs}  
  \ahaddarg{tabname}{Name of the tab}{}{String}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This function brings the specified Tab to the front.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();   
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
#
t.front('TAB2')
\end{verbatim}
\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{list}{List Tabs}
\ahreturns{Vector of strings}

\begin{ahdescription}

This function returns the list of Tabs.

\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();   
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
#
t.list()
TAB1 TAB2
\end{verbatim}
\end{ahexample}
\end{ahfunction}



\begin{ahfunction}{replace}{Replace a new Tab}
\begin{ahargs}  
  \ahaddarg{tab}{The Tab}{}{Agent}
  \ahaddarg{tabname}{Name of the tab for the tab button}{}{String}
\end{ahargs}
\ahreturns{Bool}

\begin{ahdescription}

This function replaces the specified pre-existing Tab.  


\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();   
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
#
frames['3'] := dws.frame(df)
frames['3']->unmap()
frames['3'].b := dws.button(frames['3'], 'b3')
#
t.replace(frames['3'], 'TAB2')
\end{verbatim}
\end{ahexample}
\end{ahfunction}




\begin{ahfunction}{which}{Which Tab is visible}
\ahreturns{Record}

\begin{ahdescription}

This function returns a record containing the name of the Tab which
is currently visible and its index (1 relative).


\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
f := dws.frame();   
t := tabdialog(f)
df := t.dialogframe()
#
frames := [=]
frames['1'] := dws.frame(df)
frames['1']->unmap()
frames['1'].b := dws.button(frames['1'], 'b1')
frames['2'] := dws.frame(df)
frames['2']->unmap()
frames['2'].b := dws.button(frames['2'], 'b2')
#
t.add(frames['1'], 'TAB1')
t.add(frames['2'], 'TAB2')
#
t.front('TAB2')
t.which()
[name=TAB2, index=2]

\end{verbatim}
\end{ahexample}
\end{ahfunction}



\end{ahobject}



%% Global functions

\begin{ahfunction}{tabdialogtest}{Test tabdialog widget}
\ahreturns{Agent}

\begin{ahdescription}

This function tests the tabdialog widget.  It makes  a GUI
with some buttons you can press.


\end{ahdescription}
 
\begin{ahexample}
\begin{verbatim}
- include 'tabdialog.g'   
- tt := tabdialog()
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\end{document}

