
<change id=0010>
 <author> Neil Killeen </author>
 <date> 2000/06/14 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> deleteregions,restoreregions,saveregions </module>
 <type> Code </type>
 <category> Change </category>
 <defects> AOCso01037 </defects>
 <summary>
Integrated with standard guientry.g services
 </summary>
 <description>
I replaced the entry box internals with standard
guientry.g entry services.  These tools are invoked 
by regionmanagergui.g which has also been integrated
 </description>
</change>

<change id=0018>
 <author> Tim Cornwell </author>
 <date> 2000/07/11 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> guientry </module>
 <type> Code </type>
 <category> Change Bugfix </category>
 <defects> 1417 </defects>
 <summary>
Supported new widgetserver, added measurecodes widget
 </summary>
 <description>

The default guientry, dge, no longer exists. Instead guientry is served
by widgetserver, and to make a widget one must do e.g.

	myge := widgetset.guientry()
	s := mge.string();

I've fixed all the cases where dge was being using.

I've also added measurecodes as a new widget. This allows
selection of various reference codes for measures

	myge := widgetset.guientry()
	mc := myge.measurecodes(options='doppler')

Some bugs have also been fixed but since this is very ugly code
some new bugs may be present!
 </description>
</change>

<change id=0019>
 <author> Tim Cornwell </author>
 <date> 2000/07/11 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> tabdialog tabdialogtest </module>
 <type> Code </type>
 <category> Change </category>
 <defects>  </defects>
 <summary>
Added delete capability
 </summary>
 <description>

Tabs can now be deleted and new ones inserted in their place. This
required a substantial change to the internals. A grid of button
locations is created on construction, and then filled in as needed.
This could be streamlined a bit in future but the logic is cleaner
this way.

tabdialog is now used in toolmanager.

I've also changed tabdialogtest to test deletion.
 </description>
</change>

<change id=0022>
 <author> Tim Cornwell </author>
 <date> 2000/07/21 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> guientry </module>
 <type> Code </type>
 <category> Change Bugfix </category>
 <defects> 1397 </defects>
 <summary>
Behavior of untyped widget now more sensible
 </summary>
 <description>

The untyped widget will now take any glish variable and try a
variety of parsers to see what it is. Once a conversion is 
successful that type is returned. The search list of conversions
can be examined and set.
 </description>
</change>

<change id=0031>
 <author> Tim Cornwell </author>
 <date> 2000/08/06 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> gopher </module>
 <type> Code Documentation </type>
 <category> New Change </category>
 <defects>  </defects>
 <summary>
gopher can now get antennas to be used
 </summary>
 <description>

gopher can now use the new graphical chooser widget, gchooser,
to allow the user to specify which antennas are to be used.
To use this e.g.

	include 'gopher.g'
	myantennas := dgo.getantennas('xband.ms')

There is also a subsequence version gopher.antennas for non-blocking
use in a GUI.

The graphical chooser widget allows plotting of labelled items
on a two-dimensional scatter plot. The user can then select
items by clicking. The list of all selected items is then returned.
 </description>
</change>

<change id=0043>
 <author> Tim Cornwell </author>
 <date> 2000/08/27 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> combochooser </module>
 <type> Code </type>
 <category> New </category>
 <defects>  </defects>
 <summary>
combochooser allows choosing of combinations
 </summary>
 <description>

combochooser allows graphical choosing of combinations such as 
baselines. The user selects regions of combination using the
cursor on a plot similar to that in gchooser.

The interface could and probably will be generalized to allow
combinations between A and B instead of between elements of A
only.

Tim
 </description>
</change>

<change id=0047>
 <author> Tim Cornwell </author>
 <date> 2000/09/06 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> guientry </module>
 <type> Code </type>
 <category> Change </category>
 <defects>  </defects>
 <summary>
New list widget to contain other widgets
 </summary>
 <description>

The new list widget can contain one or more elements where each
element can have any number of guientry widgets. elements are added
and deleted by the using via two buttons. Selection of the displayed
element is controlled by a slider. The usual get and insert functions
apply.

This widget is specifically designed for hierarchical inputs like those
used in map.g but will undoubtedly be useful elsewhere. 

Tim
 </description>
</change>
