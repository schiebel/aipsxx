%% Copyright (C) 1999,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: scrolllistbox.help,v 19.2 2004/08/25 02:19:34 cvsmgr Exp $
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{scrolllistbox}{A Tk listbox with optional scrollbars.}

\ahinclude{scrolllistbox.g}

\ahcategory{widgets}

   %
   %ahkeyword registers module keywords
   %

\ahkeyword{widgets}{}
\ahkeyword{Tk}{}
\ahkeyword{listbox}{}

\ahmethods{}

\begin{ahdescription}

The scrolllistbox widget is a listbox with optional associated 
horizontal and vertical scrollbars.  It has very nearly the
same interface as the standard listbox widget.

The scrolllistbox widget supports all listbox widget events.

All events which are emitted by the underlying listbox are forwarded
and will be seen to be emitted by the scrolllistbox.

Direct access to the underlying listbox is provided by the listbox
function.  This is necessary in order to support popup help on
scrolllistboxes.  Popup help uses the tlead argument in constructing
the outframe.  The value of that argument needs to be one of the
underlying widgets hence the need to return a reference to the
listbox used in scrolllistbox.  Care should be taken
in using this as it allows the user to destroy the underlying listbox.

Note that most of the functions listed here are actually events.
These include hscrollbar, scrolllistbox, seeonsert, and vscrollbar.
In addition to these events, any valid listbox event can be sent
to the scrolllistbox.

\end{ahdescription}


\begin{ahexample}
\begin{verbatim}
include 'scrolllistbox.g'   
f := frame()
slb := scrolllistbox(f)
slb->insert("one two three four five six seven eight nine")
# you decide you don't want the horizontal scrollbar
slb->hscrollbar(F)
# you decide you don't want the widget to always show the end
# after each insert event
slb->seeoninsert(F)
# you want to get the current selection(s), if any
s := slb->selection();
\end{verbatim}
\end{ahexample}


\begin{ahconstructor}{scrolllistbox}{Construct a scrolllistbox}
\begin{ahargs}
  \ahaddarg{parent}{Parent of the scrolllistbox}{}{Tk frame}
  \ahaddarg{hscrollbar}{Show a horizontal scrollbar?}{T}{Boolean}
  \ahaddarg{vscrollbar}{Show a vertical scrollbar?}{T}{Boolean}
  \ahaddarg{vscrollbarright}{Show vertical scrollbar on right? (F=left)}{T}{Boolean}
  \ahaddarg{seeoninsert}{See the end after each insert?}{T}{Boolean}
  \ahaddarg{width}{Width in characters units}{20}{Integer}
  \ahaddarg{height}{Height in characters units}{6}{Integer}
  \ahaddarg{mode}{Listbox mode}{`browse'}{String from `browse', `single',
						`extended', `multiple'}
  \ahaddarg{font}{Font of text }{`'}{X font}
  \ahaddarg{relief}{Edge relief}{`sunken'}{String from `flat', `ridge', 
                                           `raised', `sunken', `groove'}
  \ahaddarg{borderwidth}{Border width}{2}{Integer}
  \ahaddarg{foreground}{Color of text}{`black'}{X color}
  \ahaddarg{background}{Background color}{`lightgrey'}{X color}
  \ahaddarg{exportselection}{export to X clipboard?}{F}{Boolean}
  \ahaddarg{fill}{how to expand when resized}{`both'}{String from `x', `y',
							`both', `none'}
  \ahaddarg{widgetset}{Widget set to use}{dws}{A widgetserver closure tool}
\end{ahargs}
\ahreturns{scrolllistbox widget}
\begin{ahdescription}
Constructs a scrolllistbox according to the specified construction arguments,
and returns a ref to the widget.
\end{ahdescription}
\end{ahconstructor}

\begin{ahfunction}{listbox}{Return the underlying listbox agent}
\ahreturns{Tk listbox agent}

\begin{ahdescription}

This function returns the underlying listbox agent.  Be careful
when using this as it is possible to delete the underlying 
listbox.  Also, insertions made directly to the listbox will not
trigger the automatic "see" of the end of the listbox which
would normally occur when seeoninsert is set to T.
\end{ahdescription}

\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{done}{Destroy ourselves}
\ahreturns{Bool}

\begin{ahdescription}

This function destroys the widget.

\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{hscrollbar}{Turn on or off the horizontal scrollbar}
\begin{ahargs}
  \ahaddarg{torf}{Show a horizontal scrollbar?}{}{Boolean} 
\end{ahargs}

\begin{ahdescription}
This is an event which turns on or off the horizontal scrollbar.

\begin{ahexample}
\begin{verbatim}
# slb is a previously created scrolllistbox
# turn off the horizontal scrollbar
slb->hscrollbar(F);
# turn it back on
slb->hscrollbar(T);
\end{verbatim}
\end{ahexample}
\end{ahdescription}

\end{ahfunction}

\begin{ahfunction}{vscrollbar}{Turn on or off the vertical scrollbar}
\begin{ahargs}
  \ahaddarg{torf}{Show a vertical scrollbar?}{}{Boolean} 
\end{ahargs}

\begin{ahdescription}
This is an event which turns on or off the vertical scrollbar.
If turned on, the constructor argument 'vscrollbarright' determines if
the scrollbar is placed on the left or right side of the listbox.
\end{ahdescription}

\end{ahfunction}

\begin{ahfunction}{seeoninsert}{See the end after each insert?}
\begin{ahargs}
  \ahaddarg{torf}{See the end after each insert?}{}{Boolean} 
\end{ahargs}

\begin{ahdescription}

This event turns on or off the action which this widget
does after each insert event.  When on (T) a "see" event is sent
to the listbox to show the end of the listbox after each inset event.
When off (T) no such "see" event is sent.

\begin{ahexample}
\begin{verbatim}
# slb is a previously created scrolllistbox
# don't see the end after each insert event
slb->seeoninsert(F);
# see the after each insert event
slb->seeoninsertT);
\end{verbatim}
\end{ahexample}
\end{ahdescription}

\end{ahfunction}
 
\end{ahobject}


