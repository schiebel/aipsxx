%% Copyright (C) 1999,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: guicomponents.help,v 19.2 2004/08/25 01:59:12 cvsmgr Exp $
%% guicomponents.help
%%----------------------------------------------------------------------------
\documentclass{book}
\usepackage{aips2help,html}
\begin{document}
%%----------------------------------------------------------------------------
%\begin{ahmodule}{guicomponents}{Composite widgets for the graphical user interface}
%%----------------------------------------------------------------------------
Several utility functions are available via the guiutils module.
\ahinclude{guicomponents.g}
%%----------------------------------------------------------------------------
\ahkeyword{gui}{}
%%----------------------------------------------------------------------------
\begin{ahdescription}

%``guicomponents'' are high-level graphical user interface objects,
%each of which is constructed from two or more primitive glishtk
%widgets, often incorporating some event-handling glish code, and
%internal data structures.  They are designed to offer more complex
% GUI functionality than is available in the primitive glishtk widgets.
% Their intended audience is application programmers, who
%can use them to help create GUI applications.
%
%\end{ahdescription}
%%----------------------------------------------------------------------------
%\ahobjs{}
%\ahfuncs{}
%%----------------------------------------------------------------------------
%----------------------------------------------------------------------------
\begin{ahobject}{status\_line} {A one-line text widget for displaying status information.}

\ahinclude{guicomponents.g}

  \begin{ahdescription}
    Many GUI programs will be easier to use if status information is
    displayed at appropriate times for the user to read.  This very simple
    widget provides a convenient and standard way to do this.
  \end{ahdescription}

  \ahfuncs{}

  %----- status_line (parentFrame);
  \begin{ahconstructor}{status\_line}{Construct a status line widget.}
    \begin{ahargs}
       \ahaddarg{parentFrame}{a glishtk frame widget}{}{}
    \end{ahargs}
    \ahreturns{a status\_line tool}
  \end{ahconstructor}


  %----- show (message)
  \begin{ahfunction}{show}{Clear the line, and display this message}
    \begin{ahargs}
       \ahaddarg{message}{a new status message}{}{any string}
    \end{ahargs}
    \ahreturns{T}
    \begin{ahdescription}
      % The widget is cleared before the new text is displayed.
    \end{ahdescription}
  \end{ahfunction}

  %----- clear ()
  \begin{ahfunction}{clear}{Remove all text from the widget.}
    \ahreturns{T}
  \end{ahfunction}

  %----- append (message)
  \begin{ahfunction}{append}{Add text to the end of the current text.}
    \begin{ahargs}
       \ahaddarg{message}{}{}{any string}
    \end{ahargs}
    \ahreturns{T}
    \begin{ahdescription}
      A blank space is prepended to [message], and the result is written to the end of 
      the current text displayed in the widget.
    \end{ahdescription}
  \end{ahfunction}

  %----- delete ()
  \begin{ahfunction}{delete}{Destroy the status\_line widget}
    \ahreturns{T}
  \end{ahfunction}


\end{ahobject}
%%----------------------------------------------------------------------------
\begin{ahobject}{messagebox}{A simple popup text window for displaying short to medium-size messages.}

\ahinclude{guicomponents.g}

  \begin{ahdescription}
    This widget creates its own toplevel frame, displays the supplied message, and 
    deletes itself when the delete member function is called, or the user presses
    the  ``Dismiss'' button.
  \end{ahdescription}

  \ahfuncs{}

  \begin{ahconstructor}{messagebox}{Create a message box.}
    \begin{ahargs}
       \ahaddarg{message}{The text to display}{}{any string}
       \ahaddarg{background}{background color}{white}{any color available on your system.}
    \end{ahargs}
    \ahreturns{A messagebox tool}
    \begin{ahdescription}
      Newlines can be embedded in the message.  The window has quite a wide
      default width, about two-thirds the width of the average display screen.
      If the longest line of your message is shorter than that, the messagebox
      widget shrinks in width to be just the size of the longest line.  No
      scrollbars are provided to accomodate wider or longer messages.
    \end{ahdescription}
  \end{ahfunction}

  %----- text (message);
  \begin{ahfunction}{text}{Erase any existing text, and display the new message.}
    \begin{ahargs}
       \ahaddarg{message}{New text to display}{}{any String, newlines included}
    \end{ahargs}
    \ahreturns{T}
  \end{ahfunction}

  %----- delete ()
  \begin{ahfunction}{delete}{Destroy the messagebox window.}
    \ahreturns{T}
  \end{ahfunction}

\end{ahobject}
%%----------------------------------------------------------------------------
\begin{ahobject}{single\_entry\_dialog\_box} {A popup dialog box for entering one item of text.}

\ahinclude{guicomponents.g}

  \begin{ahdescription}
     This popup widget provides a way to get input from the user via a
     transient window.  The programmer specifies a prompt, and an optional
     one-argument callback function -- which will be called with the
     entered text as its sole argument.  When the user types [return] in
     the entry widget, or presses the 'Okay' button, the popup window is
     destroyed, and the callback function is called.  If the user presses
     the 'Dismiss' button, then the popup window is destroyed, and the
     callback function is not called.
  \end{ahdescription}

  \ahfuncs{}

  %----- constructor
  \begin{ahconstructor}{single\_entry\_dialog\_box}{Create the popup.}
    \begin{ahargs}
       \ahaddarg{prompt}{Text to display, as a label, to the left of the text entry widget}{''}{any string}
       \ahaddarg{callbackFunction}{Called at normal termination}{F}{Any one-argument Glish function.}
    \end{ahargs}
    \ahreturns{A single\_entry\_dialog\_box}
    \begin{ahdescription}
      There are occasions in any GUI program where you need the user to enter a small amount
      of text.  Sometimes the best way to get that text is with a popup window containing
      a text entry widget, and some appropriate termination buttons.  A good way to make
      this operation modeless (i.e., run asynchronously) is to provide a function which will
      be called when the dialog box terminates; this widget returns the user's text as the
      first argument to the callback function.
    \end{ahdescription}
    \begin{ahexample}
      \begin{verbatim}
        callback := function (stringValue) { 
           print 'the user is: ', stringValue;
           }
        nameDialog := single_entry_dialog_box ('Your name', callback);
      \end{verbatim}
    \end{ahexample}

  \end{ahfunction}

  %----- delete ()
  \begin{ahfunction}{delete}{Destroy the single\_entry\_dialog\_box.}
    \ahreturns{T}
  \end{ahfunction}



\end{ahobject}
%%----------------------------------------------------------------------------
\begin{ahobject}{evalwindow} {A simple GUI text editor from which Glish code may be evaluated.}

\ahinclude{guicomponents.g}

  \begin{ahdescription}
    This top level window provides a text editor specialized for Glish.  It is
    specialized in the sense that any text you type can be sent to the Glish
    interpreter for evaluation.  This makes it a good environment for developing
    (at least) small amounts of Glish code.  As of now (December 1996) there are
    many standard editor features which are not yet available:  saving text to 
    a file, reading from a file, inserting text, pasting text, searching text.
    But all of this is possible in principle because the underlying tk 'Text'
    widget is quite powerful.  Once these capabilities are developed, and sensibly
    presented in this composite widget, the 'evalwindow', it may be a good 
    environment for the development of even large amounts of Glish code.
  \end{ahdescription}

  \begin{ahseealso}
    \htmladdnormallink{\aipspp Note 194:  The SDCalc User Environment}{../../notes/194/194.html}
  \end{ahseealso}

  \ahfuncs{}

  \begin{ahconstructor}{evalwindow}{Create a Glish-specific editor}
    \begin{ahargs}
       \ahaddarg{title}{A label for the window}{''}{any string}
       \ahaddarg{columns}{Width in characters}{60}{any integer}
       \ahaddarg{rows}{Height in lines}{20}{any integer}
    \end{ahargs}
    \ahreturns{An evalwindow tool}
  \end{ahconstructor}

  %----- contents
  \begin{ahfunction}{contents}{Get all of the text in the window}
    \ahreturns{A string, including newlines}
  \end{ahfunction}

  %----- clear
  \begin{ahfunction}{clear}{Deletes all the text in the window.}
    \ahreturns{T}
  \end{ahfunction}

  %----- delete
  \begin{ahfunction}{delete}{Destroy the evalwindow}
    \ahreturns{T}
  \end{ahfunction}


\end{ahobject}
%%----------------------------------------------------------------------------
\begin{ahobject}{tracewindow} {A text display widget for tracing Glish function execution}

\ahinclude{guicomponents.g}

  \begin{ahdescription}
     The tracewindow is a work in progress.  As of this writing (December 1996) the
     best use of the tracewindow is for the simple display of messages from a running
     Glish application.  (See sdavg.g for the first example of this.)   As any
     application performs its work, some of its operations will be performed
     behind the scenes, hidden from the user's view; this is especially true of
     a GUI application.  Some users will want to know
     what is going on behind the scenes, and the well-written program will
     display those operations as actual Glish function calls, by sending
     appropriate text to the tracewindow.

     The next level of tracing is only hinted at right now (December 1996).  The
     goal -- partly accomplished with some global functions located at the bottom of
     guicomponents.g -- is to provide a tool for the user to 
     select any function that appears in the tracewindow, and to view the 
     Glish code that makes up that function.  This approach, if properly supported,
     would allow an interested user to navigate at will through Glish code, starting
     with the function calls the application prints to the tracewindow, and going
     just as deep, or as far afield, as she wishes.

     This window is primarily useful when used as part of a properly constructed
     Glish GUI appplication.  Such an application will, at the user's request,
     print the text of crucial function calls and variables to the tracewindow, and will 
     ensure that important lower level functions have text representations for display here
     in the tracewindow as well.  (Please see view\_function\_test () and 
     view\_function\_test::text in guicomponents.g.)
  \end{ahdescription}

  \begin{ahseealso}
    \htmladdnormallink{\aipspp Note 194:  The SDCalc User Environment}{../../notes/194/194.html}
  \end{ahseealso}

  \ahfuncs{}

  \begin{ahconstructor}{tracewindow}{Create a window for navigating Glish code.}
    \begin{ahargs}
       \ahaddarg{title}{A label for the window}{''}{any string}
       \ahaddarg{columns}{Width in characters}{50}{any integer}
       \ahaddarg{rows}{Height in lines}{12}{any integer}
    \end{ahargs}
    \ahreturns{a tracewindow tool}
  \end{ahconstructor}


  % append (newString)
  %------
  \begin{ahfunction}{append}{Display newString on a new line, at the bottom of existing text}
    \begin{ahargs}
       \ahaddarg{newString}{}{}{any string}
    \end{ahargs}
    \ahreturns{T}
  \end{ahfunction}

  %------ clear ()
  \begin{ahfunction}{clear}{Delete all of the text in the window}
    \ahreturns{T}
  \end{ahfunction}

  %------ delete ()
  \begin{ahfunction}{delete}{Destroy the tracewindow}
    \ahreturns{T}
  \end{ahfunction}

  %------ view_named_function (functionName)
  \begin{ahfunction}{view\_named\_function}{Display the text of the function}
    \begin{ahargs}
       \ahaddarg{functionName}{}{}{}
    \end{ahargs}
    \ahreturns{T}
  \end{ahfunction}


\end{ahobject}
%%----------------------------------------------------------------------------
%\end{ahmodule}
\end{document}
%%----------------------------------------------------------------------------
 
