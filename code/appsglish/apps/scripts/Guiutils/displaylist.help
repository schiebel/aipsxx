%% Copyright (C) 1999,2001
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: displaylist.help,v 19.2 2004/08/25 01:58:40 cvsmgr Exp $
\documentclass{book}
\usepackage{aips2help,html}
\begin{document}

\begin{ahobject}{displaylist}{Maintain an editable list of items}

\ahinclude{displaylist.g}

\ahkeyword{gui}
\ahkeyword{cut}
\ahkeyword{paste}

\begin{ahdescription}

A display list is an editable list of items. An item may either be in the
``draw'' list, or it may be in the ``clipboard''. An item moves back and
forth via {\tt cut}, {\tt copy}, and {\tt paste} operations.

This class is not intended to be used by general users, rather it is
intended to be used in the constructions of GUI's.

\end{ahdescription}

\begin{ahexample}
See global function, {\tt displaylisttest()}
\end{ahexample}


\begin{ahconstructor}{displaylist}{Create a displaylist tool}
\begin{ahdescription}
Create a list tool ready to start adding values to. Unless a frame
is given to the constructor, the default is to not have a GUI representation
of the displaylist.

Generally you should provide a function to turn inserted values into strings
to display in the list. By default, {\tt as\_string()} will be used, which is
rarely what you will want.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{parentframe}{frame to use for gui}{F (no frame)}{frame or F}
\ahaddarg{formatfunction}{turn list values into string for display}{}{function}
\end{ahargs}
\ahreturns{displaylist tool}
\end{ahconstructor}


\begin{ahfunction}{add}{add a value to the display list}
\begin{ahdescription}
This function adds a new value to the draw list. Note that you may
add any type of value to the display list, although generally you will
add record types
\end{ahdescription}
\begin{ahargs}
\ahaddarg{value}{item to add to the draw list}{}{any}
\end{ahargs}
\ahreturns{number of entries in the draw list}
\end{ahfunction}

\begin{ahfunction}{get}{get an item from the displaylist}
\begin{ahdescription}
Use an index (1 relative) to get an item from either the draw list or the
clipboard (by default the draw list). You can determine how many items there
are by calling {\tt ndrawlist()} or {\tt nclipboard()}.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{num}{index}{}{integer}
\ahaddarg{fromdrawlist}{get from drawlist?}{}{T}
\end{ahargs}
\ahreturns{the item or fail if index invalid}
\end{ahfunction}


\begin{ahfunction}{set}{change or add an item in displaylist}
\begin{ahdescription}
Change or an existing item in the draw list (only) or add a new one.
An existing item is changed if the index is in the range 1--{\tt ndrawlist()},
otherwise a new item is added. (The index should only be one larger than the
current length of the drawlist).
\end{ahdescription}
\begin{ahargs}
\ahaddarg{num}{index}{}{integer}
\ahaddarg{value}{item to change or add in the draw list}{}{any}
\end{ahargs}
\ahreturns{the new length of the draw list or fail if index invalid}
\end{ahfunction}

\begin{ahfunction}{clear}{clear the draw list and clipboard}
\begin{ahdescription}
Empties all items in the draw list and clipboard.
\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{cleardrawlist}{clear the draw list}
\begin{ahdescription}
Empties all items in the draw list.
\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{clearclipboard}{clear the clipboard}
\begin{ahdescription}
Empties all items in the clipboard.
\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{ndrawlist}{how many items are in the draw list}
\begin{ahdescription}
Returns the number of items currently in the draw list.
\end{ahdescription}
\ahreturns{integer}
\end{ahfunction}

\begin{ahfunction}{nclipboard}{how many items are in the clipboard}
\begin{ahdescription}
Returns the number of items currently in the clipboard.
\end{ahdescription}
\ahreturns{integer}
\end{ahfunction}

\begin{ahfunction}{cut}{move items from the draw list to the clipboard}
\begin{ahdescription}
Cut is used to move items (desiganted as an array of integers) from the
draw list to the clipboard.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{drawnums}{index array}{}{integer}
\end{ahargs}
\ahreturns{the length of the drawlist or fail}
\end{ahfunction}

\begin{ahfunction}{copy}{copy items from the draw list to the clipboard}
\begin{ahdescription}
Copy is used to to copy items (desiganted as an array of integers) from the
draw list to the clipboard.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{drawnums}{index array}{}{integer}
\end{ahargs}
\ahreturns{the length of the drawlist or fail}
\end{ahfunction}

\begin{ahfunction}{paste}{copy items from clipboard to the drawlist}
\begin{ahdescription}
Paste is used to copy items from the clipboard to the drawlist. At present
all items from the clipboard are copied to the end of the drawlist. We should
probably at least allow pasting into the middle of the draw list.
\end{ahdescription}
\ahreturns{the length of the drawlist or fail}
\end{ahfunction}

\begin{ahfunction}{compact}{restore wasted space in tool}
\begin{ahdescription}
After many editing operations there can be wasted space inside the
tool. Compact reclaims this space. No visibile change occurs in
the state of the tool.
\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{apply}{call a function on items}
\begin{ahdescription}
Apply applies a function to every item in the draw list (default) or
clipboard. The function must take a single argument (or all the other
arguments must default), {\em i.e.}, the item it is being passed.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{fun}{the function we are applying to items}{}{function}
\ahaddarg{dodraw}{apply to items in draw list or clipboard}{T (draw)}{boolean}
\end{ahargs}
\ahreturns{the length of the drawlist or or clipboard or fail}
\end{ahfunction}

\begin{ahfunction}{lastchange}{return a number that specifies the state of the displaylist}
\begin{ahdescription}
It is sometimes useful to know whether or not the displaylist has changed since
the last time you have looked at it (given that the displaylist will often be
under user control through some GUI). If the number returned by this function
has changed since the last time you called it, it has. The number returned is
always non-negative, so you can initialize your cache with a negative number.
\end{ahdescription}
\ahreturns{integer}
\end{ahfunction}

\begin{ahfunction}{gui}{show the displaylist in a GUI}
\begin{ahdescription}
Create a GUI for the displaylist using a supplied frame. The clipboard appears
in a listbox on the left, the draw list in a listbox on the right, and various
buttons between them to control cutting, pasting, {\em etc}. Items are
selected by clicking and dragging in the listboxes.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{parentframe}{parent frame to write into}{}{frame}
\end{ahargs}
\ahreturns{T or fail}
\end{ahfunction}

\begin{ahfunction}{nogui}{turn off GUI view of displaylist}
\begin{ahdescription}
Turns off the GUI representation of this display list, but does not clear
the actual items in the draw list and clipboard. Note that this function
sets the parentframe of {\tt gui()} to F.
\end{ahdescription}
\end{ahfunction}

\begin{ahfunction}{save}{save the displaylist into a file}
\begin{ahdescription}
This function saves the displaylist (including the clipboard), into a file.
At present, the file format is just a Glish value, but this is subject to
change. If the file already exists, it is overwritten. A fail is returned
if the file cannot be written to (probably a read-only or non-existent
directory).
\end{ahdescription}
\begin{ahargs}
\ahaddarg{filename}{file to write into}{}{string}
\end{ahargs}
\ahreturns{T or fail}
\end{ahfunction}

\begin{ahfunction}{restore}{restore the displaylist from a file}
\begin{ahdescription}
This function restores the displaylist from a file. The current contents are
removed first. At present there is no way to merge from a file, but this could
be added if desired.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{filename}{file to read from}{}{string}
\end{ahargs}
\ahreturns{T or fail on read failure}
\end{ahfunction}

\begin{ahfunction}{setselectcallback}{call a function when an item is selected}
\begin{ahdescription}
This sets a callback function to be called whenever an item is selected in
the draw list of the GUI. The function must take one argument - the selected
item.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{callback}{function to call on item}{}{function}
\end{ahargs}
\ahreturns{T or fail}
\end{ahfunction}

\begin{ahfunction}{setchangecallback}{call a function when the list changes}
\begin{ahdescription}
This sets a callback function to be called when the list is first changed,
at which point the callback is unset. The idea is that the user somehow
``saves'' the drawlist, at which point he wants to be notified when the list
has changed. When he has saved it again, he resets the callback.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{callback}{function to call on item}{}{function}
\end{ahargs}
\ahreturns{T or fail}
\end{ahfunction}

\begin{ahfunction}{setrefreshcallback}{call function on cut and paste}
\begin{ahdescription}
Set a function to be called whenever there is a cut or paste. Arguably, the
function should be called at other times (e.g., copy), or at least there
should be additional callback functions. This function must take no arguments.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{callback}{function to call on item}{}{function}
\end{ahargs}
\ahreturns{T or fail}
\end{ahfunction}

\begin{ahfunction}{done}{release/destory this tool}
\begin{ahdescription}
Destroy all resources (GUI and the item lists) allocated by this tool.
\end{ahdescription}
\end{ahfunction}
\end{ahobject}

\begin{ahfunction}{displaylisttest}{Test/demonstration of the displaylist class}
\begin{ahdescription}
Combination test/demonstration of displaylist.
\end{ahdescription}
\end{ahfunction}

\end{document}
