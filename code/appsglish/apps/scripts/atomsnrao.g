# atomsnrao.g: help atoms for the nrao package. 
# Copyright (C) 1999
# Associated Universities, Inc. Washington DC, USA.
#
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
# License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
#
# Correspondence concerning AIPS++ should be addressed as follows:
#        Internet email: aips2-request@nrao.edu.
#        Postal address: AIPS++ Project Office
#                        National Radio Astronomy Observatory
#                        520 Edgemont Road
#                        Charlottesville, VA 22903-2475 USA
#
# $Id: atomsnrao.g,v 19.968 2006/10/17 01:30:47 wyoung Exp $

pragma include once
val help::pkg.nrao := [=];
help::pkg.nrao::d := 'NRAO-related modules and tools';

help::pkg.nrao.gbt := [=];
help::pkg.nrao.gbt.objs := [=];
help::pkg.nrao.gbt.funs := [=];
help::pkg.nrao.gbt.d := 'Module for GBT data processing';
help::pkg.nrao.gbt.objs.dcr := [=];
help::pkg.nrao.gbt.objs.dcr.m := [=];
help::pkg.nrao.gbt.objs.dcr.c := [=];
help::pkg.nrao.gbt.objs.dcr.d := 'A tool for analyzing DCR data from the GBT.';
help::pkg.nrao.gbt.objs.dcr.c.dcr := [=];
help::pkg.nrao.gbt.objs.dcr.c.dcr.d := 'Construct dcr tool';
help::pkg.nrao.gbt.objs.dcr.c.dcr.a.filename := [=];
help::pkg.nrao.gbt.objs.dcr.c.dcr.a.filename.d := 'filename of an AIPS++ Measurement Set which contains the data';
help::pkg.nrao.gbt.objs.dcr.c.dcr.a.filename.def := 'unset';
help::pkg.nrao.gbt.objs.dcr.c.dcr.a.filename.a := 'string';
help::pkg.nrao.gbt.objs.dcr.c.dcr.s := 'dcr(filename)';
help::pkg.nrao.gbt.objs.dcr.m.getscan := [=];
help::pkg.nrao.gbt.objs.dcr.m.getscan.d := 'Return data for the given scan';
help::pkg.nrao.gbt.objs.dcr.m.getscan.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.getscan.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.getscan.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.getscan.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.getscan.a.getFocus := [=];
help::pkg.nrao.gbt.objs.dcr.m.getscan.a.getFocus.d := 'flag to determine whether focus values will be retrieved';
help::pkg.nrao.gbt.objs.dcr.m.getscan.a.getFocus.def := 'F';
help::pkg.nrao.gbt.objs.dcr.m.getscan.a.getFocus.a := 'Boolean';
help::pkg.nrao.gbt.objs.dcr.m.getscan.s := 'getscan(scan, getFocus)';
help::pkg.nrao.gbt.objs.dcr.m.listscans := [=];
help::pkg.nrao.gbt.objs.dcr.m.listscans.d := 'List scan numbers';
help::pkg.nrao.gbt.objs.dcr.m.listscans.s := 'listscans()';
help::pkg.nrao.gbt.objs.dcr.m.done := [=];
help::pkg.nrao.gbt.objs.dcr.m.done.d := 'Close and exit the DCR tool';
help::pkg.nrao.gbt.objs.dcr.m.done.s := 'done()';
help::pkg.nrao.gbt.objs.dcr.m.getGO := [=];
help::pkg.nrao.gbt.objs.dcr.m.getGO.d := 'Return the GO keywords';
help::pkg.nrao.gbt.objs.dcr.m.getGO.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.getGO.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.getGO.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.getGO.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.getGO.s := 'getGO(scan)';
help::pkg.nrao.gbt.objs.dcr.m.guessmode := [=];
help::pkg.nrao.gbt.objs.dcr.m.guessmode.d := 'Guess the switching signal mode';
help::pkg.nrao.gbt.objs.dcr.m.guessmode.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.guessmode.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.guessmode.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.guessmode.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.guessmode.s := 'guessmode(scan)';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit := [=];
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.d := 'Fit a baseline';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.xarray := [=];
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.xarray.d := 'x values';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.xarray.def := '';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.xarray.a := 'double';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.yarray := [=];
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.yarray.d := 'y values';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.yarray.def := '';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.yarray.a := 'double';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.ord := [=];
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.ord.d := 'Order of the polynomial';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.ord.def := '';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.ord.a := 'int';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.range := [=];
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.range.d := 'Channel range to be fit';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.range.def := '';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.range.a := 'array';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.plotflag := [=];
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.plotflag.d := 'Plot the fit?';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.plotflag.def := 'T';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.a.plotflag.a := 'boolean';
help::pkg.nrao.gbt.objs.dcr.m.baselinefit.s := 'baselinefit(xarray, yarray, ord, range, plotflag)';
help::pkg.nrao.gbt.objs.dcr.m.focus := [=];
help::pkg.nrao.gbt.objs.dcr.m.focus.d := 'Fit a parabola to a focus observation';
help::pkg.nrao.gbt.objs.dcr.m.focus.a.filename := [=];
help::pkg.nrao.gbt.objs.dcr.m.focus.a.filename.d := 'name of ascii file on disk';
help::pkg.nrao.gbt.objs.dcr.m.focus.a.filename.def := '';
help::pkg.nrao.gbt.objs.dcr.m.focus.a.filename.a := 'string';
help::pkg.nrao.gbt.objs.dcr.m.focus.s := 'focus(filename)';
help::pkg.nrao.gbt.objs.dcr.m.get_tant := [=];
help::pkg.nrao.gbt.objs.dcr.m.get_tant.d := 'Returns Antenna Temperature for a given scan';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.receiver.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.cal_value.d := 'The calibration value for deriving counts/K ';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.get_tant.s := 'get_tant(scan, receiver, cal_value)';
help::pkg.nrao.gbt.objs.dcr.m.gauss := [=];
help::pkg.nrao.gbt.objs.dcr.m.gauss.d := 'Fit a gaussian function to the data.';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.xarray := [=];
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.xarray.d := 'X values';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.xarray.def := '';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.xarray.a := 'double';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.yarray := [=];
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.yarray.d := 'Y values';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.yarray.def := '';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.yarray.a := 'double';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.height := [=];
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.height.d := 'initial guess for height';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.height.def := '';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.height.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.width := [=];
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.width.d := 'initial guess for width';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.width.def := '';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.width.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.center := [=];
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.center.d := 'initial guess for center';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.center.def := '';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.center.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.plotflag := [=];
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.plotflag.d := 'plot the result?';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.plotflag.def := 'T';
help::pkg.nrao.gbt.objs.dcr.m.gauss.a.plotflag.a := 'boolean';
help::pkg.nrao.gbt.objs.dcr.m.gauss.s := 'gauss(xarray, yarray, height, width, center, plotflag)';
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.d := 'Plot a data associated parameter (DAP) vs. time';
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.a.colName := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.a.colName.d := 'colName from the DAP subtable';
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.a.colName.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.a.colName.a := 'string';
help::pkg.nrao.gbt.objs.dcr.m.plot_dap_time.s := 'plot_dap_time(scan, colName)';
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.d := 'Plot relative gain (normalized counts/K) vs. time - not yet implemented';
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_gain_time.s := 'plot_gain_time(scan, receiver)';
help::pkg.nrao.gbt.objs.dcr.m.plot_RA_Dec := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_RA_Dec.d := 'Plot Dec vs. RA';
help::pkg.nrao.gbt.objs.dcr.m.plot_RA_Dec.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_RA_Dec.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_RA_Dec.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_RA_Dec.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_RA_Dec.s := 'plot_RA_Dec(scan)';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.d := 'Plot data counts vs. RA for a given phase';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.phase := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.phase.d := 'Phase number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.phase.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.a.phase.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_ra.s := 'plot_phase_ra(scan, receiver, phase)';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.d := 'Plot data counts vs. Dec for a given phase';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.phase := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.phase.d := 'Phase number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.phase.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.a.phase.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_dec.s := 'plot_phase_dec(scan, receiver, phase)';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.d := 'Plot data counts vs. time for a given phase';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.phase := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.phase.d := 'Phase number';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.phase.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.a.phase.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_phase_time.s := 'plot_phase_time(scan, receiver, phase)';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.d := 'Plot Tsrc against time';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.cal_value.d := 'The calibration value for deriving counts/K';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.plot_tsrc_time.s := 'plot_tsrc_time(scan, receiver, cal_value)';
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.d := 'Plot focus against time';
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.a.param := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.a.param.d := 'Focus parameter';
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.a.param.def := 'SR\_XP';
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.a.param.a := 'string';
help::pkg.nrao.gbt.objs.dcr.m.plot_focus_time.s := 'plot_focus_time(scan, param)';
help::pkg.nrao.gbt.objs.dcr.m.focusScan := [=];
help::pkg.nrao.gbt.objs.dcr.m.focusScan.d := 'Reduce a single focus scan.';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.receiver.def := '0';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.cal_value.d := 'Cal value';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.param := [=];
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.param.d := 'Focus parameter';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.param.def := 'SR\_XP';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.param.a := 'string';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.order := [=];
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.order.d := 'Order of polynomial to fit';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.order.def := '2';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.order.a := 'int';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.archive := [=];
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.archive.d := 'Archive the result?';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.archive.def := 'F';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.a.archive.a := 'boolean';
help::pkg.nrao.gbt.objs.dcr.m.focusScan.s := 'focusScan(scan, receiver, cal_value, param, order, archive)';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.d := 'Plot Antenna Temperature vs. time';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.receiver.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.cal_value.d := 'The calibration value for deriving counts/K';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_time.s := 'plot_tant_time(scan, receiver, cal_value)';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.d := 'Plot Antenna Temperature vs. RA';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.receiver.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.cal_value.d := 'The calibration value for deriving counts/K';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_RA.s := 'plot_tant_RA(scan, receiver, cal_value)';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.d := 'Plot Antenna Temperature vs. Dec';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.receiver.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.cal_value.d := 'The calibration value for deriving counts/K';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.plot_tant_Dec.s := 'plot_tant_Dec(scan, receiver, cal_value)';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.d := 'Plot sidelobes';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.receiver.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.basepct := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.basepct.d := 'Percent of scan to use for baseline';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.basepct.def := '10';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.basepct.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.bottom := [=];
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.bottom.d := 'dB level to use for cutoff at bottom of plot';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.bottom.def := '-70';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.a.bottom.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plot_sidelobe.s := 'plot_sidelobe(scan, receiver, basepct, bottom)';
help::pkg.nrao.gbt.objs.dcr.m.plotscans := [=];
help::pkg.nrao.gbt.objs.dcr.m.plotscans.d := 'Plot several scans contiguously';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.bscan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.bscan.d := 'beginning scan number';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.bscan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.bscan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.escan := [=];
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.escan.d := 'ending scan number';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.escan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.escan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.phase := [=];
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.phase.d := 'Phase number';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.phase.def := '';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.a.phase.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.plotscans.s := 'plotscans(bscan, escan, receiver, phase)';
help::pkg.nrao.gbt.objs.dcr.m.point1 := [=];
help::pkg.nrao.gbt.objs.dcr.m.point1.d := 'Reduce a 1 scan pointing observation';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.point1.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.point1.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.xaxis := [=];
help::pkg.nrao.gbt.objs.dcr.m.point1.a.xaxis.d := '1=RA, 2=dec';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.xaxis.def := '';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.xaxis.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.point1.a.cal_value.d := 'The calibration value for deriving counts/K';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.basepct := [=];
help::pkg.nrao.gbt.objs.dcr.m.point1.a.basepct.d := 'percentage of scan to use on the edges for a baseline fit';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.basepct.def := '10';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.basepct.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.plotflag := [=];
help::pkg.nrao.gbt.objs.dcr.m.point1.a.plotflag.d := 'flag for plotting the data';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.plotflag.def := 'T';
help::pkg.nrao.gbt.objs.dcr.m.point1.a.plotflag.a := 'Boolean';
help::pkg.nrao.gbt.objs.dcr.m.point1.s := 'point1(scan, receiver, xaxis, cal_value, basepct, plotflag)';
help::pkg.nrao.gbt.objs.dcr.m.point2 := [=];
help::pkg.nrao.gbt.objs.dcr.m.point2.d := 'Reduce a 2 scan pointing observation';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.point2.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.point2.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.point2.a.cal_value.d := 'The calibration value for deriving counts/K';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.point2.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.point2.s := 'point2(scan, receiver, cal_value)';
help::pkg.nrao.gbt.objs.dcr.m.point4 := [=];
help::pkg.nrao.gbt.objs.dcr.m.point4.d := 'Reduce a 4 scan pointing observation';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.point4.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.point4.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.cal_value := [=];
help::pkg.nrao.gbt.objs.dcr.m.point4.a.cal_value.d := 'The calibration value for deriving counts/K';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.cal_value.def := '1';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.cal_value.a := 'float';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.plotflag := [=];
help::pkg.nrao.gbt.objs.dcr.m.point4.a.plotflag.d := 'flag for plotting the data';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.plotflag.def := 'T';
help::pkg.nrao.gbt.objs.dcr.m.point4.a.plotflag.a := 'Boolean';
help::pkg.nrao.gbt.objs.dcr.m.point4.s := 'point4(scan, receiver, cal_value, plotflag)';
help::pkg.nrao.gbt.objs.dcr.m.test_srp := [=];
help::pkg.nrao.gbt.objs.dcr.m.test_srp.d := 'Test whether a specified scan, receiver, phase exists';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.phase := [=];
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.phase.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.phase.def := '';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.a.phase.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.test_srp.s := 'test_srp(scan, receiver, phase)';
help::pkg.nrao.gbt.objs.dcr.m.scanSummary := [=];
help::pkg.nrao.gbt.objs.dcr.m.scanSummary.d := 'Print a summary of the scans in the GUI message window';
help::pkg.nrao.gbt.objs.dcr.m.scanSummary.s := 'scanSummary()';
help::pkg.nrao.gbt.objs.dcr.m.tsys := [=];
help::pkg.nrao.gbt.objs.dcr.m.tsys.d := 'Calculate the system temperature';
help::pkg.nrao.gbt.objs.dcr.m.tsys.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.tsys.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.tsys.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.tsys.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.tsys.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.tsys.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.tsys.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.tsys.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.tsys.s := 'tsys(scan, receiver)';
help::pkg.nrao.gbt.objs.dcr.m.tip := [=];
help::pkg.nrao.gbt.objs.dcr.m.tip.d := 'Reduce a tipping scan.';
help::pkg.nrao.gbt.objs.dcr.m.tip.a.scan := [=];
help::pkg.nrao.gbt.objs.dcr.m.tip.a.scan.d := 'Scan number';
help::pkg.nrao.gbt.objs.dcr.m.tip.a.scan.def := '';
help::pkg.nrao.gbt.objs.dcr.m.tip.a.scan.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.tip.a.receiver := [=];
help::pkg.nrao.gbt.objs.dcr.m.tip.a.receiver.d := 'Receiver number';
help::pkg.nrao.gbt.objs.dcr.m.tip.a.receiver.def := '';
help::pkg.nrao.gbt.objs.dcr.m.tip.a.receiver.a := 'Int';
help::pkg.nrao.gbt.objs.dcr.m.tip.s := 'tip(scan, receiver)';
help::pkg.nrao.gbt.objs.dcr.m.type := [=];
help::pkg.nrao.gbt.objs.dcr.m.type.d := 'Return the type of this tool.';
help::pkg.nrao.gbt.objs.dcr.m.type.s := 'type()';
help::pkg.nrao.gbt.objs.gbtmsfiller := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.c := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.d := 'A tool for filling GBT data to an aips++ MeasurementSet.';
help::pkg.nrao.gbt.objs.gbtmsfiller.c.gbtmsfiller := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.c.gbtmsfiller.d := 'Construct gbtmsfiller tool';
help::pkg.nrao.gbt.objs.gbtmsfiller.c.gbtmsfiller.s := 'gbtmsfiller()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.isattached := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.isattached.d := 'Does the filler have a valid project directory';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.isattached.s := 'isattached()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillall := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillall.d := 'Start filling all of the scans in the scan log';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillall.a.async := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillall.a.async.d := 'Run this command asyncronously';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillall.a.async.def := 'F';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillall.a.async.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillall.s := 'fillall(async)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillnext := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillnext.d := 'Start filling the next scan in the scan log';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillnext.a.async := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillnext.a.async.d := 'Run this command asyncronously';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillnext.a.async.def := 'F';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillnext.a.async.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillnext.s := 'fillnext(async)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.update := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.update.d := 'Reopen and resync with the scan log';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.update.a.async := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.update.a.async.d := 'Run this command asyncronously';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.update.a.async.def := 'F';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.update.a.async.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.update.s := 'update(async)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.more := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.more.d := 'Are there more scans to process in the scan log?';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.more.s := 'more()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status.d := 'Report the status of the filler';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status.s := 'status()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status.s := 'status()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status.s := 'status()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status.s := 'status()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status.s := 'status()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status.s := 'status()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.status.s := 'status()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setproject := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setproject.d := 'Set the project directory';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setproject.a.project := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setproject.a.project.d := 'The project directory';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setproject.a.project.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setproject.a.project.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setproject.s := 'setproject(project)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.project := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.project.d := 'Get the current project directory';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.project.s := 'project()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setbackend := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setbackend.d := 'Limit the backends to fill to one type';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setbackend.a.backend := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setbackend.a.backend.d := 'The backend type to fill';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setbackend.a.backend.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setbackend.a.backend.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setbackend.s := 'setbackend(backend)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.backend := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.backend.d := 'Get the current backend type';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.backend.s := 'backend()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsdirectory := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsdirectory.d := 'Change the directory of all output MSs';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsdirectory.a.msdirectory := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsdirectory.a.msdirectory.d := 'The directory of all output MSs';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsdirectory.a.msdirectory.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsdirectory.a.msdirectory.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsdirectory.s := 'setmsdirectory(msdirectory)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.msdirectory := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.msdirectory.d := 'Get the current directory of all output MSs';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.msdirectory.s := 'msdirectory()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsrootname := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsrootname.d := 'Change the root name of all output MSs';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsrootname.a.msrootname := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsrootname.a.msrootname.d := 'The root name of all output MS';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsrootname.a.msrootname.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsrootname.a.msrootname.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmsrootname.s := 'setmsrootname(msrootname)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.msrootname := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.msrootname.d := 'Get the current msrootname';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.msrootname.s := 'msrootname()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmintime := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmintime.d := 'Change the minimum time for data to be filled';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmintime.a.mintime := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmintime.a.mintime.d := 'The minimum time.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmintime.a.mintime.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmintime.a.mintime.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmintime.s := 'setmintime(mintime)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.mintime := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.mintime.d := 'Get the current minimum time for data to be filled';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.mintime.s := 'mintime()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxtime := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxtime.d := 'Change the maximum time for data to be filled';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxtime.a.mintime := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxtime.a.mintime.d := 'The maximum time.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxtime.a.mintime.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxtime.a.mintime.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxtime.s := 'setmaxtime(mintime)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.maxtime := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.maxtime.d := 'Get the current maximum time for data to be filled';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.maxtime.s := 'maxtime()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminscan := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminscan.d := 'Change the minimum scan number for data to be filled';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminscan.a.minscan := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminscan.a.minscan.d := 'The minimum scan number.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminscan.a.minscan.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminscan.a.minscan.a := 'integer';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminscan.s := 'setminscan(minscan)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.minscan := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.minscan.d := 'Get the current minimum scan number for data to be filled';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.minscan.s := 'minscan()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxscan := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxscan.d := 'Change the maximum scan number for data to be filled';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxscan.a.minscan := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxscan.a.minscan.d := 'The maximum scan number.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxscan.a.minscan.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxscan.a.minscan.a := 'integer';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setmaxscan.s := 'setmaxscan(minscan)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.maxscan := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.maxscan.d := 'Get the current maximum scan number for data to be filled';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.maxscan.s := 'maxscan()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setobject := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setobject.d := 'Limit the fill to objects matching this string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setobject.a.object := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setobject.a.object.d := 'The object string to match';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setobject.a.object.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setobject.a.object.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setobject.s := 'setobject(object)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.object := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.object.d := 'Get the current object string to match';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.object.s := 'object()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawpointing := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawpointing.d := 'Set the flag which controlls whether the raw pointings are saved (filled).';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawpointing.a.fillrawpointing := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawpointing.a.fillrawpointing.d := 'When true, raw pointings are filled.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawpointing.a.fillrawpointing.def := 'F';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawpointing.a.fillrawpointing.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawpointing.s := 'setfillrawpointing(fillrawpointing)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillrawpointing := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillrawpointing.d := 'Get the value of the fillrawpointing flag.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillrawpointing.s := 'fillrawpointing()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawfocus := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawfocus.d := 'Set the flag which controlls whether the raw focus values are saved (filled).';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawfocus.a.fillrawfocus := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawfocus.a.fillrawfocus.d := 'When true, raw focus values are filled.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawfocus.a.fillrawfocus.def := 'F';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawfocus.a.fillrawfocus.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfillrawfocus.s := 'setfillrawfocus(fillrawfocus)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillrawfocus := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillrawfocus.d := 'Get the value of the fillrawfocus flag.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fillrawfocus.s := 'fillrawfocus()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfilllags := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfilllags.d := 'Set the flag which controlls whether the LAG\_DATA data column is filled.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfilllags.a.filllags := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfilllags.a.filllags.d := 'When true, the LAG\_DATA column is filled.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfilllags.a.filllags.def := 'F';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfilllags.a.filllags.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfilllags.s := 'setfilllags(filllags)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.filllags := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.filllags.d := 'Get the value of the filllags flag.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.filllags.s := 'filllags()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setvv := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setvv.d := 'Choose the type of vanVleck correction for spectrometer data.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setvv.a.vv := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setvv.a.vv.d := 'Valid types are ``schwab\' \' , ``old\' \' , ``none\' \' , and ``default\' \' ';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setvv.a.vv.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setvv.a.vv.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setvv.s := 'setvv(vv)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.vv := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.vv.d := 'Get the value of type of vanVleck correction being used.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.vv.s := 'vv()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setsmooth := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setsmooth.d := 'Choose the type of smoothing for spectrometer data.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setsmooth.a.vv := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setsmooth.a.vv.d := 'Valid types are ``hanning\' \' , ``hamming\' \' , ``none\' \' , and ``default\' \' ';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setsmooth.a.vv.def := '';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setsmooth.a.vv.a := 'string';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setsmooth.s := 'setsmooth(vv)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.smooth := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.smooth.d := 'Get the value of type of smoothing being used.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.smooth.s := 'smooth()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusehighcal := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusehighcal.d := 'Set the flag which controlls which CAL\_TEMP is used from the receiver cal table.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusehighcal.a.usehighcal := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusehighcal.a.usehighcal.d := 'When true, HIGH\_CAL\_TEMP is used, else LOW\_CAL\_TEMP.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusehighcal.a.usehighcal.def := 'F';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusehighcal.a.usehighcal.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusehighcal.s := 'setusehighcal(usehighcal)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.usehighcal := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.usehighcal.d := 'Get the value of the usehighcal flag.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.usehighcal.s := 'usehighcal()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusebias := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusebias.d := 'Set the flag which controlls whether the bias is calculated during the van Vleck correction.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusebias.a.usebias := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusebias.a.usebias.d := 'When true, the bias is part of the vanVleck correction for ACS data.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusebias.a.usebias.def := 'F';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusebias.a.usebias.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setusebias.s := 'setusebias(usebias)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.usebias := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.usebias.d := 'Get the value of the usebias flag.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.usebias.s := 'usebias()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setoneacsms := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setoneacsms.d := 'Set the flag which controlls whether a single ACS MeasurementSet is filled.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setoneacsms.a.oneacsms := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setoneacsms.a.oneacsms.d := 'When true, a single ACS MeasurementSet is filled with data from all ACS banks.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setoneacsms.a.oneacsms.def := 'T';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setoneacsms.a.oneacsms.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setoneacsms.s := 'setoneacsms(oneacsms)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.oneacsms := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.oneacsms.d := 'Get the value of the oneacsms flag.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.oneacsms.s := 'oneacsms()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setcompresscalcols := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setcompresscalcols.d := 'Set the flag which controls whether the calibration columns are compressed.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setcompresscalcols.a.compresscalcols := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setcompresscalcols.a.compresscalcols.d := 'When true, the calibration columns are compressed.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setcompresscalcols.a.compresscalcols.def := 'T';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setcompresscalcols.a.compresscalcols.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setcompresscalcols.s := 'setcompresscalcols(compresscalcols)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.compresscalcols := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.compresscalcols.d := 'Get the value of the compresscalcols flag.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.compresscalcols.s := 'compresscalcols()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setdcbias := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setdcbias.d := 'Set a specific bias to use during the van Vleck correction.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setdcbias.a.dcbias := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setdcbias.a.dcbias.d := 'This value is used as the bias.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setdcbias.a.dcbias.def := '0.0';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setdcbias.a.dcbias.a := 'double';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setdcbias.s := 'setdcbias(dcbias)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.dcbias := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.dcbias.d := 'Get the specific value of the dcbias to use during the van Vleck correction.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.dcbias.s := 'dcbias()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminbiasfactor := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminbiasfactor.d := 'Attempt to correct for the truncation error in the ACS samplers.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminbiasfactor.a.minbiasfactor := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminbiasfactor.a.minbiasfactor.d := 'The minimum integer to be multiplied by 0.5/65536 and subtracted from the data..';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminbiasfactor.a.minbiasfactor.def := '-1';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminbiasfactor.a.minbiasfactor.a := 'integer';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setminbiasfactor.s := 'setminbiasfactor(minbiasfactor)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.minbiasfactor := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.minbiasfactor.d := 'Get the minbiasfactor value.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.minbiasfactor.s := 'minbiasfactor()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.newms := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.newms.d := 'Force a new MS for all currently filling backends.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.newms.s := 'newms()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfixlags := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfixlags.d := 'Toggle whether bad ACS lags should be fixed, if possible.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfixlags.a.fixlags := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfixlags.a.fixlags.d := 'When true, bad ACS lags are fixed, if possible.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfixlags.a.fixlags.def := 'False';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfixlags.a.fixlags.a := 'boolean';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.setfixlags.s := 'setfixlags(fixlags)';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fixlags := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fixlags.d := 'Get the fixlags toggle value.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.fixlags.s := 'fixlags()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.done := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.done.d := 'Stop filling and close the tool.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.done.s := 'done()';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.type := [=];
help::pkg.nrao.gbt.objs.gbtmsfiller.m.type.d := 'Return the type of this tool.';
help::pkg.nrao.gbt.objs.gbtmsfiller.m.type.s := 'type()';
help::pkg.nrao.gbt.funs.gbtlogfiller := [=];
help::pkg.nrao.gbt.funs.gbtlogfiller.a := [=];
help::pkg.nrao.gbt.funs.gbtlogfiller.d := 'Join GBT logs into a single AIPS++ Table';
help::pkg.nrao.gbt.funs.gbtlogfiller.s := 'gbtlogfiller()';
help::pkg.nrao.gbt.funs.gbtlogview := [=];
help::pkg.nrao.gbt.funs.gbtlogview.a := [=];
help::pkg.nrao.gbt.funs.gbtlogview.d := 'View GBT logs';
help::pkg.nrao.gbt.funs.gbtlogview.s := 'gbtlogview()';

help::pkg.nrao.vla := [=];
help::pkg.nrao.vla.objs := [=];
help::pkg.nrao.vla.funs := [=];
help::pkg.nrao.vla.d := 'Module for VLA specific data processing';
help::pkg.nrao.vla.objs.vlafiller := [=];
help::pkg.nrao.vla.objs.vlafiller.m := [=];
help::pkg.nrao.vla.objs.vlafiller.c := [=];
help::pkg.nrao.vla.objs.vlafiller.d := 'A tool for converting VLA archive format data to a measurement set';
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller := [=];
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.d := 'Construct an vlafiller tool.';
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.a.host := [=];
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.a.host.d := 'The host on which the vlafiller should be run';
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.a.host.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.a.host.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.a.forcenewserver := [=];
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.a.forcenewserver.d := 'Always start a new server';
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.a.forcenewserver.def := 'F';
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.a.forcenewserver.a := 'Boolean';
help::pkg.nrao.vla.objs.vlafiller.c.vlafiller.s := 'vlafiller(host, forcenewserver)';
help::pkg.nrao.vla.objs.vlafiller.m.diskinput := [=];
help::pkg.nrao.vla.objs.vlafiller.m.diskinput.d := 'Specify the input data file.';
help::pkg.nrao.vla.objs.vlafiller.m.diskinput.a.filename := [=];
help::pkg.nrao.vla.objs.vlafiller.m.diskinput.a.filename.d := 'The input file name.';
help::pkg.nrao.vla.objs.vlafiller.m.diskinput.a.filename.def := 'no default';
help::pkg.nrao.vla.objs.vlafiller.m.diskinput.a.filename.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.diskinput.s := 'diskinput(filename)';
help::pkg.nrao.vla.objs.vlafiller.m.onlineinput := [=];
help::pkg.nrao.vla.objs.vlafiller.m.onlineinput.d := 'Read input data from the online computers.';
help::pkg.nrao.vla.objs.vlafiller.m.onlineinput.s := 'onlineinput()';
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput := [=];
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.d := 'Specify the input tape device.';
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.a.device := [=];
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.a.device.d := 'The tape device.';
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.a.device.def := 'no default';
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.a.device.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.a.files := [=];
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.a.files.d := 'The files to read.';
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.a.files.def := '[1]';
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.a.files.a := 'vector of integers';
help::pkg.nrao.vla.objs.vlafiller.m.tapeinput.s := 'tapeinput(device, files)';
help::pkg.nrao.vla.objs.vlafiller.m.output := [=];
help::pkg.nrao.vla.objs.vlafiller.m.output.d := 'Specify the output measurement set';
help::pkg.nrao.vla.objs.vlafiller.m.output.a.msname := [=];
help::pkg.nrao.vla.objs.vlafiller.m.output.a.msname.d := 'The measurement set name.';
help::pkg.nrao.vla.objs.vlafiller.m.output.a.msname.def := 'no default';
help::pkg.nrao.vla.objs.vlafiller.m.output.a.msname.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.output.a.overwrite := [=];
help::pkg.nrao.vla.objs.vlafiller.m.output.a.overwrite.d := 'Overwrite an existing file.';
help::pkg.nrao.vla.objs.vlafiller.m.output.a.overwrite.def := 'F';
help::pkg.nrao.vla.objs.vlafiller.m.output.a.overwrite.a := 'Boolean';
help::pkg.nrao.vla.objs.vlafiller.m.output.s := 'output(msname, overwrite)';
help::pkg.nrao.vla.objs.vlafiller.m.selectproject := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectproject.d := 'Select which project to convert';
help::pkg.nrao.vla.objs.vlafiller.m.selectproject.a.project := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectproject.a.project.d := 'The observing project name.';
help::pkg.nrao.vla.objs.vlafiller.m.selectproject.a.project.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selectproject.a.project.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.selectproject.s := 'selectproject(project)';
help::pkg.nrao.vla.objs.vlafiller.m.selecttime := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.d := 'Select which time-range to convert';
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.a.start := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.a.start.d := 'The beginning of the time range.';
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.a.start.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.a.start.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.a.stop := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.a.stop.d := 'The end of the time range.';
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.a.stop.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.a.stop.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.selecttime.s := 'selecttime(start, stop)';
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.d := 'Select which frequency-range to convert';
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.a.centerfrequency := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.a.centerfrequency.d := 'The center frequency.';
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.a.centerfrequency.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.a.centerfrequency.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.a.bandwidth := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.a.bandwidth.d := 'The range of frequencies around the center frequency.';
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.a.bandwidth.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.a.bandwidth.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.selectfrequency.s := 'selectfrequency(centerfrequency, bandwidth)';
help::pkg.nrao.vla.objs.vlafiller.m.selectband := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectband.d := 'Select which frequency-band to convert';
help::pkg.nrao.vla.objs.vlafiller.m.selectband.a.bandname := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectband.a.bandname.d := 'The frequency band to select.';
help::pkg.nrao.vla.objs.vlafiller.m.selectband.a.bandname.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selectband.a.bandname.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.selectband.s := 'selectband(bandname)';
help::pkg.nrao.vla.objs.vlafiller.m.selectsource := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.d := 'Select which source to convert';
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.a.source := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.a.source.d := 'The source name.';
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.a.source.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.a.source.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.a.qualifier := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.a.qualifier.d := 'The qualifier.';
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.a.qualifier.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.a.qualifier.a := 'integer';
help::pkg.nrao.vla.objs.vlafiller.m.selectsource.s := 'selectsource(source, qualifier)';
help::pkg.nrao.vla.objs.vlafiller.m.selectsubarray := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectsubarray.d := 'Select which sub-array to convert';
help::pkg.nrao.vla.objs.vlafiller.m.selectsubarray.a.subarray := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectsubarray.a.subarray.d := 'The subarray id.';
help::pkg.nrao.vla.objs.vlafiller.m.selectsubarray.a.subarray.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selectsubarray.a.subarray.a := 'integer';
help::pkg.nrao.vla.objs.vlafiller.m.selectsubarray.s := 'selectsubarray(subarray)';
help::pkg.nrao.vla.objs.vlafiller.m.selectcalibrator := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectcalibrator.d := 'Select which calibrators to convert';
help::pkg.nrao.vla.objs.vlafiller.m.selectcalibrator.a.calcode := [=];
help::pkg.nrao.vla.objs.vlafiller.m.selectcalibrator.a.calcode.d := 'The calibrator code to select.';
help::pkg.nrao.vla.objs.vlafiller.m.selectcalibrator.a.calcode.def := 'unset';
help::pkg.nrao.vla.objs.vlafiller.m.selectcalibrator.a.calcode.a := 'string';
help::pkg.nrao.vla.objs.vlafiller.m.selectcalibrator.s := 'selectcalibrator(calcode)';
help::pkg.nrao.vla.objs.vlafiller.m.fill := [=];
help::pkg.nrao.vla.objs.vlafiller.m.fill.d := 'Copy the data';
help::pkg.nrao.vla.objs.vlafiller.m.fill.a.verbose := [=];
help::pkg.nrao.vla.objs.vlafiller.m.fill.a.verbose.d := 'Send messages when copying each record.';
help::pkg.nrao.vla.objs.vlafiller.m.fill.a.verbose.def := 'F';
help::pkg.nrao.vla.objs.vlafiller.m.fill.a.verbose.a := 'Boolean';
help::pkg.nrao.vla.objs.vlafiller.m.fill.a.async := [=];
help::pkg.nrao.vla.objs.vlafiller.m.fill.a.async.d := 'Run this function asynchronously.';
help::pkg.nrao.vla.objs.vlafiller.m.fill.a.async.def := 'F';
help::pkg.nrao.vla.objs.vlafiller.m.fill.a.async.a := 'Boolean';
help::pkg.nrao.vla.objs.vlafiller.m.fill.s := 'fill(verbose, async)';
help::pkg.nrao.vla.objs.vlafiller.m.state := [=];
help::pkg.nrao.vla.objs.vlafiller.m.state.d := 'Show the state of the tool';
help::pkg.nrao.vla.objs.vlafiller.m.state.s := 'state()';
help::pkg.nrao.vla.objs.vlafiller.m.stop := [=];
help::pkg.nrao.vla.objs.vlafiller.m.stop.d := 'Stop the filling process';
help::pkg.nrao.vla.objs.vlafiller.m.stop.s := 'stop()';
help::pkg.nrao.vla.objs.vlafiller.m.done := [=];
help::pkg.nrao.vla.objs.vlafiller.m.done.d := 'Delete the vlafiller tool';
help::pkg.nrao.vla.objs.vlafiller.m.done.s := 'done()';
help::pkg.nrao.vla.funs.vlafillerfromtape := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.d := 'Convert VLA archive data from a tape to                    a measurement set';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.msname := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.msname.d := 'The measurement set name.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.msname.def := 'no default';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.msname.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.device := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.device.d := 'The tape device.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.device.def := 'no default';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.device.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.files := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.files.d := 'The files to read.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.files.def := '[1]';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.files.a := 'vector of integers';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.project := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.project.d := 'The observing project name.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.project.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.project.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.start := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.start.d := 'The beginning of the time range.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.start.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.start.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.stop := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.stop.d := 'The end of the time range.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.stop.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.stop.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.bandname := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.bandname.d := 'The frequency band to select.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.bandname.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.bandname.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.source := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.source.d := 'The source name.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.source.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.source.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.overwrite := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.overwrite.d := 'Overwrite an existing file.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.overwrite.def := 'F';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.overwrite.a := 'Boolean';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.verbose := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.verbose.d := 'Send messages when copying each record.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.verbose.def := 'F';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.verbose.a := 'Boolean';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.async := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.async.d := 'Run this function asynchronously.';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.async.def := 'T';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.async.a := 'Boolean';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.host := [=];
help::pkg.nrao.vla.funs.vlafillerfromtape.a.host.d := 'The host on which the vlafiller should be run';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.host.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromtape.a.host.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromtape.s := 'vlafillerfromtape(msname, device, files, project, start, stop, bandname, source, overwrite, verbose, async, host)';
help::pkg.nrao.vla.funs.vlafillerfromdisk := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.d := 'Convert VLA archive data  	from a disk file to a measurement set';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.msname := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.msname.d := 'The measurement set name.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.msname.def := 'no default';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.msname.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.filename := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.filename.d := 'The input file name.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.filename.def := 'no default';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.filename.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.project := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.project.d := 'The observing project name.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.project.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.project.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.start := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.start.d := 'The beginning of the time range.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.start.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.start.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.stop := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.stop.d := 'The end of the time range.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.stop.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.stop.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.bandname := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.bandname.d := 'The frequency band to select.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.bandname.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.bandname.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.source := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.source.d := 'The source name.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.source.def := 'unset';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.source.a := 'string';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.overwrite := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.overwrite.d := 'Overwrite an existing file.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.overwrite.def := 'F';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.overwrite.a := 'Boolean';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.verbose := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.verbose.d := 'Send messages when copying each record.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.verbose.def := 'F';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.verbose.a := 'Boolean';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.async := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.async.d := 'Run this function asynchronously.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.async.def := 'F';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.async.a := 'Boolean';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.freqTolerance := [=];
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.freqTolerance.d := 'The tolerance for frequency.';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.freqTolerance.def := 'The channel width of the current spectral window in Hz';
help::pkg.nrao.vla.funs.vlafillerfromdisk.a.freqTolerance.a := 'Double';
help::pkg.nrao.vla.funs.vlafillerfromdisk.s := 'vlafillerfromdisk(msname, filename, project, start, stop, bandname, source, overwrite, verbose, async, freqTolerance)';
help::pkg.nrao.vla.funs.vlafilleroldweights := [=];
help::pkg.nrao.vla.funs.vlafilleroldweights.a := [=];
help::pkg.nrao.vla.funs.vlafilleroldweights.d := 'Use an older weighting scheme';
help::pkg.nrao.vla.funs.vlafilleroldweights.a.msname := [=];
help::pkg.nrao.vla.funs.vlafilleroldweights.a.msname.d := 'The measurement set name.';
help::pkg.nrao.vla.funs.vlafilleroldweights.a.msname.def := 'no default';
help::pkg.nrao.vla.funs.vlafilleroldweights.a.msname.a := 'string';
help::pkg.nrao.vla.funs.vlafilleroldweights.s := 'vlafilleroldweights(msname)';
help::pkg.nrao.vla.funs.vlafillerdemo := [=];
help::pkg.nrao.vla.funs.vlafillerdemo.a := [=];
help::pkg.nrao.vla.funs.vlafillerdemo.d := 'Demonstrate the vlafiller tool';
help::pkg.nrao.vla.funs.vlafillerdemo.s := 'vlafillerdemo()';
help::pkg.nrao.vla.funs.vlafillertest := [=];
help::pkg.nrao.vla.funs.vlafillertest.a := [=];
help::pkg.nrao.vla.funs.vlafillertest.d := 'Test the vlafiller tool';
help::pkg.nrao.vla.funs.vlafillertest.s := 'vlafillertest()';

help::pkg.nrao.e2e := [=];
help::pkg.nrao.e2e.objs := [=];
help::pkg.nrao.e2e.funs := [=];
help::pkg.nrao.e2e.d := 'Module for End-to-end processing';
help::pkg.nrao.e2e.objs.mscatalog := [=];
help::pkg.nrao.e2e.objs.mscatalog.m := [=];
help::pkg.nrao.e2e.objs.mscatalog.c := [=];
help::pkg.nrao.e2e.objs.mscatalog.d := 'Tool for constructing catalogs of MeasurementSets';
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog := [=];
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.d := 'Construct an mscatalog tool';
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.a.msname := [=];
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.a.msname.d := 'Name of MeasurementSet';
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.a.msname.def := '';
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.a.msname.a := 'String';
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.a.catalogname := [=];
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.a.catalogname.d := 'Name of catalog to be written';
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.a.catalogname.def := 'MSCATALOG';
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.a.catalogname.a := 'String';
help::pkg.nrao.e2e.objs.mscatalog.c.mscatalog.s := 'mscatalog(msname, catalogname)';
help::pkg.nrao.e2e.objs.mscatalog.m.makeindex := [=];
help::pkg.nrao.e2e.objs.mscatalog.m.makeindex.d := 'Construct an index for the MeasurementSet';
help::pkg.nrao.e2e.objs.mscatalog.m.makeindex.s := 'makeindex()';
help::pkg.nrao.e2e.objs.mscatalog.m.write := [=];
help::pkg.nrao.e2e.objs.mscatalog.m.write.d := 'Write the catalog information as either SQL or an AIPS++ table';
help::pkg.nrao.e2e.objs.mscatalog.m.write.a.what := [=];
help::pkg.nrao.e2e.objs.mscatalog.m.write.a.what.d := 'What to write?';
help::pkg.nrao.e2e.objs.mscatalog.m.write.a.what.def := 'tables';
help::pkg.nrao.e2e.objs.mscatalog.m.write.a.what.a := 'String: tables|sql';
help::pkg.nrao.e2e.objs.mscatalog.m.write.s := 'write(what)';
help::pkg.nrao.e2e.objs.mscatalog.m.done := [=];
help::pkg.nrao.e2e.objs.mscatalog.m.done.d := 'Done the tool';
help::pkg.nrao.e2e.objs.mscatalog.m.done.s := 'done()';
help::pkg.nrao.e2e.objs.e2ecatalogs := [=];
help::pkg.nrao.e2e.objs.e2ecatalogs.m := [=];
help::pkg.nrao.e2e.objs.e2ecatalogs.c := [=];
help::pkg.nrao.e2e.objs.e2ecatalogs.d := 'Tool for constructing catalogs for e2e processing';
help::pkg.nrao.e2e.objs.e2epipeline := [=];
help::pkg.nrao.e2e.objs.e2epipeline.m := [=];
help::pkg.nrao.e2e.objs.e2epipeline.c := [=];
help::pkg.nrao.e2e.objs.e2epipeline.d := 'Tool for pipeline processing';
help::pkg.nrao.e2e.objs.e2epipeline.c.e2epipeline := [=];
help::pkg.nrao.e2e.objs.e2epipeline.c.e2epipeline.d := 'Construct an e2epipeline tool';
help::pkg.nrao.e2e.objs.e2epipeline.c.e2epipeline.a.e2edir := [=];
help::pkg.nrao.e2e.objs.e2epipeline.c.e2epipeline.a.e2edir.d := 'Directory that is the root of the archive';
help::pkg.nrao.e2e.objs.e2epipeline.c.e2epipeline.a.e2edir.def := 'F';
help::pkg.nrao.e2e.objs.e2epipeline.c.e2epipeline.a.e2edir.a := 'String';
help::pkg.nrao.e2e.objs.e2epipeline.c.e2epipeline.s := 'e2epipeline(e2edir)';
help::pkg.nrao.e2e.objs.e2epipeline.m.project := [=];
help::pkg.nrao.e2e.objs.e2epipeline.m.project.d := 'Process a project from the archive';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.project := [=];
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.project.d := 'Name of project to process';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.project.def := '';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.project.a := 'String';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.telescope := [=];
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.telescope.d := 'Name of telescope from which the project originates';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.telescope.def := 'unset';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.telescope.a := 'String';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.tbeg := [=];
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.tbeg.d := 'Beginning time';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.tbeg.def := 'unset';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.tbeg.a := 'String';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.tend := [=];
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.tend.d := 'End time';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.tend.def := 'unset';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.tend.a := 'String';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.execute := [=];
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.execute.d := 'Execute the script?';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.execute.def := 'T';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.execute.a := 'Bool';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.target := [=];
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.target.d := 'Name of makefile target';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.target.def := '\' all\' ';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.a.target.a := 'String';
help::pkg.nrao.e2e.objs.e2epipeline.m.project.s := 'project(project, telescope, tbeg, tend, execute, target)';
help::pkg.nrao.e2e.objs.e2emakefiles := [=];
help::pkg.nrao.e2e.objs.e2emakefiles.m := [=];
help::pkg.nrao.e2e.objs.e2emakefiles.c := [=];
help::pkg.nrao.e2e.objs.e2emakefiles.d := 'Tool for makefiles for e2e processing';
help::pkg.nrao.e2e.objs.e2estandards := [=];
help::pkg.nrao.e2e.objs.e2estandards.m := [=];
help::pkg.nrao.e2e.objs.e2estandards.c := [=];
help::pkg.nrao.e2e.objs.e2estandards.d := 'Tool for providing standards for e2e processing';
help::pkg.nrao.e2e.objs.e2epublish := [=];
help::pkg.nrao.e2e.objs.e2epublish.m := [=];
help::pkg.nrao.e2e.objs.e2epublish.c := [=];
help::pkg.nrao.e2e.objs.e2epublish.d := 'Tool for publishing results of e2e processing';
help::pkg.nrao.e2e.objs.e2edisplayutils := [=];
help::pkg.nrao.e2e.objs.e2edisplayutils.m := [=];
help::pkg.nrao.e2e.objs.e2edisplayutils.c := [=];
help::pkg.nrao.e2e.objs.e2edisplayutils.d := 'Helper tool for e2e processing';
help::pkg.nrao.e2e.objs.e2eimagingutils := [=];
help::pkg.nrao.e2e.objs.e2eimagingutils.m := [=];
help::pkg.nrao.e2e.objs.e2eimagingutils.c := [=];
help::pkg.nrao.e2e.objs.e2eimagingutils.d := 'Helper tool for e2e processing';
help::pkg.nrao.e2e.objs.e2emsutils := [=];
help::pkg.nrao.e2e.objs.e2emsutils.m := [=];
help::pkg.nrao.e2e.objs.e2emsutils.c := [=];
help::pkg.nrao.e2e.objs.e2emsutils.d := 'Helper tool for e2e processing';
help::pkg.nrao.e2e.objs.e2epipelineutils := [=];
help::pkg.nrao.e2e.objs.e2epipelineutils.m := [=];
help::pkg.nrao.e2e.objs.e2epipelineutils.c := [=];
help::pkg.nrao.e2e.objs.e2epipelineutils.d := 'Helper tool for e2e processing';
help::pkg.nrao.e2e.objs.e2echromepipe := [=];
help::pkg.nrao.e2e.objs.e2echromepipe.m := [=];
help::pkg.nrao.e2e.objs.e2echromepipe.c := [=];
help::pkg.nrao.e2e.objs.e2echromepipe.d := 'Connects glish to a web server';

