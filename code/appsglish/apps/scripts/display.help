%% Copyright (C) 1999,2000
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: display.help,v 19.4 2005/03/31 18:11:58 wyoung Exp $

\ahpackage{package for image and data display}
\begin{ahdescription}
The display package contains modules that support the display of
\aipspp\ Images, {\em Glish}\/ arrays and other \aipspp\ data.
\end{ahdescription}

\input{guiutils.help}

\input{plotter.help}

\input{viewer.help}

\input{widgets.help}

\bigskip \noindent {\bf A note on colors} \medskip

At present, the Aipsview and Viewer \tools\ will only work on \mbox{X
window} screens which can provide a ``PseudoColor visual.''  Most
present-day Sun workstations provide an 8-bit PseudoColor visual by
default; most present-day SGI workstations provide a 10-bit
PseudoColor visual by default; and most Linux workstations and
X-terminals offer a 16-bit TrueColor visual by default, but commonly
offer instead a 15-bit TrueColor visual or a 24-bit TrueColor visual.
Some TrueColor \mbox{X servers} (notably the Sun servers, and a few
commercial servers running under Linux on selected hardware) are
actually able to provide PseudoColor visuals within selected windows.

{\bf Without a PseudoColor visual, the Aipsview and Viewer \tools\
will fail.  This is because additional work is needed for these
\tools\ to support TrueColor (and DirectColor) visuals correctly.}

However, it is important to note that for standard false color images,
PseudoColor visuals are generally better than TrueColor visuals.  This
is because PseudoColor visuals have ``hardware colormaps,'' into which
selected colors can be placed for use.  A false color image is
normally displayed by first mapping a set of colors (eg.\ a rainbow or
greyscale) into part of the hardware colormap, and then drawing the
pixels to the screen, specifying for each pixel with which entry in
the hardware colormap it should color itself.  Once drawn, the colors
can be changed in the hardware colormap, and the display is updated
instantly.  For example, the rainbow colors could be replaced with
topographic colors.  Or as is more common, the colors within the
hardware colormap can be shifted lengthwise and compressed or
stretched to give more range to the signal or noise regimes of an
image: this is the standard ``colormap fiddling'' technique.

TrueColor visuals, on the other hand, do not have a hardware colormap,
and so for each pixel the exact color must be specified by red, green
and blue components {\em at the time of drawing.}  Once drawn, the
only way to modify the coloring of the image is to completely redraw
the image.  Thus, the ability to interactive fiddle the colormap of an 
image is lost.

Furthermore, while a screen having an 8-bit PsuedoColor visual can
display at maximum 256 colors on the screen at once, and a 15-bit
TrueColor visual can display upto 32768 colors, in the second case,
the individual color components (red, green and blue) can be specified 
at only 5-bit resolution.  For the former, 8-bit resolution is
available for the color components.  Thus, smooth color shadings are
easier to obtain on an 8 or 10-bit PseudoColor visual than on the 
typical 15/16-bit TrueColor visuals used on Linux machines.
