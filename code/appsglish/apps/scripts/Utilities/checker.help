%% Copyright (C) 1999
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: checker.help,v 19.2 2004/08/25 02:07:41 cvsmgr Exp $
%%
%%--------------------------------------------------------------------------
%%
%% Tool template
%%
%%--------------------------------------------------------------------------
%%

\begin{ahobject}{checker}{Tool to check the AIPS++ environment}

\ahinclude{checker.g}

\ahcategory{utilities}

   %
   %ahkeyword registers module keywords
   %

\ahmethods{}

\begin{ahdescription}

This tool checks the AIPS++ environment for suitability for running.
Unsuitable settings are noted and recommendations are made.

There is a defaultchecker with abbreviation dch. Normally only one
should be needed.
\end{ahdescription}


\end{ahexample}  



\begin{ahconstructor}{checker}{Construct an checker}
\ahreturns{checker tool}
\begin{ahdescription}

This is the only {\tt checker} constructor. Since only one checker
should ever be needed, the use of this constructor should be
unnecessary.
\end{ahdescription}
\end{ahconstructor}

\begin{ahfunction}{type}{Return the type of this tool}
\ahreturns{String}
\begin{ahdescription}
 
This tool function returns the string ``checker''.  If
you have a tool, but don't know what kind it is, this
function usually exists to tell you who the tool is.
 
\end{ahdescription}
\end{ahfunction}
 

\begin{ahfunction}{all}{Check all properties}
\ahreturns{Number of warnings}   
\begin{ahdescription}
All the checks are performed.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Be verbose?}{F}{Boolean}
\end{ahargs}
\end{ahfunction} 


\begin{ahfunction}{display}{Check display properties}
\ahreturns{Number of warnings}   
\begin{ahdescription}
The root visual is checked to see if it is not in TrueColor
mode. 
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Be verbose?}{T}{Boolean}
\end{ahargs}
\end{ahfunction} 


\begin{ahfunction}{perl}{Check to see if perl is available}
\ahreturns{Number of warnings}   
\begin{ahdescription}
perl is used for some operations in the help system. This
checks to see if perl is available.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Be verbose?}{T}{Boolean}
\end{ahargs}
\end{ahfunction} 


\begin{ahfunction}{plotter}{Check plotter properties}
\ahreturns{Number of warnings}   
\begin{ahdescription}
The environment variable PGPLOT\_FONT is checked to verify
that it points to an existing file. Also the Glish variable
pgplot is checked for existence and that it is a function.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Be verbose?}{T}{Boolean}
\end{ahargs}
\end{ahfunction} 


\begin{ahfunction}{gui}{Check gui properties}
\ahreturns{Number of warnings}   
\begin{ahdescription}
have\_gui() is run to see if Glish has a GUI.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Be verbose?}{T}{Boolean}
\end{ahargs}
\end{ahfunction} 


\begin{ahfunction}{memory}{Check memory properties}
\ahreturns{Number of warnings}   
\begin{ahdescription}
The physical memory is checked to verify that it is > 63MB.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{verbose}{Be verbose?}{T}{Boolean}
\end{ahargs}
\end{ahfunction} 


\end{ahobject}