%% Copyright (C) 1999,2000,2002
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: note.help,v 19.2 2004/08/25 02:09:31 cvsmgr Exp $
\documentclass{book}
\usepackage{aips2help,html}
\begin{document}

\begin{ahfunction}{note}{Send a message to the logger or terminal}

\ahinclude{note.g}
\ahsynopsis{edit(..., priority='NORMAL', origin='Glish', time='')}

\begin{ahdescription}
Use {\tt note} to send a message to the logger if \aipspp  is running, otherwise
it sends it to the screen. This is useful if you are writing Glish functions
that should function in \aipspp  and non-\aipspp  environments. In particular,
sending a message doesn't start \aipspp , but if \aipspp is already started then
the message is logged.

The priority defaults to {\tt NORMAL} and the origin to {\tt Glish}, however
these can be overridden if desired.
\end{ahdescription}

\begin{ahargs}
\ahaddarg[in]{\ldots}{components of the message}{}{string}
\ahaddarg[in]{priority}{Message priority}{NORMAL}{DEBUGGING,NORMAL,WARN,SEVERE}
\ahaddarg[in]{origin}{source of the message}{'Glish'}{string}
\ahaddarg[in]{time}{time as a string}{Current time}{string}
\ahaddarg[in]{postcli}{Show message in CLI window too?}{F}{Bool}
\end{ahargs}

\begin{ahexample}
\begin{verbatim}
 - note('The value of x is', x);
\end{verbatim}
\end{ahexample}

\begin{ahseealso}
\begin{enumerate}
\item \ahlink{The \aipspp  logger}{tasking:logger}
\item \ahlink{throw}{misc:throw}
\end{enumerate}
\end{ahseealso}


\end{ahfunction}

\begin{ahfunction}{throw}{Send a SEVERE message, then fail}

\ahinclude{note.g}
\ahsynopsis{throw(..., origin='Glish')}

\begin{ahdescription}
It is often useful to be able to both print an error message (to the logger
if it is defined, otherwise to the terminal), and then return a fail. This
function implements that idiom.

The priority is always set to {\tt SEVERE}.
\begin{ahargs}
\ahaddarg[in]{\ldots}{components of the message}{}{string}
\ahaddarg[in]{origin}{source of the message}{'Glish'}{string}
\ahaddarg[in]{postcli}{Show message in CLI window too?}{F}{Bool}
\end{ahargs}
\ahreturns{fail with the message in it}

\begin{ahexample}
\begin{verbatim}
myfunc := function(x) {
    if (!is_numeric(x))
        return throw('I can only deal with numeric values of x, not ', 
                      type_name(x), origin='myfunc');
}
\end{verbatim}
\end{ahexample}

\begin{ahseealso}
\begin{enumerate}
\item \ahlink{The \aipspp  logger}{tasking:logger}
\item \ahlink{note}{misc:note}
\end{enumerate}
\end{ahseealso}


\end{ahfunction}
\end{document}
