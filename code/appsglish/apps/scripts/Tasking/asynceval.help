%% Copyright (C) 1999,2000
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: asynceval.help,v 19.2 2004/08/25 02:02:07 cvsmgr Exp $
\begin{ahobject}{asynceval}{Asynchronous eval}
\ahcategory{utility}
\ahkeyword{asynceval}{}

\begin{ahdescription}
{\tt asynceval} is a simple tool for asynchronous evals. It is
mainly of use in Glish programming. You give a command that is
to be eval()'ed and then you can wait for the result. It's
particularly useful for commands that may fail for some unexpected
reason. The Glish interpreter is not then blocked.

The events recognized are:
\begin{description}
\item[run (accepted)] the argument is a command string to be
eval()'ed.
\item[result (emitted)] The argument is the result of the eval().
\end{description}

\end{ahdescription}

\ahfuncs{}

\begin{ahconstructor}{asynceval}{Construct asynceval tool}
\begin{ahdescription}
This makes an asynceval tool. It is a good idea to make one of
these when needed and to kill it (via
\ahlink{done}{tasking:asynceval.done})
when finished.
\end{ahdescription}
\end{ahconstructor}

\begin{ahfunction}{done}{Kill this asynceval}
\begin{ahdescription}
The asynceval is terminated. All existing whenevers are deactivated
and the subsequence itself is destroyed.
\end{ahdescription}
\ahreturns{Bool}
\end{ahfunction}

\end{ahobject}

