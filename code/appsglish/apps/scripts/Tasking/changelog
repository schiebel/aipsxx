
<change id=0001>
 <author> Ger van Diepen </author>
 <date> 2000/05/08 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> logger </module>
 <type> Code </type>
 <category> New </category>
 <defects>  </defects>
 <summary>
Added query and script functionality
 </summary>
 <description>
The logger has been extended in various ways:
<ul>
 <li>It is possible to query to log table. It uses the taqlwidget
     to show a query form.
 <li>Purging the log table is possible using the results of a query.
 <li>It is possible to create and optionally execute a glish script
     created from the logged commands.
 <li>Errors are highlighted differently from warnings.
 <li>When creating the logger from an existing log table, the
     highlights for warnings and errors are maintained.
 <li>It is possible to control to order and widths of the various text
     panels.
</ul>
 </description>
</change>

<change id=0020>
 <author> Tim Cornwell </author>
 <date> 2000/07/11 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> toolmanager stdtoolguiserver </module>
 <type> Code </type>
 <category> Change Bugfix </category>
 <defects> 1459 1411 1438 1436 1428 1323 1269 1348 </defects>
 <summary>
Improvements to interface, use tabs, fix bugs
 </summary>
 <description>

I've changed the interface in a number of ways:

	- Tabs are used instead of the Windows menu to keep track
of various views. This allows the user to see all tools, etc at a
glance.
	- The location of Go, Commands, Inputs has been changed to
be aligned with the function arguments. George (and others) pointed
out that this is more logical than under the list of functions.
	- I've changed some of the frame relief's to clarify groupings.
	- I changed Web to Function Help and Tool Help.
	- widgetserver is now used throughout (pretty easy actually).

I *think* these are all improvements but comments are welcome.
	- One can now Exit AIPS++ from the File menu (the one place
where this is appropriate, I think).
 </description>
</change>

<change id=0033>
 <author> Tim Cornwell </author>
 <date> 2000/08/06 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> servers </module>
 <type> Code </type>
 <category> Change </category>
 <defects>  </defects>
 <summary>
Added new view service to the tasking system
 </summary>
 <description>

The tasking system can now view any file that catalog.g can.
Use the application service view with the name of any file
to be viewed:

	ApplicationEnvironment::view(myimagename);
	ApplicationEnvironment::view(mymsname);

etc.

There is no returned success indicator.
 </description>
</change>

<change id=0038>
 <author> Tim Cornwell </author>
 <date> 2000/08/27 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> inputsmanager </module>
 <type> Code </type>
 <category> Change </category>
 <defects>  </defects>
 <summary>
inputsmanager now based on recordmanager
 </summary>
 <description>

Inputsmanager is now implemented using the new recordmanager. This means
that old inputs tables are no longer accessible from this version
(but are still accessible from old versions).

inputsmanager also now knows to convert itemcontainers to record
before storing. Unfortunately there is no easy automatic way to 
convert them back so currently on restoring the record is left
as is. guientry.genericitem now can convert from these records to
a true itemcontainer so this does not affect toolmanager

Tim
 </description>
</change>

<change id=0039>
 <author> Tim Cornwell </author>
 <date> 2000/08/27 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> recordmanager </module>
 <type> Code </type>
 <category> New </category>
 <defects>  </defects>
 <summary>
Recordmanager can save and restore records to a table
 </summary>
 <description>

recordmanager is a general tool for saving and restoring
records to and from an AIPS++ table. Attributes and
comments are saved along with the record.

This is now used for storing inputs. I also plan to offer
a GUI interface to allow all records to be saved automatically

Tim
 </description>
</change>

<change id=0040>
 <author> Tim Cornwell </author>
 <date> 2000/08/27 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> toolmanager </module>
 <type> Code </type>
 <category> Change </category>
 <defects>  </defects>
 <summary>
Cleanup of implementation
 </summary>
 <description>

Toolmanager has been cleaned up internally. It has been split into a
couple of files:

	- toolmanager: public interface that public should see
	- toolmanagersupport: functional interface used by GUIs and CLIs

Tim
 </description>
</change>

<change id=0041>
 <author> Tim Cornwell </author>
 <date> 2000/08/27 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> stdtoolguiserver </module>
 <type> Code </type>
 <category> Change </category>
 <defects>  </defects>
 <summary>
Cleanup of stdtoolguiserver
 </summary>
 <description>

I've split out the various parts of the GUI into separate files:

	- toolguibasefunction.g: base function used in most toolmanager
guis. Contains autogui, etc.
	- toolguiserver.g: sets up top level guis for tools, functions, etc.
	- toolmanagerguiserver: sets up top level gui for the manager

Tim
 </description>
</change>

<change id=0042>
 <author> Tim Cornwell </author>
 <date> 2000/08/27 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> types </module>
 <type> Code </type>
 <category> Change </category>
 <defects>  </defects>
 <summary>
Added antennas and baselines types
 </summary>
 <description>

I've added two new types: antennas and baselines. These are arrays
that know to use the gopher to get antenna and baseline information.

I've also added a context keyword to the specification of arguments.
The intention is that this propagates to the individual widgets and
provides a wider context e.g. the name of a measurement set that is
being used in the tool. This is work in progress.

Tim
 </description>
</change>

<change id=0049>
 <author> Tim Cornwell </author>
 <date> 2000/09/06 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> tasking </module>
 <type> Code Documentation </type>
 <category> New Change </category>
 <defects>  </defects>
 <summary>
Now support list of types
 </summary>
 <description>

A list of other types may now be defined. This allows one to
define e.g. a source containing a name (string) and a direction
(direction). The interface allows the user to add and delete 
these at will. This allows the determination of how many
sources are to be processed to be independent of the user
interface (in this example).

The list type is designed for use in map.g but will almost
certainly be useful elsewhere. To see it at work, run the
global test function typestest() found in types.g
 </description>
</change>

<change id=0052>
 <author> Tim Cornwell </author>
 <date> 2000/09/22 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> types.g </module>
 <type> Code Documentation </type>
 <category> New </category>
 <defects>  </defects>
 <summary>
New ms-related types
 </summary>
 <description>

I have added a number of new types that are appropriate for
MeasurementSets.

	- antennas: list of antennas. 
	- baselines: list of baselines. 
	- fields: list of field ids.
	- spectralwindows: list of spectral window ids.
	- msselect: uses the taqlwidget to generate a Table Query Language
query for a MeasurementSet.

The first four widgets use the gopher tool to get and select the
information. A graphical selection tool is used to actually select
the relevant information.
 </description>
</change>
