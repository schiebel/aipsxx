%% Copyright (C) 1999,2000,2001,2002,2003
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: deconvolver.help,v 19.4 2005/03/23 06:48:56 kgolap Exp $
\documentclass{article}
\usepackage{aips2help, html, epsfig}
\begin{document}
\providecommand{\pixonURL}{http://www.pixon.com/}
\providecommand{\rsiURL}{http://www.rsinc.com/}
\begin{ahmodule}{deconvolver}{Module for deconvolving images}
\ahinclude{deconvolver.g}

\begin{ahdescription} 

{\tt deconvolver} provides a unified interface for 
image processing including deconvolution starting from images. 

\end{ahdescription}


\ahobjs{}
\ahfuncs{}

\begin{ahobject}{deconvolver}{deconvolver tool}
\begin{ahdescription}
deconvolver is a tool that deconvolves a known point spread function
from an image.  A {\tt deconvolver} must be constructed for each dirty
image and point spread function for which one wishes to do processing.
Multicple copies of {\tt deconvolver} may be made at any time (provide
they are given different names).
\end{ahdescription}

\ahfuncs{}

\begin{ahconstructor}{deconvolver}{Construct a deconvolver tool}
\begin{ahdescription}
This is used to construct {\tt deconvolver} tools associated
with a dirty image and point spread function. 
The {\tt deconvolver} tool may then be
used to generate various types of images. Note that
a new executable is started every time the constructor
is called. 

This returns a Glish variable containing the tool functions of
deconvolver.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{dirtyname}{Dirty image to be processed}{'dirty'}{Table name}
\ahaddarg{psfname}{point spread function to be processed}{'psf'}{Table name}
\end{ahargs}
\ahreturns{deconvolver tool}
\begin{ahexample}
\begin{verbatim}
deco:=deconvolver('3C273XC1.dirty', '3C273XC1.psf')      
deco.clean(model='3C273XC1.clean', niter=10000, gain=0.2)
deco.close()
\end{verbatim}
\end{ahexample}
\end{ahconstructor}

\begin{ahconstructor}{deconvolvertester}{Construct a deconvolver tool for testing}
\begin{ahdescription}
This creates a {\tt deconvolver} tool that one can use for testing. A standard
MeasurementSet is created and then used to initialize imager, which in 
turn is used to generate a dirty image and PSF. The dataset
used is an observation of 3C273 at 8GHz using the C-configuration of
the VLA. It is part of the {\aipspp} distribution.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{filename}{Name of MS to create}{3C273XC1.ms}{String}
\ahaddarg{size}{Number of pixels on a side}{128}{Int}
\ahaddarg{stokes}{Stokes parameters to image (e.g. 'IQUV')}{'I'}{'I'|'IV'|'IQU'|'IQUV'}
\ahaddarg{coordinates}{Coordinate system to use e.g. 'j2000,'gal'}{'j2000'}{String}
\end{ahargs}
\ahreturns{deconvolver tool}
\begin{ahexample}
\begin{verbatim}
deco:=deconvolvertester(coordinates='gal',size=1024)
deco.clean(model='3C273XC1.clean');
deco.close()
\end{verbatim}
\end{ahexample}
\end{ahconstructor}

\begin{ahfunction}{open}{Open a new dirty image and PSF}
\begin{ahdescription}
Close the current images and open a new dirty image and PSF
instead. The current state of {\tt deconvolver} is retained, except for
the data selection.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{dirty}{Dirty image to be processed}{'dirty'}{Table name}
\ahaddarg{psf}{point spread function to be processed}{'psf'}{Table name}
\end{ahargs}
\ahreturns{Bool}
\end{ahconstructor}


\begin{ahfunction}{reopen}{Reopen the dirty image and PSF}
\begin{ahdescription}
Close and reopen the current dirty and PSF images, and make
new convolvers and cleaners.  The main benefit of this method
is to flush the residual image and replace it with the dirty image.
\end{ahdescription}
\begin{ahargs}
\end{ahargs}
\ahreturns{Bool}
\end{ahconstructor}

\begin{ahfunction}{close}{Close the deconvolver tool}
\begin{ahdescription}
This is used to close {\tt deconvolver} tools. Note that the
data is written to disk. The {\tt deconvolver} process keeps running
until a \ahlink{done}{deconvolver:deconvolver.done} tool function call is performed.
\end{ahdescription}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco:=deconvolver('3C273XC1.dirty', '3C273XC1.psf')      
deco.clean(model='3C273XC1.clean');
deco.close()
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{done}{Terminate the deconvolver process}
\begin{ahdescription}
This is used to totally stop the {\tt deconvolver} process. It is a good idea
to conserve memory use on your machine by stopping the process once
you no longer need it.
\end{ahdescription}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco:=deconvolver('3C273XC1.dirty', '3C273XC1.psf')      
deco.clean(model='3C273XC1.clean');
deco.close()
deco.done()
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{summary}{Summarize the current state}
\begin{ahdescription}
Writes a summary of the properties of the deconvolver to the
default logger. This includes:
\begin{itemize}
\item The names of the dirty image and PSF (set in construction or via the
\ahlink{open}{deconvolver:deconvolver.open} function.
\item The current beam fit
\end{itemize}
\end{ahdescription}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco:=deconvolver('3C273XC1.dirty', '3C273XC1.psf')      
deco.summary()
\end{verbatim}
\end{ahexample}
\end{ahfunction}


\begin{ahfunction}{boxmask}{Construct a mask from blc, trc}
\begin{ahdescription}
A mask image is an image with the same shape as the other images but
with values between 0.0 and 1.0 as a pixel value. Mask images are used in
deconvolver to control the region selected in a deconvolution. 

In the Clark CLEAN, the mask image can usefully have any value between
0.0 and 1.0. Intermediate value discourage but do not rule out
selection of clean components in that region. This is accomplished by
multiplying the residual image by the mask prior to entering the minor
cycle. Note that if you do use a mask for the Clark or Hogbom Clean,
it must cover only a quarter of the image. boxmask does not enforce
this requirement.

\end{ahdescription}
\begin{ahargs}
\ahaddarg{mask}{name of mask image}{}{String}
\ahaddarg{blc}{Bottom left corner}{[1,1,1,1]}{Vector}
\ahaddarg{trc}{Top right corner}{image shape}{Vector}
\ahaddarg{value}{Value to fill in}{1.0}{Float}
\end{ahargs}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco.boxmask(mask='bigmask', blc=[56,45,1,1], trc=[87,93,4,1])
deco.clean(mask='bigmask', model='3C273XC1.clean.masked', niter=1000)
\end{verbatim}
\end{ahexample}
\begin{ahcomments}
Makes the image bigmask, and then sets it to unity for all points in
the region bounded by the blc and trc.  Then cleans using it as the
mask.
\end{ahcomments}
\end{ahfunction}


\begin{ahfunction}{clipimage}{Zero all pixels where Stokes I is below
a threshold}
\begin{ahdescription}
All pixels in the image with Stokes I less than some threshold
are set to zero. This is useful prior to self-calibration where one 
oftens wishes to remove negative pixels from the model. Note that
if the image has polarization information, then the polarized
part of a pixel is also set to zero if Stokes I is less than the
threshold.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{image}{name of image}{}{String}
\ahaddarg{threshold}{Threshold}{'0Jy'}{String}
\end{ahargs}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
imgr.clipimage(image='clean', threshold='50mJy')
imgr.selfcal(cal='mycal', model='clean');
\end{verbatim}
\end{ahexample}
\end{ahfunction}
%




\begin{ahfunction}{clarkclean}{Make a clean image using the Clark Clean
a threshold}
\begin{ahdescription}

In the Clark Clean algorithm, the cleaning is split into minor and major
cycles. In the minor cycles only the brightest points are cleaned,
using a subset of the point spread function.  In the major cycle, the
points thus found are subtracted correctly by using an FFT-based
convolution.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{niter}{Number of iterations}{1000}{Int}
\ahaddarg{gain}{Loop Gain for CLEANing}{0.1}{Double}
\ahaddarg{threshold}{Flux level at which to stop CLEANing}{'0Jy'}{Quantity}
\ahaddarg{displayprogress}{Display the progress of the cleaning?}{F}{Bool}
\ahaddarg{model}{Name of images}{}{String}
\ahaddarg{mask}{Name of mask images used for CLEANing}{}{String}
\ahaddarg{histbins}{Number of bins in the pixel-flux histogram}{500}{Int}
\ahaddarg{psfpatchsize}{Size of PSF for minor cycle}{[51,51]}{Vector of Int}
\ahaddarg{maxextpsf}{maximum external sidelobe, used to set depth of minor cycle clean}{0.2}{Double}
\ahaddarg{speedup}{Cleaning speedup exponent}{0}{Int}
\ahaddarg{maxnumpix}{Maximum number of pixels used in each minor cycle}{10000}{Int}
\ahaddarg{maxnummajcycles}{Max number of major cycles; -1 = no restrictions}{-1}{Int}
\ahaddarg{maxnummineriter}{Max number of minor iterations; -1 = no restrictions}{-1}{Int}
\end{ahargs}
\ahreturns{Bool}
\end{ahfunction}

%----------------------------------------------------------------------------
\begin{ahfunction}{dirtyname}{Return the name of the dirty-image table}
\end{ahfunction}
%----------------------------------------------------------------------------
\begin{ahfunction}{psfname}{Return the name of the PSF-image table}
\end{ahfunction}
%----------------------------------------------------------------------------
\begin{ahfunction}{make}{Make an empty image}
\begin{ahdescription}
Make an empty image with the properties (co-ordinate system etc.)
borrowed from the dirty image.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{image}{Name of the new image on the disk}{''}{String}
\ahaddarg{async}{Run asynchronously in the background?}{!dowait}{Bool}
\end{ahargs}
\end{ahfunction}
%----------------------------------------------------------------------------
\begin{ahfunction}{convolve}{Convolves an image with the PSF}
\begin{ahdescription}
Convolves an image (e.g., the model image) with the PSF
\end{ahdescription}
\begin{ahargs}
\ahaddarg{convolvemodel}{Name of the output image on the disk to hold the
result of the convolution}{''}{String}
\ahaddarg{model}{The input image to be convolved with the PSF}{''}{String}
\end{ahargs}
\end{ahfunction}
%----------------------------------------------------------------------------
\begin{ahfunction}{makegaussian}{Make an image with a single gaussian
component}
\begin{ahdescription}
Make a model image with the a single gaussian.  The
properties of the output image (e.g. the co-ordinate system, etc.) are
borrowed from the dirty image.

The image is made as follows:

   I(x,y)= Delta function of unit amplitude at (0,0)

   Temp(x,y) = Gaussian(x,y,Amplitude, Center, Sigma, PA)

   I(x,y) = Convovlution of Temp(x,y) with I(x,y).

If {\tt normalize=T} I(x,y) = I(x,y)/(area under the gaussian).

\end{ahdescription}
\begin{ahargs}
\ahaddarg{gaussianimage}{Name of the output image on the disk}{''}{String}
\ahaddarg{bmaj}{The major axis of the gaussian}{'0rad'}{String}
\ahaddarg{bmin}{The minor axis of the gaussian}{'0rad'}{String}
\ahaddarg{bpa}{The Position Angle of the gaussian}{'0deg'}{String}
\ahaddarg{normalize}{Normalize the area under the gaussian to 1.0?}{T}{Bool}
\ahaddarg{async}{Run asynchronously in the background?}{!dowait}{Bool}
\end{ahargs}
\end{ahfunction}
%----------------------------------------------------------------------------
\begin{ahfunction}{type}{Return the type of the of the tool}
\begin{ahdescription}
Always returns the string ``deconvolver''.
\end{ahdescription}
\end{ahfunction}
%----------------------------------------------------------------------------
\begin{ahfunction}{id}{Return the Glish ID of the tool}
\begin{ahdescription}
\end{ahdescription}
\end{ahfunction}
%----------------------------------------------------------------------------
\begin{ahfunction}{state}{Return the ``state'' of the tool}
\begin{ahdescription}
Prints the name of the Dirty Image and the PSF and the parameters of
the gaussian fitted to the main lobe of the PSF (the ``Clean Beam'').
\end{ahdescription}
\end{ahfunction}
%----------------------------------------------------------------------------
\begin{ahfunction}{updatestate}{[A GUI builders related function]Update the GUI to reflect the currect state}
\begin{ahdescription}
Updates the GUI to reflect the currect state of the tool.  This
function is used by toolmanager.  See documentation of the toolmanager
for details about ``methods'' used to update the GUI.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{f}{Glish variable for the GUI to be updated}{''}{}
\ahaddarg{method}{The method to be used for
updating}{'INIT'}{'INIT','DONE',or 'close'}
\end{ahargs}
\end{ahfunction}
%----------------------------------------------------------------------------

\begin{ahfunction}{pixon}{Deconvolve using the Pixon algorithm}
\begin{ahdescription}
Makes a image using the Pixon algorithm. According to its developers,
the pixon method is:

\begin{quote}
a new way of viewing the problem of modeling the underlying, unblurred,
noise-free image. The goal of the [new] Pixon method model was to
construct the simplest, i.e. smoothest, model for the image that would
be consistent with the data, i.e. have an acceptable chi-square
fit. Being the simplest model, the derived image would be artifact
free, i.e. there would be no spurious sources, since by construction
the simplest model eliminates unneeded structures. In addition, the
model would necessarily be a "critical" model, i.e. most tightly
constrained by the data, and consequently have the most accurately
determined parameters.
\end{quote}

In the simplest terms, the pixon method smooths a model locally as
much as is allowed by the specified noise level. This, like all
high performance estimation methods, the pixon approach works
best when the noise level is known and well-characterized.

The Pixon algorithm is available via an IDL library courtesy of the
\htmladdnormallink{Pixon LLC}{\pixonURL}. This means that you must
have the library and IDL installed on your computer. The Pixon library
is available free of charge for your personal scientific use direct
from \htmladdnormallink{Pixon LLC}{info@pixon.com}. IDL is available
commercially from \htmladdnormallink{RSI}{\rsiURL}.

\end{ahdescription}
\begin{ahargs}
\ahaddarg{sigma}{Noise level to try to achieve}{'0.001Jy'}{String}
\ahaddarg{model}{Name of image}{}{String}
\ahaddarg{imageplane}{Is this an image plane problem (like single dish)?}{F}{Bool}
\ahaddarg{async}{Run asynchronously in the background?}{!dowait}{Bool}
\end{ahargs}
\ahreturns{Bool}
\end{ahfunction}



\begin{ahfunction}{clean}{Make a clean image with Hogbom or MultiScale Clean}
\begin{ahdescription}

Makes a clean image using either the Hogbom or MultiScale
algorithms. The MultiScale algorithm is the default. The clean is
performed on the residual image calculated from the dirty image minus
the point spread function convolved with the model currently selected.
Thus if you want to restart a clean, simply set the model to the model
that was previously produced by clean.

Rather than explicit CLEAN boxes, mask images are used to constrain
the region that is to be deconvolved. To make mask images,
use either \ahlink{boxmask}{deconvolver:deconvolver.boxmask} (to define a mask
via the corner locations blc and trc) or 
\ahlink{mask}{deconvolver:deconvolver.mask} (to define a mask via
thresholding an existing image). The default mask is the inner quarter
of the image.

The CLEAN deconvolution is joint in whatever Stokes parameters are
present. Thus it searchs for peaks in either $I$ or $I+|V|$ or
$I+\sqrt{Q^2+U^2+V^2}$, the rationale for the latter two forms being
to be biased towards finding strongly polarized pixels first (these
forms are also the maximum eigenvalue of the coherency matrix).  The
PSF is constrained to be the same in all polarizations (a feature of
this implementation, not of the Hamaker-Bregman-Sault formalism).

The clean algorithms possible are:
\begin{description}
\item[Hogbom] The classic algorithm: delta function units of emission
are found iteratively by searching for the peak. Each point is
subtracted from the full residual image using the shifted and scaled
point spread function.

\item[Multi-Scale] As the Multi-Scale Clean algorithm is quite new,
 we provide entensive information on its use.

In the Multi-scale Clean, the image is cleaned simultaneously with
several different beams given by the point spread function convolved
with components of various shapes and sizes.  The components we use in
this implementation are upside-down paraboloids multiplied by first
order spheroidal functions (ie, the same functions used in gridding
Fourier plane data).  The paraboloids are truncated at zero, and the
multiplication by the spheroidal function results in a smooth shape
with minimal power at long baselines.  This shape is scaled to the
component sizes specified in
\ahlink{setscales}{deconvolver:deconvolver.setscales}.  As these
functions have finite extent (unlike a Gaussian), they can easily be
used with mask images.

For each iteration, the scale size which is able to subtract the most
flux is chosen (but with a caveat, see below).  The model is then
built up out of the spheroidal functions of the various scale
sizes. The scale sizes are set by the
\ahlink{setscales}{deconvolver:deconvolver.setscales} function, which
will permit the user to specify the scale sizes explicitly, or will
optionally take the number of scale sizes to clean for and calculate
the scale sizes themselves from a power law.

Most images deconvolved with Multi-scale Clean will be dominated by
extended structure, and the largest scale size will initially remove
the most flux from the dirty image.  As the algorithm reduces the
residuals on the largest scale, the residuals on the smaller scales
will also be reduced, even without cleaning on those size scales (a
falling sea sinks all boats).  However, at some point, the residual
image will be dominated by features on smaller size scales.  These
smaller features will be both positive and negative (ie, to correct
for the largest size scale being the wrong shape for the true emission
features).  Later in the algorithm, the magnitude of the residuals on
all scales will be approximately equal.  At this stage, most of the
deconvolvable flux has been assimilated into the largest scale size
components and detailed corrections to the large scale components must
be made.  At this point, the user may consider switching to a faster
algorithm such as the Clark Clean.

Masking is fully available with Multi-scale Clean.  No component is
permitted to place any of its wings outside of the user-supplied
mask.  If the masking were based upon the different scale components'
center positions, then the large scale components could place their
wings outside the mask, but the smaller scale components would
not be able to make fine scale corrections.  Hence, the
Multi-scale Clean uses a different mask for each different size
scale internally.  If the mask is too restrictive or the scales
are too large, the algorithm may not be able to fit the large
scales into the mask at all, and the user is warned of this
condition.

Traditional Clean algorithms use a small loop gain such as 0.1 to
avoid confusing emission and sidelobes when extended emission is
present.  However, as MultiScale Clean can image large extended
structure in a single spheroidal component, a loop gain in the range
0.5 to 1.0 can be used.  If the largest residual oscillates between
positive and negative with iteration number, as it can for some
brightness distributions which include point sources, a lower loop
gain will improve the imaging and the convergence.

A mild bias favoring cleaning small scale emission has been built into
the Multi-scale algorithm.  To illustrate the requirement of this bias,
consider the case of a bright point source with very faint extended
emission.  Each scale may find its optimal component to subtract at
the position of the bright point source, but each successively larger
component will integrate more extended flux.  Hence, the largeest
scale component will be removed from the residuals.  If most of the
flux were in the point source, then several smaller negative
components must be subtracted from the largest component, and finally
the point component itself may be removed after the extended emission
has been taken care of.  To prevent this situation from occurring,
we bias the selection of small-sized components.


\end{description}

Note that for all of these functions except fullmsclean, only a
quarter of the image may be cleaned. If no mask is set, then the
cleaned region defaults to the inner quarter. If a mask larger than a
quarter of the image is set, then only the quarter starting at the
bottom left corner is used. Algorithm fullmsclean will deconvolve the
entire field. This is useful when performing a limited accuracy 
deconvolution (as needed for example in wide-field imaging) but will
diverge if pushed too deep.

The clean threshold may be either absolute ('0.5Jy') or relative
('1\%').

\end{ahdescription}
\begin{ahargs}
\ahaddarg{algorithm}{Algorithm to use}{'msclean'}{String:'hogbom'|'msclean'|'fullmsclean'}
\ahaddarg{niter}{Number of Iterations, set to zero for no CLEANing}{1000}{Int}
\ahaddarg{gain}{Loop Gain for CLEANing, try 0.7 for msclean or fullmsclean}{0.1}{Double}
\ahaddarg{threshold}{Flux level at which to stop CLEANing}{'0Jy'}{String}
\ahaddarg{model}{Name of images}{}{String}
\ahaddarg{mask}{Name of mask images used for CLEANing}{}{String}
\ahaddarg{async}{Run asynchronously in the background?}{!dowait}{Bool}
\end{ahargs}

\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco.clean(image='3C273XC1.clean.image', model='3C273XC1.clean.model',
mask='3C283XC1.mask', niter=1000, gain=0.25, threshold=0.03)
\end{verbatim}
\end{ahexample}
\end{ahfunction}



%
\begin{ahfunction}{setscales}{Set the scale sizes for MultiScale Clean}
\begin{ahdescription}
Set the scale sizes, all required PSF's and Dirty Images for
MultiScale Clean will be calculated.
You can either give the number of scales, in which case the the scale
sizes are set via a power law, or give a vector of scale sizes in pixels.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{scalemethod}{Method by which scales are set}{nscales}{String: 'nscales'|'uservector'}
\ahaddarg{nscales}{Number of scales}{5}{Int}
\ahaddarg{uservector}{Vector of scale sizes to use}{[0, 3, 10]}{Vector of Doubles}
\end{ahargs}

\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco.setscales(6);
\end{verbatim}
\end{ahexample}
\end{ahfunction}

%
\begin{ahfunction}{ft}{Fourier transform the specified model}
\begin{ahdescription}
Fourier transform the specified model to an image.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{model}{Name of image}{}{strings}
\ahaddarg{transform}{Name of transform image}{}{strings}
\ahaddarg{async}{Run asynchronously in the background?}{!dowait}{Bool}
\end{ahargs}

\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco.ft(model='3C273XC1.nnls.model', transform='3C273XC1.nnls.model.ft')
\end{verbatim}
\end{ahexample}
\begin{ahcomments}
Fourier transforms the model in the image 3C273XC1.nnls.model
\end{ahcomments}
\end{ahfunction}

\begin{ahfunction}{restore}{Restore the residuals}
\begin{ahdescription}
Restore the residuals to a smoothed version of the model. The model
images are convolved with the specified Gaussian beam and then the
residual images are added.  If the beam is not supplied, one will
be fit to the PSF.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{model}{Name of input model}{}{String}
\ahaddarg{image}{Name of output restored image}{}{String}
\ahaddarg{bmaj}{Major axis of beam}{}{Quantity record}
\ahaddarg{bmin}{Minor axis of beam}{}{Quantity record}
\ahaddarg{bpa}{Position angle of beam}{}{Quantity record}
\ahaddarg{async}{Run asynchronously in the background}{!dowait}{Bool}
\end{ahargs}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco.restore(model='3C273XC1.clean', image='3C273XC1.clean.restored',
bmaj='2.0arcsec', bmin='2.0arcsec')
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{residual}{Find the residuals}
\begin{ahdescription}
Calculate the residuals corresponding to the model.
componentlist. 
\end{ahdescription}
\begin{ahargs}
\ahaddarg{model}{Names of input models}{}{String}
\ahaddarg{image}{Names of output residual images}{}{String}
\ahaddarg{async}{Run asynchronously in the background}{!dowait}{Bool}
\end{ahargs}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco.residual(model='3C273XC1.clean', complist='3C273XC1.cl',
image='3C273XC1.clean.residual')
\end{verbatim}
\end{ahexample}
\end{ahfunction}

\begin{ahfunction}{smooth}{smooth the image}
\begin{ahdescription}
The model image is convolved with the specified Gaussian beam.  By
default (normalize=T), the beam volume is normalized to unity so that
the smoothing is flux preserving. The smoothing used in restoration is
not normalized.
\end{ahdescription}
\begin{ahargs}
\ahaddarg{model}{Name of input model}{}{String}
\ahaddarg{image}{Name of output smoothed image}{}{String}
\ahaddarg{bmaj}{Major axis of beam}{}{Quantity record}
\ahaddarg{bmin}{Minor axis of beam}{}{Quantity record}
\ahaddarg{bpa}{Position angle of beam}{}{Quantity record}
\ahaddarg{normalize}{Normalize volume of psf to unity}{T}{Bool}
\ahaddarg{async}{Run asynchronously in the background}{!dowait}{Bool}
\end{ahargs}
\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
- deco.smooth(model='3C273XC1.clean', image='3C273XC1.clean.restored',
bmaj='2.0arcsec', bmin='2.0arcsec')
\end{verbatim}
\end{ahexample}
\end{ahfunction}
%
\begin{ahfunction}{mem}{Make the mem image}
\begin{ahdescription}
Makes a mem image using the Cornwell-Evans algroithm, using either
maximum entropy (entropy) or maxmimum emptiness (emptiness).  The
maximum entropy algorithm is the default.  You can restart a MEM
deconvolution on an existing model image, but the alpha and beta
parameters are not yet saved.

Mask images can be used to restrict where the algorithm puts flux.  A
prior, or bias, image can provide a priori information to the
algorithm and effectively limit the support as well as a mask.  The
prior image can be constructed by smoothing an existing estimate for
the brightness distribution and clipping.  Any pixel values below 1e-6
will be clipped to this level, so zero or negative pixels will not
cause problems.

Currently, only one Stokes parameter may be deconvolved at a time.
Stokes $I$ images can be deconvolved with either maximum entropy 
or maxmimum emptiness.  Stokes $Q$, $U$, or $V$ should be deconvolved
with maxmimum emptiness, which permits negative pixel values.
Joint polarization MEM deconvolution is planned for the future.

The mem entropies possible are:
\begin{description}
\item[entropy]  The smoothness of the image, relative to some
prior (also called default or bias) image is maximized.  
The functional form of the entropy is $H = \sum I ln (I/M)$,
where $I$ is the mem image brightness and $M$ is the prior image.
As the prior image is positive definite, the entropy constrains the mem 
image pixels to be positive, hence only stokes $I$ can be imaged.
\item[emptiness] The number of pixels with absolute value of the flux
greater than the noise level is minimized.  This treats positive
and negative pixel values equally, so it is appropriate for any
Stokes image.
\end{description}

This MEM algorithm works in the image plane (ie, is ignorant of
visibility data), but performs the convolution by multiplication in
the Fourier plane.  Not to be confused with this usage of the term
"image plane", some problems are "image plane" problems, such as a
single dish performing On-The-Fly mapping.  Independent noise is added
at each integration as the beam sweeps over the object (ie, in the
image plane).  This can lead to a noise signal at non-physically large
spatial frequencies.  This non-physical signal can be removed by
convolving the residual image with the PSF.  Also key to this problem
is that the PSF is of finite extent, permitting the deconvolution of
nearly the entire dirty image rather than just the inner quarter.
These options are accessed by setting {\tt imageplane} to T.


\end{ahdescription}
\begin{ahargs}
\ahaddarg{entropy}{entropy to use}{'entropy'}{String:'entropy'|'emptiness'}
\ahaddarg{niter}{Number of Iterations, set to zero for no MEMing}{20}{Int}
\ahaddarg{sigma}{Noise level to try to achieve}{'0.001Jy'}{String}
\ahaddarg{targetflux}{Total image flux to try to achieve}{'1.0Jy'}{String}
\ahaddarg{constrainflux}{Use targetflux as a constraint? (or starting flux)}{F}{Bool}
\ahaddarg{model}{Name of input/output model image}{}{String}
\ahaddarg{prior}{Name of prior (default) image used for mem}{}{String}
\ahaddarg{mask}{Mask image restricting emission (all pixels 0 or 1)}{}{String}
\ahaddarg{imageplane}{Is this an image plane problem (like single dish)?}{F}{Bool}
\ahaddarg{async}{Run asynchronously in the background?}{!dowait}{Bool}
\end{ahargs}

\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco.mem(entropy='entropy', niter=30, sigma=0.01, targetflux=10.0,
model='3C273XC1.mem.image', prior='3C283XC1.prior')
\end{verbatim}
\end{ahexample}
\end{ahfunction}
%

%
\begin{ahfunction}{makeprior}{Make the mem's prior image, or make a mask}
\begin{ahdescription}
Makes a prior image for the mem function.  A general way to make a
prior image is to start with a low resolution image, obtained
from a smaller array configuration or a lower frequency observation,
from another image which has been smoothed, or from a single dish
image.  The low resolution image can then be doctored via clipping
and regioning to make it acceptable for the mem function.

Currently, only one Stokes parameter may be used at a time.

\end{ahdescription}
\begin{ahargs}
\ahaddarg{prior}{output prior image}{}{String}
\ahaddarg{templateimage}{starting point for prior image}{}{String}
\ahaddarg{clipfrom}{Clip any pixel below this level}{'0.0Jy'}{String}
\ahaddarg{clipto}{Any clipped pixel will be given this value}{'0.0Jy'}{String}
\ahaddarg{blc}{Bottom left hand corner for box; outside box is clipped}{}{integer[]}
\ahaddarg{trc}{Top right hand corner for box; outside box is clipped}{}{integer[]}
\ahaddarg{async}{Run asynchronously in the background?}{!dowait}{Bool}
\end{ahargs}

\ahreturns{Bool}
\begin{ahexample}
\begin{verbatim}
deco.makeprior(prior='3C283XC1.prior', templateimage='3C283XC1.mem.smooth',
clipfrom='0.01Jy', clipto='0.0001Jy', blc=[100,100], trc=[150,150])
\end{verbatim}
\end{ahexample}
\end{ahfunction}
%

\end{ahobject}
%
\end{ahmodule}

\end{document}
