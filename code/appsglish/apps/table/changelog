
<change id=0005>
 <author> Ger van Diepen </author>
 <date> 2000/05/22 </date>
 <avers> 1.4 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> table </module>
 <type> Code Documentation </type>
 <category> Change </category>
 <defects>  </defects>
 <summary>
Added support for maximum string length
 </summary>
 <description>
It is now possible to define the maximum string length when setting up
the description of a column. For this purpose the argument
<code>maxlen</code> has been added to the functions setting up the
description of a scalar or array column.
<br>The new storage manager StandardStMan supports the maximum string length.
 </description>
</change>

<change id=0097>
 <author> Ger van Diepen </author>
 <date> 2001/05/29 </date>
 <avers> 1.6 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> table </module>
 <type> Code </type>
 <category> New </category>
 <defects> 2581 </defects>
 <summary>
Added support for variable shaped arrays
 </summary>
 <description>
Functions getvarcol and putvarcol have been added to table.g.
getvarcol returns a record where each field contains the value of
a row. So variable shaped arrays are supported in that way.
Furthermore, if the table value is undefined, the unset value is returned in that record field.
putvarcol takes a record as returned by getvarcol. A field with
an unset value is not put.
See table.help for the functions descriptions.
 </description>
</change>

<change id=0112>
 <author> Ger van Diepen </author>
 <date> 2002/01/08 </date>
 <avers> 1.7 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> table </module>
 <type> Code </type>
 <category> New </category>
 <defects> 3291 </defects>
 <summary>
Extended tablefromascii functionality
 </summary>
 <description>
tablefromascii has been improved considerably:

1. It is possible to skip (comment) lines in the input file in two ways:
   - by specifying the first and/or last line to read
   - by specifying a regular expression matching the start of a line
     (acting as a comment marker).

2. It is possible to store data as arrays in a column:
   - if autoheader=T a shape can be given telling if the data in each input
     line has to be stored as scalars or as an array.
   - if autoheader=F a shape can be given after the format of a column
     (e.g. I2,5 for a 2-dim integer array with shape [2,5]).
   In both cases it is possible to have variable length arrays.

See table.help for more information.
 </description>
</change>

<change id=0113>
 <author> Ger van Diepen </author>
 <date> 2002/01/15 </date>
 <avers> 1.7 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> table </module>
 <type> Code </type>
 <category> New </category>
 <defects>  </defects>
 <summary>
added indexing
 </summary>
 <description>
The tableindex tool has been added to table.g.
It makes it possible to build an index on a table from one or more columns. Thereafter the index can be used to find the row numbers of the rows containing given values in the indexed columns.
Finding row numbers can be done for a single value or for a value range.

The index can be built for one or more scalar columns or for a single
array column. In the latter case a row is found if one of the values in its array matches the search values.

See the help on the table tool for more info.
 </description>
</change>

<change id=0161>
 <author> Ger van Diepen </author>
 <date> 2004/11/09 </date>
 <avers> 1.9 </avers>
 <area> Tool </area>
 <package> appsglish </package>
 <module> table </module>
 <type> Code </type>
 <category> New </category>
 <defects>  </defects>
 <summary>
addition of CALC command in TaQL
 </summary>
 <description>
TaQL has been extended with the CALC command.
It makes it possible to give an expression on a table and get the result
back as a record, vector, or scalar.
E.g.
	vec:=t.calc('sum(FLAG)')

See the help on the table tool for more info.
 </description>
</change>
