\documentclass{article}
\usepackage{html,makeidx,epsf}
\pagestyle{headings}

\textheight  8.5truein
\textwidth   6truein
\topmargin   0.25truein
\oddsidemargin 0.25truein
\evensidemargin 0.25truein


%
% define hyperlink URLs:
%

\newcommand{\thisdocURL}{http://aips2.nrao.edu/aips++/docs/project/releasenotes11/releasenotes11.html}
\newcommand{\previousbetaURL}{../releasenotes09/releasenotes09.html}
\newcommand{\searchURL}{../../html/aips2search.html}
\newcommand{\aipsviewURL}{../../user/aipsview/aipsview.html}
\newcommand{\GlishmanualURL}{../../reference/Glish/Glish.html}
\newcommand{\GlishtutorialURL}{../../notes/195/195.html}
\newcommand{\gsURL}{../../html/gettingstarted/gsedition2/gsedition2.html}
\newcommand{\userrefmanualURL}{../../user/Refman/Refman.html}
\newcommand{\specsURL}{../../specs/specs.html}
\newcommand{\betaURL}{../beta/beta.html}
\newcommand{\consortiumURL}{../consortium.html}
%
% URL to Help system
%
\externallabels{../../user/Refman}{../../user/Refman/labels.pl}

\begin{document}

\title{{\bf AIPS++ Beta Release 1.1: release notes}}

\author
{
AIPS++ Project\\
National Radio Astronomy Observatory\\
P.O. Box O, Socorro, NM, 87801, USA
}

\date{{Text last updated: 1998 October 16}\\
{HTML version available at:}\\
\texttt{{\thisdocURL}} 
}

\markright{AIPS++ Beta Release 1.1: release notes}
\maketitle

\tableofcontents

\section{Purpose}

This document is a guide for beta testers of AIPS++ release 1.1. It is
intended to describe the installation procedures, outline the current
capabilities of AIPS++, and to describe what feedback we would like
from beta testers.

The content of this document is close to that of the 
\htmladdnormallink{release notes}{\previousbetaURL}
for AIPS++ release 0.9. The main changes are to describe the new
functionality.

\section{Planned releases of AIPS++}

It is important to understand the role of this beta release in the
development of AIPS++.  AIPS++ is continuing development at the various
\htmladdnormallink{AIPS++ consortium sites}{\consortiumURL}, and
rapidly evolving versions of the AIPS++ system are to be found at the
consortium sites. A release is a snapshot of the development system
that is suitable for export to other sites. We plan to make two major
releases, one in mid 1999 and one in late 1999 or early 2000.  Both of
these will be preceded by explicit ``beta'' releases. The release
described here is is the third beta release: AIPS++ Version 1.1. The
expected set of releases are thus:

\begin{description}
\item{AIPS++ V0.8: beta release (issued February 26 1997)}
\begin{itemize}
\item Targeted to consortium sites and a few friendly astronomers
\item Contains basic environment, tools, synthesis applications.
\end{itemize}
\item{AIPS++ V0.9: beta release (issued September 12, 1998)}
\begin{itemize}
\item Rectify problems from V0.8
\item Add spectral line functionality to synthesis processing
\item Other tools 
\end{itemize}
\item{AIPS++ V1.1: beta release (this release)}
\begin{itemize}
\item Rectify problems from V0.9
\item Preview GUI for feedback before release
\item Contains basic environment, tools, synthesis and single dish 
applications.
\item GUI frontends to major objects and applications
\end{itemize}
\item{Monthly releases of stable versions}
\begin{itemize}
\item Rapid response to bugs
\item Trickle out new functionality
\end{itemize}
\item{AIPS++ V1.?: First Public Release (Expected mid 1999)}
\begin{itemize}
\item Full synthesis package (including a VLA filler and  some 
functionality for VLBI)
\item Single dish package
\item Image Analysis package
\item Visualization toolkit and applications
\item General toolkit
\end{itemize}
\item{AIPS++ V2.0: Second Public Release (Expected late 1999 or early 2000)}
\end{description}

We use the term beta release to denote a distribution of the system to
a limited number of people who have agreed to test the system and
report problems and general comments.  The principal goals of the beta
releases are to provide astronomers with a first look at
functionality in a number of different areas: synthesis, image
analysis, general tool-kit, and for the AIPS++ Project to get
experience with distribution and support of AIPS++ outside consortium
sites.

Note that after this beta release, we will switch to a new approach of
releasing binaries for the latest stable build. This shift reflects
the stabilization of the AIPS++ infrastructure as well as an increased
emphasis on applications development and attracting new users. We hope
to be able to make stable releases at a rate of about one per
month. Our hope is that this would enable beta-testers to use the
system more frequently. We will distribute information on how to
download these binaries later.

More specific description of what we expect to learn from beta-testers
is given below. First, we describe the current capabilities of AIPS++
and how to install it.

\section{Current capabilities of AIPS++}

In this section, we provide a brief overview of the capabilities
of AIPS++, describing both what is present in the system, and what we
have not yet delivered.

\subsection{What is present}

\begin{itemize}
\item All user capabilities of AIPS++ are documented via the
\htmladdnormallink{AIPS++ User Reference Manual}{\userrefmanualURL}.
\item The heart of AIPS++ is a powerful command line interpreter
called Glish (see Appendix A for copyright information). Glish has both a
\htmladdnormallink{tutorial}{\GlishtutorialURL} and a
\htmladdnormallink{reference manual}{\GlishmanualURL}.
\item Apart from the Glish command line interface, we also have
graphical user interfaces for most user-visible objects. These
represent a large investment of effort in direct response to
our earlier beta releases where we learnt that users needed simpler
interfaces.
\item In AIPS++, users do things using objects. The primary way to 
start, control and stop objects is via the Object Catalog ({\tt
objectcatalog}), whereas files are handled by the File Catalog
({\tt catalog}).
\item In AIPS++, all data are stored in Tables, and are accessible
from inside Glish via the {\tt table} object.
\item The synthesis imaging capabilities are found in the two objects
{\tt imager} and {\tt calibrater}, the principal objects for imaging
and calibration. {\tt imager}, in particular, has many features not
found in other packages, such as multi-field processing in
user-selected coordinate systems. We expect {\tt calibrater} to evolve
similarly over the next few months.
\item The Measures system developed by Wim Brouw is to our
knowledge unparalleled in the types of operations it allows
on measured quantities with units and coordinate systems.
The functionality is available via both the Glish command line
(the {\tt measures} object), and a specialized graphical user interface.
\item The single dish environment {\tt dish} is a carefully designed 
interactive tool for processing of single dish data, most particularly
spectra but other one-dimensional data formats are supported.
\item A very capable plotting tool, {\tt pgplotter}, based
on the PGPLOT subroutine library, is available and is used
by many other tools. For example, an interactive  visibility plotting
tool, {\tt visplot}, has been built on top of {\tt pgplotter}.
\item Numerous general purpose utilities for handling AIPS++ data
are present. For example, the tablebrowser (available as a function
{\tt browse} of the {\tt table} object) can edit, plot, query and
select data, and can be configured in many ways to display data as the
user desires.
\item To demonstrate the possibilities of stream-lined processing
in AIPS++, we have provided the {\tt simpleimage} object. This
walks the user through straightforward imaging of synthesis
data, first making a tapered image at low resolution and then
imaging a user-specified region at full resolution. The user
has only to select the data to be imaged, and to delimit the
full-resolution region. This is an example of the type of
packaging that we plan to incorporate in the future.
\item Introductory documentation has been written by early testers
of AIPS++, and terminology established for subsequent use throughout
the project. 
\item Extensive reference documentation is available for all
user-visible objects.
\item Programmability at the Glish level.
\end{itemize}

\subsection{What isn't present}

\begin{itemize}
\item Filling of VLA or VLBA data apart from via UVFITS. Fillers for 
other telescopes and formats ({\em i.e.} ATNF, BIMA, WSRT, UVFITS) are
present. Currently we expect you to apply AIPS++ to data that has been
initially calibrated elsewhere.
\item Efficient processing of large synthesis continuum images ({\em
e.g.} millions of pixels) or many channel ({\em e.g.} more than 64)
spectral images. Current processing is optimized towards spectral-line
observations of moderate numbers of channels.
\item Sophisticated cross-calibration capabilities.
\item Interactive flagging of visibility data.
\item A robust way to archive the MeasurementSets to FITS. The best
is to use UVFITS for synthesis data ({\tt ms.tofits}) and 
{\tt ms2sdfits} for single dish data.
\item We do not expect people to program at the C++ level using the
beta release. If you really want to do this, please contact us
separately. It can be arranged but is not supported as part of
the beta release.
\end{itemize}

\section{Installation of AIPS++}

We assume that you are installing a Beta release of the system,
complete with prebuilt binaries.  You need to refer to other
documentation if you are attempting an installation from source; such
is beyond the scope of this document.

Installation over the top of a existing version is possible but
you may wish to make a new installation.

\subsection{Before installation}

If you have an existing installation, we recommend that you write
existing MeasurementSets and Images to FITS format from where
they can be reloaded.

\subsection{What will the installation do?}

The installation process involves you downloading several compressed
(GNU-zipped) tar files from the {\tt aips2.nrao.edu} anonymous ftp server,
and running an install script (called {\tt configure}).  It will
uncompress and unpack these tar files in the right places, and you will
end up with a complete source-and-binary AIPS++ system, ready to run.  
All that will be required is the invocation of an initialization script
({\tt aipsinit.sh} or {\tt aipsinit.csh}) which you can call for
convenience in your {\tt .login} or {\tt .profile} or equivalent login
script.

\subsection{Requirements}

This beta release is targeted at a few architectures:

\begin{description}
\item[{\tt sun4sol\_gnu}] Sparc systems running Solaris 2.5 or 2.6.
\item[{\tt linux\_gnu}] Intel Pentium-class machines running Linux
(we use RedHat 5.1)
\end{description}

The C++ compilers that we use to prepare the binaries are the GNU C++
compiler (2.7) on Solaris and the EGCS compiler (1.0.2) on RedHat
5.1. You do not need to have these compilers, however, as prebuilt
binaries and libraries are provided.

While a separate account for AIPS++ is recommended, it is not required for
the installation.  Your own personal account --- assuming sufficient disk
space --- should suffice.  You will not need {\tt root} access, and should
{\it not\/} perform the installation as {\tt root}.  In addition, you will
not be required to gain access to any operating system files or
directories; everything can be done from a normal, non-privileged account.

AIPS++ uses the Caltech
\htmladdnormallink{PGPLOT}{http://astro.caltech.edu/\~{}tjp/pgplot}
package (version 5.1.0 or later) to provide various plotting
capabilities. If you already have an installation of PGPLOT, then you
can and should use that.  Otherwise, for convenience we provide a copy
of the PGPLOT library and the required font file, grfont.dat. Please
note that PGPLOT is not public-domain software. However, it is freely
available for non-commercial use. It is copyrighted by California
Institute of Technology.

Here is an approximate outline of the various hardware and software
{\bf requirements} for this release:

\begin{itemize}
\item Sparcstation IPX-class or better, preferably at least Sparc-20,
      or a Pentium class machine.
\item SunOS 5, ideally SunOS 5.5 (a.k.a. Solaris 2.5) or higher; or Linux
      2.0 or 2.1 (we use RedHat 5.1).
\item 64 Megabytes of memory (32 is workable but your system will be
	swapping most of the time)
\item About 250MB for code and documentation, and about 150MB for
the binaries (the documentation is large due to the use of
postscript files for screen views).
\item At least 100 Megabytes of swap space
\end{itemize}

While this is a minimum list, you may also want to include these optional
items:

\begin{itemize}
\item The
\htmladdnormallink{PGPLOT}{http://astro.caltech.edu/\~{}tjp/pgplot} 
        library and font file ({\tt grfont.dat}).  These are
	supplied in the binary distribution, but if you already have
	version 5.1.0 or better, you should make sure your {\tt
	PGPLOT\_FONT} and/or {\tt LD\_LIBRARY\_PATH} environment variables
	are set up for it.
\item The {\tt libtcl8.0.so} shared library.  A copy is provided in the
	binary distribution.
\item A copy of {\tt gunzip}.  The {\tt configure} script will offer to
	download and install a version for you if you do not already have
	it (or you can retrieve the version available in the
	\htmladdnormallink{Classic AIPS}{ftp://aips.nrao.edu/aips/}
	anonymous ftp directories).
\end{itemize}

\subsection{Fetching the stuff}

\begin{enumerate}
\item You will want to create an ``aips root'' directory for AIPS++, much
      as many of you have done in the past for \htmladdnormallink{Classic
      AIPS}{http://www.cv.nrao.edu/aips/}.  Create a {\tt code}
      subdirectory underneath this AIPS++ root area, and {\tt cd} to this
      subdirectory.
\item Retrieve all source savesets via \htmladdnormallink{anonymous
      ftp}{ftp://aips2.nrao.edu/pub/RELEASED/aips++1.1/} from the server
      {\tt aips2.nrao.edu} in directory
      {\tt /pub/RELEASED/aips++1.1/}.  These should include at a minimum:
      \begin{enumerate}
	\item {\tt README} (read it for last-minute changes)
	\item {\tt VERSION} (the version of AIPS++ you're getting)
	\item {\tt configure} (the installation script)
	\item {\tt aips-11.000.tar.gz} (The core of AIPS++, source code)
        \item {\tt nrao-11.000.tar.gz} (Single dish source)
      	\item {\tt doc-11.000.tar.gz} (Documentation source)
	\item {\tt docs-11.000.tar.gz} (Documentation)
	\item {\tt install-11.000.tar.gz} (Installation infrastructure)
	\item {\tt nfra-11.000.tar.gz} (NFRA specific code)
      % \item {\tt synthesis-11.000.tar.gz} (Synthesis imaging source
      %		code)
	\item {\tt trial-11.000.tar.gz} (trial, where most of the
		interesting stuff is to be found)
      % \item {\tt vlbi-11.000.tar.gz} (VLBI source code)
      \end{enumerate}
      and make sure you leave them in your {\tt code/} subdirectory.
      % should insert sizes, and maybe md5sums here.

\item Retrieve the binary archive from the same ftp server in the same
      directory.  This will be either:
      \begin{enumerate}
	\item {\tt bin-sun4sol\_gnu-11.000.tar.gz} for Solaris systems, or
	\item {\tt bin-linux\_gnu-11.000.tar.gz} for Linux/Intel systems.
      \end{enumerate}
       Place it in your {\tt code} subdirectory also. If you are using
      some other architecture, replace the architecture name ({\it
      e.g.\/}, {\tt sun4sol\_gnu}) in the above 
      filename with the relevant architecture ({\it e.g.\/}, get {\tt 
      bin-alpha\_gnu-11.000.tar.gz}). We will have {\tt sun4sol}
      and {\tt linux} available at the release.

\item Make sure the configure script is executable ({\tt chmod +x
      configure}). 
\end{enumerate}

\subsection{Running the configure script}

\subsubsection{Preliminaries}

Before you plunge in and start the installation, you may want to make some
preparations.  First, if you have a local copy of {\tt gunzip}, make sure
your {\tt PATH} environment variable includes the directory where it is
found.  If it does not by default, you can add it like this (if your shell
is one of {\tt sh}, {\tt bash}, {\tt ksh}, {\tt zsh} or some other
bourne-like shell):\par

%%% Don't want to really use description here, but I'm a TeX-er not a
%%% LaTeX-er and don't know the equivalent of:
%%% \def\example#1{{\line{\hskip 2cm {\tt #1} \hfill}}}

\begin{description}\item[]{\tt PATH=\$\{PATH\}:/wherever/bin; export PATH}
\end{description}

\noindent or if your shell is {\tt csh}, {\tt tcsh} or another C-like
shell:\par

\begin{description}\item[]{\tt setenv PATH \$\{PATH\}:/wherever/bin}
\end{description}


\noindent In the above examples, it is presumed that {\tt gunzip} is found
in the directory {\tt /wherever/bin/gunzip}.

Another variable you may wish to add to the {\tt PATH} variable is the
location of your X11 or OpenWindows software.  On Sun systems, this will
typically be in {\tt /usr/openwin}:\par

\begin{description}\item[]{\tt OPENWINHOME=/usr/openwin; export OPENWINHOME}
                   \item[]{\tt PATH=\$\{PATH\}:\$OPENWINHOME/bin}
\end{description}

\noindent or for C-shells:\par

\begin{description}\item[]{\tt setenv OPENWINHOME /usr/openwin}
                   \item[]{\tt setenv PATH \$\{PATH\}:\$OPENWINHOME/bin}
\end{description}

If you have an existing \htmladdnormallink{Classic
AIPS}{http://www.cv.nrao.edu/aips/} installation, you may want to ensure
that you have defined its environment via the {\tt LOGIN.SH} or {\tt
LOGIN.CSH} scripts first.  This will cause the {\tt configure} script
for AIPS++ to automatically generate a hosts database from the existing
AIPS information in {\tt HOSTS.LIST}, which can be a real timesaver.

Finally, if you have a favourite text editor (emacs, vi, textedit, elvis,
{\it etc\/}.), you should make sure that either the {\tt EDITOR} or {\tt
VISUAL} environment variables are set to invoke it, {\it e.g.\/}, \par

\begin{description}\item[]{\tt VISUAL=/usr/local/bin/emacs; export VISUAL}
\end{description}

\noindent or:\par

\begin{description}\item{\tt setenv VISUAL /usr/local/bin/emacs}
\end{description}

\noindent as appropriate for your shell.

\subsubsection{Running the configure script}

Make sure you are in the {\tt code} subdirectory where you left the
GNU-zipped tar files, and enter this on your Unix command line:\par

\begin{description}\item[]{\tt ./configure}
\end{description}

\noindent Then answer the questions, which are fairly routine.\par

The first thing you'll see is something like this:

\begin{verbatim}
   The 'configure' script bootstraps the AIPS++ system to a state
   where it can be used by end-users.  It will by default perform
   a binary installation, but it can be used to recursively build
   the libraries, executables, and other parts of the system.
   
   It may be used to configure AIPS++ from scratch, or to add a
   new architecture.  In the latter case the installation of the
   aipsinit scripts and databases can be skipped.
   
   You will be asked a few simple questions, most of which have
   default answers (in square brackets).  Simply type <return> to
   accept these defaults.
\end{verbatim}

If you are reading this document, then you are doing a binary
installation, you are not configuring from scratch, and you are not adding
a new architecture.  If you have previously defined an {\tt EDITOR} or
{\tt VISUAL} environment variable, you will see a notice to the effect
that {\tt configure} found this, and will use it to let you edit a few
critical files along the way.

\begin{enumerate}

\item {\bf AIPSROOT}: This is shorthand for the top-level AIPS++
      directory (the one in which you created the {\tt code}
      subdirectory); the script will ask you to verify its correctness.
      If for some reason the {\tt configure} script guesses it
      incorrectly, please enter the correct full directory name here.  If
      you do not run the script from the {\tt \$AIPSROOT/code} directory,
      you will be prompted to move there and restart the script.

\item {\bf Optional Utilities}: For a full-blown AIPS++ consortium
      installation, there are a certain number of utilities needed to make
      it fully functional; these will be listed now, and instructions will
      be presented in case you want to install any of them later.  They
      are {\it not required\/} for the binary installation, unless you
      plan on doing code development within the AIPS++ system.

\item {\bf Required Utilities}: For the from-source installation, some
      third party utilities are required.  Only one of these is needed for
      the binary installation,
      %%% make sure this is still true!  Check the code/install/configure
      %%% script... 
      namely {\tt gzip} (technically, only {\tt gunzip} is needed but both
      usually come as a package).  If {\tt configure} finds {\tt gzip} in
      your {\tt PATH}, it assumes all is well and skips on to the next
      section.  Otherwise it offers to download, build and install the
      utility for you.  Note that root or superuser access is not
      required, as it will place the {\tt gzip} {\it etc\/}. binaries it
      builds into a relevant AIPS++ directory.

\item {\bf Extract Compressed tar files}: As requested by various
      potential users and other interested parties, the beta release for
      AIPS++ is including sources as well as the binaries.  The existence
      of the source files is not required to be able to run the system.
      However, some source level packages --- such as the install {\tt
      tar.gz} saveset --- are required.  In any event, {\tt configure}
      will unpack each GNU-zipped tar file you have placed in the {\tt
      code} subdirectory automatically.  It has a manual override so that
      you can, for example, choose not to delete the tar files once they
      are unpacked. 

\item {\bf Install Binaries}: This step is essentially identical to the
      previous one, except that the binaries and libraries needed to run
      AIPS++ are unpacked for each architecture you have selected.  For
      the early beta releases, the most tested architectures are
      {\tt sun4sol\_gnu}  and {\tt linux\_gnu} (these correspond to
      Sparc systems running SunOS 5/Solaris 2 with the GNU
      {\tt g++} compiler, and Linux on Intel platforms also with the GNU
      compiler; though you do not need the compiler to run
      the AIPS++ binaries).

\item {\bf Install aipsinit}: In every AIPS++ installation, there is a
      shell script that one ``sources'' or invokes to define the
      environment necessary to run the system.  The {\tt configure} script
      automatically sets these files ({\tt aips\-init.csh} and {\tt
      aipsinit.sh}) up for you.

\item {\bf Construct aipshosts}: The AIPS++ system is flexible enough to
      permit you to alter its setup in a per-host, per-architecture, and
      per-site manner.  In order to do this, it needs to know the name and
      architecture of each computer in your AIPS++ site.  To achieve this,
      a text file called {\tt aipshosts} will be created in the {\tt
      AIPSROOT} directory.  This is the exact equivalent of the Classic
      AIPS {\tt HOSTS.LIST} file, and in fact the {\tt configure} script
      will attempt to use the information in the latter if it is found.
      If you elect not to use this info (or if it's not present or found),
      you will be asked for a site name, the architecture, and a
      description of the current host and each additional host you want to
      add to the AIPS++ site. 

\item {\bf Fetch patches/bug fixes}: {\it If you are installing for the
      first time you can ignore this item\/}.

      If you already have a binary
      installation and you wish to install a new patch you should merely
      need to fetch the latest bin- and docs- (note! plural) .tar.gz files
      and untar them from the {\tt code} directory.  Be sure to
      temporarily undo any ``noclobber'' setting in your shell to allow
      replacement of files by the (un)tar command.  The source files will
      be out of date, however for a binary installation this should be
      fine. If you want the sources to be current as well, it is
      probably best for you to reinstall from scratch.

\item {\bf Construct aips++local file}: The purpose of this file is as an
      aid to the {\tt aips++} command, so that local definitions of, {\it
      e.g.}\/, {\tt PGPLOT\_FONT} and {\tt LD\_LIBRARY\_PATH} may be made
      to accomodate the PGPLOT and other libraries needed to run the
      AIPS++ binaries.  The {\tt configure} script will check for an
      existing {\tt PGPLOT\_FONT} definition, and in its absence set it to
      point at the AIPS++ -provided location for the PGPLOT {\tt
      grfont.dat} font file.  In addition, on Sun and Linux architectures,
      a definition or revision of the
%%%   EVIL, NASTY, WICKED!  USE AT YOUR PERIL!
      variable {\tt LD\_LIBRARY\_PATH}
      will be made so that the {\tt pgplot} and {\tt tcl} shared libraries
      may be used (these are provided with the binary installation, though
      if you have local copies they will be used first).  You may have to
      edit this file to set or correct the value of this latter variable;
      in particular, you should make sure it includes the location of your
      X libraries ({\it e.g.\/}, {\tt /usr/openwin/lib} or 
      {\tt /usr/local/X11/lib}) and the library location of any local
      installation of PGPLOT.  Note that the variable should be a
      colon-delimited list of directories.

\item {\bf Construct aipsrc and makedefs}: For more generic parameters,
      these files are used.  The former generally specifies quantities
      such as the AIPS++ manager account name (this need not be a
      dedicated account) and the default printer and paper format (A4
      or Letter), while the latter is generally only of interest if
      you intend on code development or building the system from
      source.  The {\tt configure} script will ask you to edit the
      site-specific {\tt aipsrc} file and gives instructions on what
      to change; there should not be much you need to edit (just check
      what {\tt configure} did).  Hopefully the comments are clear
      enough to avoid any confusion.  The file must be edited, as {\tt
      configure} checks if the word {\tt DEFINE\_ME} has been removed
      from it before proceeding.  The number of CPUs and the memory
      should be those from a typical machine. In principle, any
      machine having substantially different numbers should have it's
      own aipsrc file, however currently AIPS++ makes little use of
      these numbers.
\end{enumerate}

At this point, you should have an AIPS++ installation that is ready for
testing.  

\subsubsection{Testing the installation}

To test the installation, use the \htmlref{assay}{utility:assay}
module:

\begin{verbatim}
.      /aips++/beta/aipsinit.sh       # For Bourne/Korn/Bash shells
source /aips++/beta/aipsinit.csh      # For C-like shells
aips++
- include 'assay.g'
- assay().trytests()
\end{verbatim}

This will run all registered test scripts in the system, and summarize
at the end which failed. The complete sequence should take about 20
minutes.

The final number printed will be the number that failed. If this is
zero, then the installation has passed the first test. If it is not,
then you need to determine which test failed and run it again {\em
e.g.} if {\tt imagertest} failed then do:

\begin{verbatim}
aips++
- include 'assay.g'
- assay().try('imagertest')
\end{verbatim}

If it is not clear why a particular test fails, then please contact us
using the mail exploder
\htmladdnormallink{aips2-beta@nrao.edu}{mailto:aips2-beta@nrao.edu}
(see below for more details).

If no tests failed then you are ready to move on to using the system.
At this point, it may be a good idea to re-read the document on
\htmladdnormallink{Getting Started in AIPS++}{../../user/gettingstarted}, and decide
what you wish to try out.

\subsection{Things That Can Go Wrong}

\subsubsection{ld.so (shared library loader) problems}

The most likely source of error on systems that support it is an incorrect
value for the environment variable {\tt LD\_LIBRARY\_PATH}.  On Sun and
Linux systems, this variable specifies additional directories to search
for unresolved shared libraries referenced in the binaries.  Your site may
not have the various system and optional shared libraries in the same
places as we do, so the binaries we generate may need this variable set to
include some of your site-specific directories before you can run certain
programs, or the aips++ system itself.

The {\tt configure} script will attempt to figure out what is needed for
this variable, and it will set and/or extend it (possibly on multiple
lines) for you in the file {\tt sun4sol\_gnu/aips++local.sh} (replace {\tt
sun4sol\_gnu} with your architecture if needed); while it tries to figure
out the right settings, it may not be correct for your environment.
%%% perhaps a note about judicious use of ldd here?

If you find the value in this file incorrect, please change it to whatever
is correct for your system.  Note that if you do not have either PGPLOT or
TCL libraries on your system, this variable will need to include the AIPS++
architecture-specific library ({\it e.g.\/}, {\tt
\$AIPSROOT/sun4sol\_gnu/lib}) as that is where they will then be found.

\section{Feedback requested from beta testers}

The purpose of the beta release is two-fold: to determine and correct
bugs, problems and deficiencies in the current software, and to
solicit general comment and feedback on AIPS++. To be successful,
both require a considerable allocation of time and patience, and
so we would like to thank you for agreeing to be a tester.

AIPS++ is a totally new package and has many features and capabilities
that most astronomers will be unfamiliar with. It has been designed in
accord with the \htmladdnormallink{AIPS++ User Requirements}{\specsURL} to
have both canned algorithms and general purpose tools. The general flavor
of the package may may seem strange (and probably irritating!) at first.
Please give it a chance. 

We suggest that you first take time to read a number of key pieces of
documentation. Please remember to keep notes on the documentation that you
read: Is it clear?  Does it cover what you need to know?  Is there jargon
present?  Do the examples actually work?

Start by reading the document on {\it\htmladdnormallink{Getting
Started in AIPS++}{../../user/gettingstarted}. Then you should be in a good position to
try out some of the examples in that document.

If that leaves you curious about Glish, then try the {\it
\htmladdnormallink{Glish tutorial}{\GlishtutorialURL}}. This document
contains a very good introduction to the use of Glish, and also
touches on some more sophisticated uses of Glish.

If you are interested in synthesis processing, then we recommend that
you read the documentation on the \htmlref{imager}{imager}. \htmlref{imager}{imager} has a test
(\htmlref{imagertest}{imager:imagertest}) that is worth running.
After running these examples, you might want to read the introductory
material for imager again.

For single dish processing, then we recommend that
you read the documentation on the \htmlref{dish}{dish}. 
\htmlref{dish}{dish} has some demonstration datasets that
can be used.

Another tool that is worth looking at in some detail is Wim Brouw's
\htmlref{measures}{measures} module. This handles conversions of
measured quantities with units and reference frames. For example, it
can be used to calculate the rising time of a source at a given 
observatory.

At this point, you should be ready to decide on a small project that
you might wish to pursue, perhaps synthesis imaging of some sort, or
processing of ascii table data using the table system, or simply image
display.

We suggest that as you proceed, you report bugs and ``features'' as
you find them using one of the various methods described in the
next section. We also need more general and wide-ranging reactions
to the software, but our experience with our testers so far is
that you should give the system a little time beforehand.

\section{How to get help on using AIPS++ and how to report bugs}

If you are having trouble doing something that you think the system
should do, and you've read the documentation, you can get a human to
help by sending a message to the AIPS++ Beta exploder {\tt
\htmladdnormallink{aips2-beta@nrao.edu}{mailto:aips2-beta@nrao.edu}}. This
mailing list will include all the beta testers, and members of the
AIPS++ Project. You should expect to receive advice from a member of
the Project within a day or less. If you see a message from one of the
other testers that you understand the answer to, please help us out
and reply. An
\htmladdnormallink{archive}{http://aips2.nrao.edu/aips++/mail/aips2-beta/index.html}
of all messages is available.

If you know what to do and it just doesn't work, then report a bug.
There are a number of ways of doing this. The easiest is to use the
{\tt bug()} command from inside AIPS++. The advantage of this approach
is that it gives us information we need about your environment. An
alternative and sometimes more straightforward approach is to use the
WWW interface to the \htmladdnormallink{AIPS++ Bug reporting
system.}{http://aips2.nrao.edu/aips++/docs/html/reportbug.html}  Please
also use this mechanism to request or suggest enhancements to the
current system. You can also review all existing bugs from the 
\htmladdnormallink{AIPS++ Gnats Page}{http://aips2.nrao.edu/aips++/daily/docs/html/navpages/communicate/reportabug.html}.

Finally, if you are totally frustrated and everything else has failed,
contact Tim Cornwell (505 835 7333,
\htmladdnormallink{tcornwel@nrao.edu}{mailto:tcornwel@nrao.edu})
or Athol Kemball (505 835 7330, 
\htmladdnormallink{akemball@nrao.edu}{mailto:akemball@nrao.edu})

\section{Known problems}

We are aware of the following problems, which will be fixed
in the next binary release:

\begin{description}
\item[visplot] Makes too many plots in some circumstances.
Workaround: None.
\item[imager] Cannot deal with primary beams other than VLA and
WSRT. Mosaic CLEAN slow due to use of excessively large FFT
region compared to the primary beam, and non-optimized primary
beam application. Workaround: None.
\item[imager] For data with extra copies of the AN file (as from
data DBCONed in AIPS), correction of the parallactic angle
(during the construction of {\tt imager}) takes an exorbitant amount 
of time. Workaround: Remove extra copies before exporting from AIPS.
\item[objectcatalog and catalog] Interacts badly with GNU ls. We're
investigating why this occurs. Workaround: Put other ls first in
PATH.
\end{description}

\section{Changes visible to users}

\subsection{Changes between 1.1.01 and 0.9.01}

Many, many things have changed substantially. We recommend that
you jettison 0.9.01 completely.

\section{Acknowledgements}

We thank Tim Pearson and Martin Shepherd for allowing use of 
\htmladdnormallink{PGPLOT}{http://astro.caltech.edu/\~{}tjp/pgplot},
and for help with the Glish binding to PGPLOT. 

\section*{Appendix A: Glish Copyright}

Glish is covered by the following copyright:

{\em
	Copyright (c) 1993 The Regents of the University of California.

	All rights reserved.

	Copyright (c) 1997,1998,1999 Associated Universities Inc.

	All rights reserved.

	This code is derived from software contributed to Berkeley by
	Vern Paxson and software contributed to Associated Universities
	Inc. by Darrell Schiebel.

	The United States Government has rights in this work pursuant
	to contract no. DE-AC03-76SF00098 between the United States
	Department of Energy and the University of California, contract
	no. DE-AC02-89ER40486 between the United States Department of Energy
	and the Universities Research Association, Inc. and Cooperative
	Research Agreement \#AST-9223814 between the United States National
	Science Foundation and Associated Universities, Inc.

	Redistribution and use in source and binary forms are permitted
	provided that: (1) source distributions retain this entire
	copyright notice and comment, and (2) distributions including
	binaries display the following acknowledgement:  ``This product
	includes software developed by the University of California,
	Berkeley, the National Radio Astronomy Observatory (NRAO), and
	their contributors'' in the documentation or other materials
	provided with the distribution and in all advertising materials
	mentioning features or use of this software.  Neither the names of
	the University or NRAO or the names of their contributors may be
	used to endorse or promote products derived from this software
	without specific prior written permission.

	THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
	IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
	WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
	PURPOSE.
}

\section*{Appendix B: AIPS++ Copyright}

AIPS++ is covered by the following copyright:

{\em Copyright (C) 1996,1997,1998,1999 Associated Universities, Inc. Washington DC, USA.

This program is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option)
any later version.
 
This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
more details.
 
You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
675 Massachusetts Ave, Cambridge, MA 02139, USA.
 
Correspondence concerning AIPS++ should be addressed as follows:

Internet email: aips2-request@nrao.edu

Postal address: AIPS++ Project Office, National Radio Astronomy
Observatory, 520 Edgemont Road, Charlottesville, VA 22903-2475 USA.}

\end{document}
