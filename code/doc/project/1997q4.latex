\documentclass[11pt]{article}
\usepackage{html, epsf}
\begin{document}
\title{\bf AIPS++ Quarterly Report: 1997 Q4}
\author{T.J. Cornwell, NRAO}
\date{1998 January 19}
\maketitle

\tableofcontents

\section{Introduction}

Progress continues towards a beta release in March 1998 and a limited
public release in June 1998.

\section{Developments in 1997 Q4}

In {\bf Single Dish support}, we continued our support of
the use of AIPS++ by the Green Bank Telescope engineers. For
example, opacity measurements at Green Bank are now analysed
in AIPS++; see:

\htmladdnormallink{{\em http://www.gb.nrao.edu/\~{}jmcmulli/tipper/tipper.html}}
{http://www.gb.nrao.edu/\~{}jmcmulli/tipper/tipper.html}.

The dish program continues to accumulate new capabilities
and refinements, such as sine-wave fitting, persistence of
results, improved data presentation, {\em etc.}

In {\bf Synthesis support}, we started parallel development by a
number of people, overseen and coordinated by Athol Kemball. Such
parallel development is a good test of the completeness of the
synthesis code. Kemball started on an implementation of
cross-calibration. This required some relatively small modifications
to the philosophy of the existing calibration software, as well as
some changes to the class interface. This work is proceeding
satisfactorily and we anticipate usable applications within
the next couple of months. On the imaging side, the work has been split in a
number of directions: Cornwell was to work on the user interface,
Marson on the component models (especially important for WSRT
processing), Briggs on wide-field imaging, and Brouw on a design for
mosaicing. The first two have proceeded satisfactorily.  The command
line user interface for the synthesis code is now that of version 2 of
the AIPS++ Distributed Object system. Closer integration with the rest
of the system has lead to a number of very nice features, such as the
ability to specify phase tracking centers in a range of coordinate
systems {\em e.g.} ra-dec, az-el, galactic, super-galactic, position
of the sun or planets, etc. Component lists are now editable via a
graphical user interface written by Noordam, and integrated into the
system by Marson during his recent visit to WSRT. Part of Briggs' work
on wide-field imaging was taken over by Cornwell, who implemented
multi-field cleaning, including very general phase-shifting.  True
wide-field imaging, similar to that in the SDE dragon program, now
only awaits support for geometry conversion, which Brouw is scheduled
to work on. Brouw's work on a mosaicing design required a
demonstration of mosaicing using the existing classes, something that
is now in progress.

For visualization of synthesis data, Noordam has continued to work on
his Glish-based visualizer, with help from Wieringa to write C++
support classes. Testing at NFRA shows that this application is still
too slow and uses too much memory. Hence some tuning is
needed. Similar tuning was needed in the development of the image
analysis application, where after tuning, the speed was comparable to
that of existing code in other systems, with the addition benefit that
other, non-traditional, access patterns could be used at relatively
little cost (a key requirement for AIPS++ code). 

In {\bf Measures}, we continued adding capabilities to the 
system:
\begin{itemize}
\item Observatory positions available from C++ and Glish
\item Nutation and Solar positions from JPL DE databases rather
than analytical expressions
\item Ecliptic and supergalactic coordinate support
\item Improvements to the measures application {\em e.g.}
automatic conversion update, choosable/guessable coordinate formats.
\end{itemize}

In {\bf Glish support}, our main activity was to issue version 2.6
(the first major release outside the project for about 3 years and the
first since NRAO took over control of Glish). This required an
overhaul of the 250 page manual, reflecting many changes and additions
in capability that have been made during this time. Following the
release, we proceeded to start the addition of string and file
input/output handling.
 
In {\bf AIPS++ Infrastructure}, our work continues to be driven by the
needs of applications development. We have performed the long-awaited
overhaul of the Lattice classes. The overhaul, made after gaining
considerable experience writing code with the existing classes, has
simplified use of the classes. We have also added support for
sub-lattices, and a LatticeExpr class, allowing numerical processing
with Lattices. We expect that the latter will soon be made available
to users as an Image calculator.

As an important part of the infrastructure, we continue to develop a
graphical user interface for standard AIPS++ Distributed Objects,
based upon the tk widgets now bound to Glish. Part of this is a
facility, now available, to track and report visually on memory usage
by the various clients started by AIPS++. In addition to the GUI, we
have also developed a design for a simple parameter-setting CLI that
will allow users to bypass Glish for some operations.  We plan to
implement this in the next quarter.

In {\bf FITS support}, we did the following:
\begin{itemize}
\item implemented (early) Y2K compliance. 
\item completed an initial version of a FITS archiver for
MeasurementSets.
\item iterated and refined the Single Dish FITS convention,
and generated example SDFITS files.
\end{itemize}

In {\bf Image Analysis and display}, we started initial
applications development using the image display library, a joint
undertaking of ATNF (Tom Oosterloo) and BIMA/NCSA (John Pixton).
Both Tom and John continue to work on debugging the library
(Tom on his own time since he has left the project), responding
to bugs reported by Harold Ravlin of BIMA/NCSA. We expect this
development effort to increase in the next few months when
David Barnes joins the ATNF AIPS++ group.

In the {\bf System} area, we finished a port to the IRIX native
compiler, and investigated the new egcs compiler (Cygnus
version of the FSF g++ compiler). We implemented a scheme for
consolidating templates into groups, thereby cutting down on
build time. As part of this effort, a number (25\%!) of
dead unused templates were removed from the system, also
improving the build time.

In the area of {\bf Parallelization}, Young transferred to an
NCSA-funded position, dedicated to parallelization of AIPS++
code. Briggs and Roberts of NCSA are also targeted to work on parallel
algorithms. While this work is primarily targeted for massively
parallel computers, it should also benefit inexpensive systems with a
small number of processors. If networking speeds are sufficient, we
will allow transparent access of NCSA hardware from Charlottesville
and the AOC. The first parallel applications will be available for the
first limited public release this summer.

In {\bf Documentation}, we added one person, Kate Weatherall, devoted
50\% to AIPS++ documentation. She has worked on technical editing of
the Glish manual, a proposal to restructure the AIPS++ Web site, and,
jointly with Bob Hjellming, a plan for an on-line, HTML-based AIPS++
Newsletter. We are proceeding with the goal of releasing a first
edition of the Newsletter by February 1.

In {\bf Management}, we started the Quality Assurance Group
as described in the AIPS++ Operations Plan (\htmladdnormallink{AIPS++ Note
205}{http://aips2.nrao.edu/aips++/docs/notes/209/209.html}).
This group headed by Ralph Marson currently consists of three
people: Code Cop (Marson), Rules Boss (Brouw), and Chief Tester
(Noordam). The mission of the QAG is to act as independent
means of assessing and ensuring quality in products of AIPS++.

\section{Beta release}

Testing of the last release by our testers has been much less that we
had hoped. We are now embarked upon preparing the next beta release
(1.0), which we believe must have {\em both} improved user interfaces and
more functionality to attract new users. We anticipate having working
versions of various standard GUIs within a month. In addition, we are
working on a simple parameter-setting shell, that we expect will
satisfy the needs of users for whom the GUI is overkill. Turning to
applications, the development of functionality in synthesis processing
is now sufficiently rapid to give us some confidence that the flag
ship application ({\tt imager}, renamed to {\tt sky}) will attract new
users.

The release schedule is now:

\begin{description}
\item[AIPS++ V0.8 {\em 26 Feb 97}]: First beta release
\begin{itemize}
\item Continuum synthesis imaging and self-calibration,
\item General Glish-based tools.
\end{itemize}
\item[AIPS++ V0.9 {\em 12 Sept 97}]: Second beta release
\begin{itemize}
\item Rectify remaining problems in V0.8
\item Spectral line additions to synthesis processing,
\end{itemize}
\item[AIPS++ V1.0 {\em March 98}]: Third beta release
\begin{itemize}
\item Rectify remaining problems in V0.9
\item Improved synthesis interface and functionality, in both imaging 
(multi-field processing, simple mosaicing) and calibration
(cross-calibration).
\item Improvements to the user interface, specifically via a number of
general GUI-based applications such as the Image GUI and the Single Dish 
analysis program.
\end{itemize}
\item[AIPS++ V1.1 {\em June 98}]: Limited Public Release
\begin{itemize}
\item First publicly available release of AIPS++.
\end{itemize}
\end{description}

While there are other demands on the project, most importantly the
pressing need to support the use of AIPS++ at WSRT, we believe that
it is important to adhere as closely as possible to this release
schedule. Previous delays have been ascribable either to slow
development or to a change in strategy provoked by testing.

\section{Developments planned for 1998 Q1}

In {\bf Single Dish}, we will add a number of features to
the dish program in preparation for testing:
\begin{itemize}
\item Improved results manager,
\item Regridding and other mathematical operators,
\item State-preservation,
\item Sundry minor improvements to the interface and
data flow.
\end{itemize}

In {\bf Synthesis}, we will develop mosaicing within the {\tt sky}
application, add {\tt sky} support for components, and complete an
image geometry conversion machine that is needed for wide-field
imaging. Depending on the rate of progress on the conversion engine,
we may be able to implement wide-field imaging. We will continue to
improve the user interface, and make refinements as suggested by our
alpha-testers. We will produce an initial cross-calibration
capability, according to the design put forward by Kemball.

We will provide support, as needed, for the effort now underway to get
WSRT/TMS Setup functions implemented in AIPS++. This will be a
two-pronged effort: some functions will be implemented soon using the
basic tools available in Glish, and some will be later implemented
using the cross-calibration framework now being worked on by Kemball.
We will work to improve the performance of the Glish-based visualizer
developed by Noordam and Wieringa.

In {\bf Image Analysis and Display}, we will develop an image
calculator based on the new LatticeExpr classes.  We will increase
development of image display applications using the new image display
library.

In {\bf Infrastructure}, we will complete the auto-GUI and
parameter-setting shells described above. We will implement a
state-saving API for Glish functions. We will add support for
region specification to the Lattice and Image classes. We
will develop an image coordinate conversion machine as needed
for wide-field imaging.

In {\bf Measures}, we will implement user-specified corrections to
emphemerides, as needed, for example, for comet observations.
We will continue the integration of Measures throughout the system,
most particularly via the TableMeasures classes and in the
Glish binding of Distributed Objects.

In {\bf Glish support}, we will complete the addition of support for
string and file handling.

In the {\bf System} area, we will implement a way of tagging good
builds of the development system for preservation for use by alpha
testers. We will enable checkin and checkout of Tables. We will
investigate ways of restructuring the unix directory layout of
AIPS++.

In the area of {\bf Parallelization}, we will start work towards
parallel deconvolution, gaussian fitting, and visibility gridding
applications.

In {\bf Documentation}, we will release a first edition of the AIPS++
Newsletter. We will restructure the AIPS++ Web site, with the goals of
making navigation easier and improving the presentation of information
thus found.

In {\bf Management}, we will hold the second meeting of the Scientific
and Technical Advisory Group, scheduled for February 9-10 in Socorro.

We will prepare for the third beta release, scheduled for March.

\section{Appendix: ATNF contribution {\em  Neil Killeen}}

\subsection{General}

This quarter the ATNF had 3 people working in AIPS++.  These are Neil
Killeen (25-75\%, also local manager), Wim Brouw (90\%),) and Mark
Wieringa (30\%).  Tom Oosterloo left the project and is now working for
ESO in Italy.  He has, however, been able to do some AIPS++ work.  David
Barnes, who will join us in February 1998, has been able, in between his
thesis work, to work on some enhancements for the Parkes' Multibeam
system.  The output of this quarter has been somewhat lower for the
regular team members.  Our revered leader spent about half the quarter
on a, partly busman's, holiday, while Mark was kept busy with
introducing the several new computing hires in Narrabri.  Wim spent a
large fraction of his time organising and running the 1kT international
technical Workshop.  All three also took some end-of-year holiday and
attended an ATNF staff retreat. 


\subsection{System}

In general the one active system (Solaris/gnu) gave little trouble over
the quarter.  Unfortunately the trials (by Mark Calabretta) to get the
SGI native port and the, recently announced, egcs free software port
that was supposed to run under IRIX working were unsuccessful till now. 
The egcs system was not even built itself, while the SGI native port,
even after the arrival towards the end of the quarter of the makedefs
from NCSA, did also not succeed.  The latter's failure could be due (as
could maybe even the egcs port's failure) to the 64 bit port that was
attempted.  The 32-bit ports could maybe succeed, but would, a.o. 
things, entail the building of all support libraries in 32-bit mode
(currently they are available in 64-bit mode: the machine's design
width). 

\subsection{Visits}

Neil visited Dwingeloo on his holiday, and worked fruitfully with Ger to
get the Lattice expressions working to a stage were they could be
checekd in.  Ralph visited Epping for 5 minutes, and discussed with Wim
the option of having regular QAG phone discussions.  They will start
towards the end of January.  Tom visited the ATNF for an ESO Symposium.


\subsection{Individuals}

\subsubsection{Mark Wieringa}

Most of Mark's aips++ time was spent this quarter on the MeasurementSet DO
functionality required for Jan Noordam's data visualizer.
He implemented: 
\begin{itemize}
\item polarization selection and conversion, 
\item the ability to save and retrieve the flagging state to/from the
  flag\_history column,
\item writing 'channel-0' flags back to the whole spectrum, 
\item automated flagging by clipping on differences.
\end{itemize}
He also fixed a number of bugs found by Jan Noordam and himself.
Early in the quarter he did some work on speeding up the Visibility
Iterator, especially for handling larger datasets. 
He worked with Athol Kemball on the new MeasurementSet definition
document and calibration strategies.

\subsubsection{Wim Brouw}

Wim spent all but no time on the mosaicing software, which is his next major
aips++ task. He spent time, especially earlier in the quarter, on:

\begin{itemize}
\item created a Table with Observatory positions available in C++ and
applications
\item code-copping of AppInfo
\item changes to near() implementations for numeric classes for behaviour close
to zero.
\item axed the Coordinate conversion steering done with MeasDetail class, in
favour of the written AipsrcValue classes
\item added an option to get Nutation and Solar positions from the JPL databases
rather than from analytical expansions
\item spent a lot of effort to solve the '-lmalloc' problem
\item found, after some headaches, an obscure Solaris problem: 
abs(+0) $\Rightarrow$ -0; abs(-0) $\Rightarrow$+0; and catered for 
it in some output formatting
\item added ecliptic and supergalactic coordinate support
\item added automatic conversion update to measures application
\item added choosable/guessing coordinate formats in measures application
(i.e. RA e.g. in hms; galactic longitude in degrees)
\item added generalise aipsrc-like processing method to Aipsrc for Glish state
saving 
\item discussions on, a.o., Quality Assurance Group responsibilities.
\end{itemize}


\subsubsection{Neil Killeen}

Neil's time was spent on 

\begin{itemize}
\item Discussed a lot with Ger optimal strategies for iteration
  through Lattices where the output Lattice is formed from the
  input Lattice by collapsing some subset of the axes.  Ger has
  now checked in these classes.  Then thought some about how to 
  merge the ImageStatistics and ImageHistograms with this scheme,
  but this is yet to be coded.
\item Picked up the work to produce an image calculator so that users
  can manipulate their images however they desire.  This work
  starts with Lattice Expression classes.  These enable the
  programmer to optimally manipulate Lattices directly with C++ expresssions.
  Following that a parser is attached to make an application
  for the users.   This work is being done in collaboration
  with Ger at NFRA, and benefits substantially from that. So far
  a first version of the Lattice expression classes has been checked
  in.  The connection to the user application is not yet established,
  but that is a comparatively simple thing.
\item Quarterly report
\end{itemize}


\subsubsection{Tom Oosterloo}

Although formerly not attached to any AIPS++ task, he has continued his work
on some aspects of the display library. 

 The basic classes (like canvasses and the classes that do
administration for these canvasses) are implemented now and to a large
extent have also been debugged.  The functionality offered at the moment
are the Canvasses (with very extended control over colourmaps) and a
number of classes that 'organise' the display (worldcanvasholder,
animation, zooming).  Also the basic control mechanism (restriction) is
implemented and tested.  One display class is implemented that enables
display of pseudocolour image sequences of datacubes.  A test program
that displays movies of a datacube has also been written. 

\subsubsection{David Barnes}

David will join the ATNF in February 1998.  He made almost no actual
contribution to the AIPS++ code in the quarter, but made changes
needed to make the Multibeam software accommodate the internal changes
in the FFT server and ArrayMath code ({\em i.e.}  the speed up of the
median method).  It may, further, be interesting to note that
extensive improvements were made in the Multibeam processing
throughput, both due to internal aips++ improvements, and some due to
time that he has spent programming.  In summary, these changes have
offered a total speed up of around 40\%, so we are now running easily
in realtime, using only one instance of the process-ing software.
Secondly, the entire system is now far more robust, again due to
internal aips++ changes and our own modifications; the frequency of
LiveData crashes has dropped easily below one per 50 hrs, where it
used to be one per two hours!



\section{Appendix: BIMA/NCSA contribution {\em  Dick Crutcher}}


During the past quarter we had 6 people (3.5 FTE) working on AIPS++:
Dick Crutcher (20\%), John Pixton (50\%), Harold Ravlin (100\%), Doug
Roberts (75\%), Dan Briggs (100\%), and Peter Teuben (5\%). 
Accomplishments during the past quarter are described below under each
person.

Dick Crutcher served as local AIPS++ project manager and as BIMA
director in charge of our participation in AIPS++. During this quarter
negotiations with NCSA about continuing funding for AIPS++ were
concluded.  Our long-term situation is the following.  The Illinois
Astronomy Department will fund Ravlin, the University of Maryland funds
Teuben, and NCSA will continue funding for Roberts and Briggs.  For now,
Pixton continues at the 50\% level, with his display library knowledge to
be passed on to a new person in the NCSA visualization group during the
next few months.  Beginning next October, the level of effort for the
display library will drop to maintenance from the development level. 
How AIPS++ visualization and image analysis work will progress with the
loss of Osterloo and Pixton to the project is a matter of considerable
uncertainty.

John Pixton has focused on the AIPS++ display library.  His main
effort was to finish those parts of the library for which he was
responsible and fix bugs reported by Harold Ravlin, who has started
working with the library.  He also carried out a small study of the
Visualization Tool Kit system (which will be the basis of most of
NCSA's future visualization software development) and its possible
compatibility with the AIPS++ Display Library.

Harold Ravlin administers our AIPS++ workstations, which takes about 1/3
of his time. He continued to spend some of his time on Aipsview
development, maintenance, and bug fixes.  New features included: (1)
Made the title, xlabel, and ylabel movable on profile plots in the same
way that they are movable for image plots.  (2) Added the ability to
display linear axes as offsets from a user selectable position within
the image.  (3) Added 'captions', extra labels (like the X \& Y labels)
the user can position on the image window.  (4) Added support for
profile locking. (The user can 'freeze' a profile so it isn't updated
when the cursor changes).  (5) Added support for FITS files with CD
matrix keywords.  (6) Started porting Aipsview to the SGI Origins.
(There is still a problem with compiling under the 7.2 C++ compiler). 
He also began working with the new AIPS++ Display Library, and reported
a number of bugs to Pixton, who fixed them.  He also installed the new
version of glish on our Suns, but got compile errors on the IRIX system.

Doug Roberts finished porting the AIPS++ system to the NCSA Origin2000
computer using the SGI native C++ compiler.  He attempted to install
AIPS++ under g++ on the Origin2000, but the gnu software had been 
improperly installed by NCSA and he was unable to proceed. He has been
editing the Aipsview manual to reflect functional changes that Harold
Ravlin has been putting into Aipsview. He has tested the AIPS++
calibration, imaging, and deconvolution routines against the same ones
in MIRIAD by processing the same BIMA data set completely through the
two systems; he found them to give the identical results within the
noise.  He has also written a users' manual on processing BIMA data
through AIPS++ to help BIMA MIRIAD users transition to using AIPS++. The
spectral-line Beta version of AIPS++ has been installed on the Illinois
Astronomy computer system.  He has given two talks to the BIMA group
here at Illinois on the background of AIPS++ and specifically how to use
it to process BIMA data; the talks include a demonstration script to
calibrate, image, and deconvolve BIMA data in AIPS++.

Daniel Briggs arrived in Champaign-Urbana in mid-August, joined the
Radio Astronomy Imaging group, and established computer presence on
various local machines.  He brought up the SDE package on the RAI SGI
Onyx as a testbed for development efforts on the Origin 2000.  He
trained in Socorro from 20-Sep-97 to 11-Nov-97 in basic AIPS++ design
methodology and infrastructure specifics.  This resulted in finding  and
documenting significant number of system problems in process, obtaining
fluency in glish as demonstrated by the minor modules sh.g,
stopwatch.g, and improvements to catalog.g.  He started work on the
geometrical conversion engine, HGEOM.  This is a fundamental part of
many imaging algorithms needed by AIPS++ and by the wide field imaging
task in particular.  He wrote a first cut at a parallel infrastructure
document to coordinate parallel development and code control efforts
within the greater AIPS++ framework.  Finally, he attended a number of
parallel-processing meetings and consultations with the NCSA performance
engineering group, in preparation for development of pilot parallel
standalone AIPS++ demonstration programs.

Teuben continued to work on the bimafiller, in particular filling of the
mosaicing tables, and proper support of multi-source visibility
files. These should be ready for the next beta release.

\section{Appendix: NFRA contribution {\em  Jan Noordam}}


The local project members are Ger van Diepen (GVD), Michael Haller (MXH), Jan
Noordam (JEN, local manager), Friso Olnon (FMO).


\subsection{General}

Because of the WSRT upgrade, AIPS++ synthesis reduction lies more on
the critical path for NFRA than for most other consortium partners. 
In particular, the various WSRT setup programs must be implemented in
AIPS++ in the first half of 1998.  

\subsection{Interaction with TMS/DZB}

Commissioning of the new WSRT backend (DZB) and on-line software (TMS)
has finally started in earnest this quarter. The uv-data are stored
directly into an MS by means of a 'dzbfiller'. From there, the uv-data
is usually converted to a format that can be read by existing packages
for inspection and further reduction. The role of the uvf visualiser
has been smaller than was hoped, because of its slowness. This problem
is being addressed, both in hardware and software. 

Friso Olnon developed a prototype class for total power normalization
of WSRT data and their inclusion in the DZB and WSRT fillers. The
class has been released to the DZB/TMS group for further development.

Friso checked in the first version of ms2fits. This NFRA application
program converts the MeasurementSets produced at the WSRT into FITS
files with binary-table extensions. The resulting FITS file is meant
for local use (archiving) only, and not necessarily readable by AIPS.
 Essential is that no header or data information is lost in the
transfer. The application will be reviewed and tested in cooperation
with the JIVE and TMS/DZB people.

Ger van Diepen has provided support to the TMS group, in particular in
explaining how to use tables and TaQL.


\subsection{Source model components}

NFRA places a high priority to the use of parametrised model
components as an integral part of the Source Model. Jan Noordam has
checked in a gui for user interaction with source model components,
using the basic componentlist DO by Ralph Marson. The latter has made
a productive two-week visit to Dwingeloo in december, which resulted
in a joint proposal for the further development of components during
1998. Although stage I of this plan has been completed, we will only
be able to start using components after completion of stage Ia. 

\subsection{wsrtfiller }

 Friso Olnon cut short the upgrade of the wsrtfiller, because of the
urgency of other WSRT-specific work, and because of the upcoming
upgrade of the MeasurementSet. The checked-in filler fills a
MeasurementSet from WSRT archived data, which are accepted by the
AIPS++ beta-test processing modules. For continuum (DCB) datasets the
filler only writes a single subband (out of 8) for the moment. That
subband of course can be chosen. The filler does not yet handle
multiple pointing positions (for mosaicing), and it does not store IF
data.


\subsection{Infrastructure software}

Ger van Diepen spent most of his time on the Lattice and Image
classes.  A large fraction of the Lattice code has been
restructured. As a result the code is simpler and it is easier to add
other classes to the Lattice framework. Two major additions have been
done:

\begin{enumerate}
\item The SubLattice class makes it possible to define a subset of a
   lattice as a lattice in itself. The subset can be defined with
   a class derived from PixelRegion. So far, only a box and circle
   region have been implemented, but it is easy to add other regions
   like polygons, cylinders, etc..
\item With Neil Killeen, Ger has implemented the LatticeExpr class.
   It makes it possible to do lattice/image arithmetic (with all
   usual numerical and logical operators and functions).
   A lattice expression is a lattice itself to make it fit nicely
   in the lattice framework.
\end{enumerate}

As a spin-off the Array classes have been changed.  The major change
was the removal of the variable origin. It used to give a lot of
worries and hardly any benefit.

The glish interface to the table system has been improved.
It is possible to get (or put) a slice of an array in a table.


Michael Haller completed Aips++ module TableMeasures and is waiting
for it to be reviewed. He has also worked on a proposal for new a new
AIPS++ module BTrees. This has been suspended in favour of work on
urgent local (NFRA) applications


\subsection{AIPS++ Site in Dwingeloo}

 ``Regular'' maintenance of the local AIPS++ site has cost Friso Olnon
less than half a day per week.  Some problems with the user
documentation have not yet been solved (or seriously tackled).  

Since begin December, the responsibilities of local site manager have
been taken over by Michael Haller. He has also updated the local Linux
systems.


\subsection{Miscellaneous}

Several NFRA Software Engineering Group (SEG) workshops have been
presented by AIPS++ group members.  Their subjects were C++ code and
how to use debuggers and tools like purify.

Eelke Klein, a student from the HIO Leeuwarden, has configured QAC++
and created a few scripts for it. It'll make it possible to use QAC++
on a regular basis to inspect the code and to derive some metrics.

\section{Appendix: NRAO contribution {\em  Tim Cornwell}}

\subsection{People}

The core NRAO AIPS++ group is now Cornwell (100\%), Garwood (100\%),
Glendenning (100\%), Kemball(100\%), Marson (100\%), McMullin (100\%),
Schiebel (100\%), Uphoff (100\%), Weatherall (50\%), and Young
(100\%).  In addition, as described above, Murphy of the CV computer
group also contributes.  Peter Barnes will join us in June 1998 to
work in the synthesis initiative.

Tim Cornwell's primary responsibility is Project management.
His coding activities focus around the synthesis package.
In the last quarter, he has:

\begin{itemize}
\item Set up the Quality Assurance Group.
\item Set up AIPS++ Testers at the AOC. This group consists
of a number of people (Anantharamaiah, Durga Bagri, Bob Hjellming, 
Michael Rupen, and Gustaaf van Moorsel), who meet weekly
with  AIPS++ personnel to discuss results of testing of
the beta and daily releases.
\item Engaged in numerous discussions inside NRAO regarding
the transition from AIPS to AIPS++.
\item Delegated supervision of synthesis development to
Athol Kemball.
\item Delegated supervision of parallelization development
to Brian Glendenning.
\item Changed the synthesis imaging program {\tt imager}
to version 2 of the Distributed Object system. It then
became the {\tt sky} program and accumulated many new features
including specification of inputs via measures, use of
general coordinate systems such as the direction of the
Sun, multi-field processing, {\em etc.}.
\end{itemize}

Bob Garwood's primary responsibility is to oversee the single dish
work which currently is focussed on the DISH environment as well as
supporting the GBT.  Over the past 3 months (Oct through December) he
has done the following work:

\begin{itemize}
\item Iterated and refined the Single Dish FITS convention.
\item Generated some example SDFITS files.
\item Had numerous DISH design discussions.
\item Implemented a 1D sine-wave fitter for use by DISH.
\item Implemented a simple, table-based, storage scheme for
        data processed through DISH.
\item Attended the GBT Advisory Committee meeting.
\item Attend the regular GBT coordination meetings.
\item Visited Green Bank 4 times (in addition to the 
      advisory committee meeting).
\item Helped the local NRAO staff use the most recent beta
      release of aips++.
\item Implemented an in-glish (in-memory) SDIterator (a set
      of DISH data records) for use in holding 
      processed data prior to saving to disk (it should be
      possible to have a hybrid in-glish/disk iterator
      which would cache some number of records and keep the
      rest on disk - the access to individual records may
      be faster in some cases).
\item Supported the various data fillers used by the GBT staff.
        Bug fixes, new support for hardware, new features, etc.
\end{itemize}

Brian Glendenning works on general AIPS++ development and management
in a large number of areas. In the past quarter he has:

\begin{itemize}
\item Worked on infrastructure required to implement general-purpose ``automatic'' GUI's (as opposed to hand-tuned GUI's, e.g. the single dish GUI). 
\item Implemented mechanisms to track and report (including via a GUI) on memory usage to help applications programmers keep memory use
     reasonable. 
\item Improved AIPS++/FITS interoperability in several ways (including Y2K compliance for the future). 
\item Did some compiler (EGCS: Cygnus version of g++) testing. Some other minor OS and compiler testing of various sorts. 
\item Attended OO/Parallel processing conference. 
\item Created a ChangeLog proposal. 
\item Documented the Glish/PGPLOT binding. 
\item Fixed many bugs and problems reported by AIPS++ workers and beta testers. 
\item Had many discussions, read and sent many emails (he seems to
have sent 3500 AIPS++ related email messages in 1997). 
\end{itemize}

Athol Kemball directs the synthesis development effort.
During this quarter he worked on the following items:

\begin{description}
\item[Cross-calibration design]

 A design was produced for an extension of the current synthesis code
to support full cross-calibration. This term is used to imply the
ability to derive calibration information from a selected subset of
uv-data, which can be transferred, interpolated and applied to another
selected subset of uv-data. This includes the possibility of
incremental calibration. This document has been distributed and
discussed within the AIPS++ project as well as with some beta testers.

\item[Cross-calibration prototyping]

 Work was started in the later part of this quarter on the
implementation of a prototype cross-calibration system consistent with
the design discussed above. This work has concentrated on the
implementation of the key components of the cross-calibration
system. This includes calibration selection and interpolation, as 
well as the formalization of calibration table conventions. This
work has proceeded by modifying the existing {\bf imager} classes
directly in a manner that is consistent with future expansion to more
advanced calibration features. 

\item[MeasurementSet definition v2.0]

 A significant effort was made towards a revised MeasurementSet
definition to fully support VLBI processing, recent synthesis
requirements, and general changes suggested since the initial
definition. A draft document has been distributed within the project
and the proposed changes are under general discussion. Implementation
is planned for February this year.

\item[CLI parameter-setting shell]

 A basic proposal was initiated for an interactive, non-GUI parameter
setting shell, which could be invoked at the CLI to execute DO
methods. This work is continuing and will be finalized early in the
next quarter.

\item[AIPS/AIPS++ Interoperability]

 Work has continued on the classes developed for AIPS/AIPS++
interoperability in the previous quarter and will continue into the
next quarter. This has involved revisions to allow the code to be
included in the next public release and planning for expanded
functionality.

\end{description}


Ralph Marson works on synthesis code and as code cop. During the
last quarter, he worked on:

\begin{description}
\item[Overhaul the AIPS++ FFT code]
The previous version of the AIPS++ FFT code was in an 'abandoned'
state with nobody responsible for it. When looking at the code as part
of the overhaul of the Convolver class I realised that significant
speed improvements could be made because the twiddle factors and FFT
length decomposition were not always being cached.

These improvements along with the update to current AIPS++ coding
standards, and the switch to a faster FORTRAN FFT library (FFTPACK is
now used exclusively rather than selectively) have resulting in speed
improvements by a factor of two or three for one dimensional
FFT's. One dimensional FFT's are at the heart of the routines which do
transforms on large multi-dimensional arrays.

\item[Improvement of Lattice FFT code]
Lattices are typically used to store multi-dimensional Arrays that are
potentially too large to fit into memory. The previous Lattice FFT
code was a stopgap and could only do complex to complex in-place
transforms. The Lattice FFT routines have been expanded to do real to
complex and complex to real transforms as well as 'out of place'
transforms.

\item[Completion of basic component list]
In this quarter the first phase of the work on component list's was
completed. A component is a parameterized representation of the sky
brightness. Currently two components are available, Point components
and Gaussian components. A component list is a collection of
components that can be saved to and read from disk using a suitable
AIPS++ table.

\item[Projection to images]
All components (and hence component lists) can project themselves onto
an image and this feature will be used to allow component lists to be
part of the model for self calibration. The projection code was
finished this quarter.

\item[Integration with Jan's Graphical User Interface]
Jan Noordam has, in parallel with this work written a graphical user
interface that allows users to examine, edit and plot component
lists. Initial integration with the C++ code was also completed this
quarter.

\item[Formation of Quality Assurance Group]
In this quarter, the quality assurance group was formed. Ralph
chairs the group, which is an
expansion on his current roles as AIPS++ code-cop. Two new roles have
been defined namely ``Rules Boss'' and ``Chief Tester". Wim Brouw (ATNF)
and Jan Noordam (NFRA) are filling these new roles. Detailed
definitions of the duties within the quality assurance group have been
produced and available in the operations plan (note 209).

\item[Removal of dead templates]
We are forced to use a ``do it yourself'' templates scheme because of
the compiler limitations. With this scheme the developer specifies
which templates are needed for the AIPS++ applications to link. One
problem with this is that changes in application updates can result in
some templates no longer being required. During this quarter Ralph removed
nearly 25\% of the 'dead' templates from the system repositories. This
was motivated by the desire to speed up the system compilation time.

\item[Code copping]
Six categories of classes have passed the code review process this
quarter. These are: 
\begin{description}
\item[Memory] determine how much memory all AIPS++ application are using.
\item[AppInfo] A central place for miscellaneous info that applications need
\item[FFTServer] In-memory multidimensional FFT's (major update)
\item[Aipsrc] User preferences when AIPS++ applications
\item[OS/HostInfo] Information about the host computer
\item[OS/Time] Date and time functions
\end{description}

\item[Testing of code]
We routinely have above 95\% of the C++ classes that have been reviewed 
(ie in the AIPS package) passing the automated weekly test. Last week
it was 99.4\%
\end{description}


Joseph McMullin's main responsibilities are managing the Green Bank
installation of AIPS++ and supporting AIPS++-related GBT needs.

\begin{itemize}
\item Modified engineering monitor program, gbtlogview, to support new
devices and data formats.
\item Install tabpp (a Poynter and Pickett spectral line browser/manipulator).
\item Implemented a script to perform a suite of tests on the current installation
to trap for possible problems.
\item Wrote up a note on the Design for user interaction with online data based on
conversations with GBT scientific staff.
\item Developed a glish real-time strip charts. A simple version is being used in
the mockup; a more sophisticated version, based on the NRAO 12m 'charts' 
program (with review mode), is nearly complete.
\item Developed software for the analysis and display of the 86 GHz tipping radiometer
in Green Bank. See
\htmladdnormallink{{\em http://www.gb.nrao.edu/\~{}jmcmulli/tipper/tipper.html}}
{http://www.gb.nrao.edu/\~{}jmcmulli/tipper/tipper.html}.
Currently at work on the DISH software developing a technique for
providing multi-operation capability to sditerators.
\end{itemize}

Darrell Schiebel basically spent the entire quarter working on Glish.
In general, this involved fixing bugs, adding new functionality, and
preparing a public release of Glish 2.6. This release was the major
milestone achieved during the quarter.  There has not been a public
release of Glish since shortly after AIPS++ adopted it for use within
the project, and there have been many improvements since then ( see
\htmladdnormallink{{\em http://www.cv.nrao.edu/glish/manual}}
{http://www.cv.nrao.edu/glish/manual} for the entire list ). In
preparing for the release, Darrell had to overhaul Glish's 250 page
manual, ensure that the auto configuration scripts (based on GNU's
"autoconf") worked properly with minimal user effort, fix all of the
major outstanding bugs, and create a home page for Glish
(\htmladdnormallink{{\em http://www.cv.nrao.edu/glish/}}{http://www.cv.nrao.edu/glish/}). Glish
2.6 was released in November. It was important to have a public
release so external users (primarily at MIT and ODS) could be brought
more into sync with the version of Glish which AIPS++ uses.  Since the
NRAO is now the official maintainer of Glish, it was also important to
produce a release emanating from NRAO.

Some of the bug fixes and functionality improvements which Darrell added to
Glish during the quarter are:

\begin{itemize}
    \item Garbage collection for global Glish values is a compile time option.
       This was added in an attempt to track down memory leaks in a script,
       but by default, it is not enabled.

    \item Added the ``pragma include once'' pragma. This was added to de-clutter
       the scripts by avoiding the \#ifdef style of multiple include protection.
       However, the main benefit is a large decrease in Glish startup time
       because multiple inclusion of files is prevented without even opening
       the files.

    \item Implemented output paging so that large amounts of output to the screen
       are automatically piped to a pagination program, e.g. ``more'' or ``less".
       This keeps the user from being presented with screenfuls of
       information blazing past.

    \item Several problems were fixed with respect to Glish clients. The two
       classes of clients which AIPS++ doesn't use are remote clients and
       shared clients. Shared clients are clients which are shared between
       multiple Glish interpreters (this is used by Rick Fisher). Remote
       clients are processes which are started on machines across the network.
       Tony Willis did some Glish testing and discovered some problems with
       starting remote clients; these problems were fixed.

    \item Problems with recursive calls to the Glish interpreter (via ``eval()")
       were fixed. Some statements would incorrectly result in an error
       because in some cases state information wasn't being maintained.

    \item Problems with error propagation between the scanner and the parser were
       fixed.

    \item Problems with the interaction between command line editing and await
       handling were fixed. Much of the Glish source deals with managing a
       myriad of file descriptors. In this case, an await statement was able
       to clobber command line editing changes.

    \item Added a start up flag ("-vi") which will print out files as they are
       included.

    \item Added ``active'' field to records returned by ``whenever\_stmts()". This
       allows the user to identify whenever statements which are still active.
       Also added a ``whenever\_active()'' function for the same purpose.

    \item Added regular expressions to Glish. Perl's regular expressions were
       selected for addition because they have more expressiveness than V7
       or SYSV regular expressions; in particular, Perl's regular expressions
       have both greedy and lazy pattern matching, which other
       implementations lack. The addition was accomplished by creating a
       regular expression library from code ripped from Perl 5.0.* (under the
       Artistic License). It required a fair amount of work to take a minimal
       set of code from Perl which implemented regular expressions. The end
       result, though, is a seamless integration of regular expressions into
       Glish as first class variables (unlike Perl).
\end{itemize}

Beyond these major changes, Darrell also worked on many other bugs during
the quarter. These involved things like fixing memory leaks, fixes to Tk
widgets, fixes to internal event handling under specific circumstances,
improvements to built-in functions, fixes to ``const'' variables, and misc.
consistency fixes.


Jeff Uphoff works on single dish processing and also
the AIPS++ system. In the last quarter, he did:

\begin{itemize}
        \item Lots of work on Dish: clean-up's (a constant, on-going
        process); reworked range-setting functionality, moving its GUI
        it from the plotter to Dish; wrote design document for
        range-handling; much work on combobox widget to make it more
        capable/useful (added callbacks, ``attributes,'' other optional
        features); investigated SEGV problems in sditerator; added
        hard-copy PostScript output of plots; many other items.

        \item Added Time-zone handling to OS/Time class.

        \item Code-copped Brian's HostInfo class.

        \item Several minor improvements to XEmacs glish-mode.

        \item Tweaks/fixes in AIPS++ RCS system (e.g. rao).

        \item Worked on overhaul of Tk/PGPLOT in Glish--lots of bug-fixing
        and syncing up with documented/expected behavior.  This *still*
        needs work in some places.  Spent quite a bit of time on this,
        scattered about over the quarter.

        \item Reviewed/edited Brian's Glish/Tk/PGPLOT documentation (largely
        concurrent with the above code overhaul).

        \item One trip to Green Bank, demo'd Dish, plotter.

        \item Started work on state-saving in Glish.  Still not
        finished (got pushed aside due to Dish's higher priority).
        Much back and forth with Wim on underlying mechanisms for
        this.

        \item Tracked down some changes in Linux (2.0.32) that broke Glish
        compiles, other bug finds/reports/fixes to Darrell from time to
        time.

        \item General ``site maintenance'' work (all too often).

        \item Tested AIPS++ under new Linux libc (glibc), using Red Hat 5.0
        at home.  A few warts, but nothing major.
\end{itemize}

Kate Weatherall joined us November 14 to work on documentation for
AIPS++. She has:

\begin{itemize}
\item Edited the Glish 2.6 Manual (about 235 pages!)
\item Created prototype AIPS++ Online newsletter:

\htmladdnormallink{{\em http://www.nrao.edu/\~{}kweather/monkey/newsletter/newsletter.html}}
{http://www.nrao.edu/\~{}kweather/monkey/newsletter/newsletter.html}
\item Created proposal for revised NRAO Web site:

\htmladdnormallink{{\em http://www.nrao.edu/\~{}kweather/monkey/firstpage.html}}
{http://www.nrao.edu/\~{}kweather/monkey/newsletter/firstpage.html}
\end{itemize}

Wes Young has worked in a number of different areas. Over the last
quarter he:
\begin{itemize}

\item offically joined the project on 27-Oct-1997 to work on parallelization issues for AIPS++,

\item made the VLA nearly-real-time system much more robust. 

\item completed the ``Document AIPS++ Help System'' target,

\item met with the BIMA AIPS++ partners in Urbana IL 24-Nov to 1-Dec to discuss AIPS++ parallelization
   issues and the scope and type of problems we want to address with the effort,

\item attended the ISCOPE conference from 7-11 Dec 1997 in Los Angles CA,

\item release a new version VLA observe (5-Jan-1998),

\item mostly completed the ``New Table Browser'' target (estimated check in 
6 or 7 Jan 1998).

\item spent time familarizing himself with issues related to 
parallel/distributed computing,

\item chose PVM to implement parallelizing the plane-by-plane deconvolution, and

\item assorted computer-system management issues (bringing up his 
dual processor Pentium II
workstation, looking after the AIPS++ help-system).
\end{itemize}

\section{Appendix: Review of developments planned for last quarter}

The principal activity for the next quarter will be support of
beta testing, and preparation of the next release.

In {\bf Single Dish support}, we did continue development of the
Single Dish analysis program, with the goal of making this part of
the third beta release. We did continue work towards
the formalization of the SDFITS standard, providing a draft
standard and some example SDFITS files.

In {\bf Synthesis support}, we did increase our activity
considerably:

\begin{itemize}
\item Athol Kemball did continue development of a fully-fledged calibration
system using the current Measurement Equation implementation.
\item Jan Noordam do not yet finish a visibility data visualizer.
\item Tim Cornwell did convert imager to the new implementation
of Distributed Objects, but development of a GIU is still pending.
\item Wim Brouw did not design
mosaicing support using the Measurement Equation implementation.
\item Dan Briggs did not yet start development wide-field imaging algorithms similar
to those in the dragon program in SDE. This work has been shifted in
part to Tim Cornwell.
\item Ralph Marson did not convert the cleaning algorithms to work on
Lattices (disk-based rather than memory-based). 
\end{itemize}

In {\bf Measures}, we did complete the addition of support for Measures 
in Tables.

In {\bf Glish support}, we did continue to fix bugs as they occur in
testing. We did issue release 2.6 of Glish.

In {\bf AIPS++ Infrastructure}, we did continue to track the needs of
applications programmers. We did not finish the improvements to the table browser.
We did not integrate history and logging. We did not finish the DO Version 2
GUI support including support for plug-in components. We did complete
optimization and cleanup of the FFTServer class.

In {\bf Visualization and Image Analysis}, we did do some minor testing
and application development using the display library.

In the {\bf System} area, we did not complete the port to the KAI compiler.

In {\bf Documentation}, we did not yet make progress on the intermediate level
documentation requested by our beta testers (cookbooks and migration guides).
We did review our Web presence.

In {\bf Management}, as the first stage in implementation of the
Operations plan, we did set up the Quality Assurance Group.

\section{Appendix: Summary of AIPS++ Personnel}

In this section, we give the names of people in the various AIPS++
groups and the nominal fraction of time allocated to AIPS++.

The ATNF group is: Neil Killeen (25-75\%), Wim Brouw (90\%), 
and Mark Wieringa (30\%). Tom Oosterloo's position is to be
filled by David Barnes in mid February.

The BIMA/NCSA group is: Dick Crutcher (20\%), Dan Briggs (100\%), 
John Pixton (50\%), Harold Ravlin (100\%), Doug Roberts (75\%), 
and Peter Teuben (5\%). 

The NFRA group is: Ger van Diepen (100\%), Michael Haller (100\%), 
Jan Noordam (25\%), and Friso Olnon (50\%).

The NRAO group is: Tim Cornwell (100\%), Bob Garwood (90\%), Brian
Glendenning (100\%), Athol Kemball (100\%), Ralph Marson (100\%), Joe
McMullin (100\%), Pat Murphy (30\%), Darrell Schiebel (100\%), Jeff
Uphoff (100\%), Kate Weatherall (50\%) and Wes Young (100\%). 

Thus, in aggregate, we have 24 people contributing just over 17 FTEs
to the AIPS++ Project. Of these, 12 are employed by NRAO, and contribute
9.6 FTEs. The numbers for the other partners are: ATNF 3 and 1.45,
BIMA/NCSA 5 and 3.10, NFRA 4 and 2.75.

\end{document}

