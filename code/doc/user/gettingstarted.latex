% Revised. Version 2: June 1999 - KRA
% Revised. Version 2.1: July 1999 - TJC
% Revised. Version 2.2: August 1999 - TJC
% Revised. Version 2.3: August 1999 -  KRA
% Revised. Version 3.0: Major revision, February 2000 - TJC
% Revised. Version 3.2: Minor revision, October 2000 - TJC
% Revised. Version 3.3: Minorish revisions, February 2004 - NEBK
\documentclass[11pt]{article}
\include{aips2defs}
\usepackage{html}
\usepackage{epsfig}
\usepackage{shadow}
\usepackage{makeidx}

\externallabels{../Utility}{../Utility/labels.pl}
\externallabels{../General}{../General/labels.pl}
\externallabels{../Display}{../Display/labels.pl}
\externallabels{../Dish}{../Dish/labels.pl}
\externallabels{../Display}{../Display/labels.pl}
\externallabels{../SynthesisRef}{../SynthesisRef/labels.pl}
\externallabels{../ATNF}{../ATNF/labels.pl}
\externallabels{../NFRA}{../NFRA/labels.pl}
\externallabels{../NRAO}{../NRAO/labels.pl}
\newcommand{\heading}[1]{\begin{center}{\bf #1}\end{center}}

\begin{document}

\title{Getting Started in \aipspp}

\author{K.R. Anantharamaiah, RRI\\T.J. Cornwell, NRAO}

\date{Version 3.3/February 2004}

\maketitle

\begin{htmlonly}
\htmladdnormallink{PostScript version}{../gettingstarted.ps.gz}
\end{htmlonly}

\tableofcontents

\newpage 
\section{Introduction}

This document is intended as an introduction and guide for newcomers to
the \aipspp\ environment.  You can find more detailed information and
reference material at the  \htmladdnormallink{\aipspp\ Web
site}{../../aips++.html}.   This document should familiarize you with
the basic philosophy, terminology, and structure of \aipspp\ and to help
you get started on useful processing of radio astronomical data,
especially those from aperture synthesis arrays.  This document is
written in a semi-tutorial style and, for maximum benefit, should be
used at a workstation as an introductory \aipspp\ session.

\section{Overview}

\begin{description}
\item[General radio astronomical processing] \aipspp\ provides 
facilities for calibration, editing, image formation, image
enhancement, and analysis of images and other astronomical data. A
major focus is on reduction of data from both single-dish and aperture
synthesis radio telescopes. Although the tools provided in
\aipspp\ are mainly designed for processing data from varieties
of radio telescopes, the package is expected to also be useful for
processing other types of astronomical data and images.

\item[Tool-based approach] \aipspp\ has been designed to be tool-based 
and potentially programmable by the user.  This means that terminology
and the look and feel of \aipspp\ is somewhat different from
other astronomical processing packages.  However, after a little bit
of getting used to, you will find that most of the tools and
applications that an astronomer is looking for (and hopefully many
more) are available.

\item[Access to all data] In \aipspp, the user has direct
access to all portions of a data set or an image.  Therefore, all
aspects of the data can be manipulated at will using either existing
applications in \aipspp, or user developed applications, or
simply using calculator-type commands from the terminal.

\item[Graphical Interfaces] \aipspp\ is designed to take 
advantage of modern computer software and hardware.  Mouse-driven
Graphical User Interfaces (GUIs) are used extensively for handling
various applications, computations, and image display. 

\item[Web-based documentation] In order to access the extensive 
\aipspp\ reference material and other documentation, the
\textit{Help} menu that appears on most GUIs can directly steer a Web
browser to the appropriate section.  For those of you who are more
comfortable with a type-on-terminal approach, \aipspp\ can be
completely controlled from the Command Line window.  A combination of
both Command Line window and GUI windows is probably most appropriate.

\item[Powerful interactive command language] The command language used 
in \aipspp\ is called \glish.  This is a very capable
interactive programming language which allows high level operations on
vectors and arrays.  All data can be accessed and manipulated from
\glish\ and placed back into \aipspp.  Tasks in 
\aipspp\ are written in \textbf{C++}
for efficiency and bound to \glish, therefore, all
capabilities of interest to the user are controllable from the
\glish\ Command Line window.

\end{description}


\section {How to use the Documentation}

The documentation for \aipspp\ is layered and so it is useful for you to
understand that layering so that you can use it effectively.

\subsection {For the New User}

\subsubsection {Glish}

\begin{itemize}

\item In the document you are reading now (Getting Started with \aipspp)
there is a \htmlref{Glish Overview}{glish:overview} section that
explains some of the basic syntax of \glish.

\item \htmladdnormallink{\emph{Getting Started with Glish} by Rick
Fisher}{../../notes/195/195.html} describes the basics of how to use Glish,
the scripting language that we use to control \aipspp\ \tools\ from.

\end{itemize}


\subsubsection {\aipspp}

\begin{itemize}  

\item The document you are reading now (Getting Started with \aipspp),
gives you general context and information about the system.  In reading
this document, it is useful for you to know some simple \glish\ syntax
because there are many example provided in \glish.

\item {Glossary} - you might also find the \htmladdnormallink{Glossary}{../../glossary/glossary.html}
a useful source of information.

\item {Dictionaries} - we also provide some software translation dictionaries for users of
other packages.  If you are used to doing something in that package,
this helps you find out how to do it in \aipspp.

There are dictionaries for
\htmladdnormallink{AIPS}{../../cookbook/swdictaips/swdictaips.html}
and
\htmladdnormallink{Miriad}{../../cookbook/swdictmiriad/swdictmiriad.html}.

\end{itemize}



\subsection {For High-Level Information}

\subsubsection {Cookbook}

The \aipspp\ Cookbook is designed to provide information on how to do
relatively high-level things that are likely to be relevant to an
astronomer processing data.    To use these Volumes effectively, you
should have some familiarity with Glish, and you should understand the
basic \aipspp\ concepts regarding \tools\ and how to use them.  

The Cookbook comes in three volumes.

\htmladdnormallink{Volume 1 - Basic Tools}{../../cookbook/cbvol1/cbvol1.html}
gives examples of how to use some generic \aipspp\ capability
such as tables, plotting, image manipluation and data display.  

\htmladdnormallink{Volume 2 - Generic Processing}{../../cookbook/cbvol2/cbvol2.html}
describes generic astronomical data processing. 

\htmladdnormallink{Volume 3 - Telescope Specific Processing}{../../cookbook/cbvol3/cbvol3.html}
describes telescope-specific data processing.

The Cookbook volumes show you how to do {\it some} things.  But for all
the details of each \tool\ that you might find in these examples, you
will ultimately need to refer to the \htmladdnormallink{User Reference
Manual}{../../user/Refman/Refman.html}.

\subsubsection {Recipes}

The \htmladdnormallink{Recipes Repository}{../../recipes/Recipes/index.html}
provides \glish\ scripts of limited scope which perform or demonstrate
a useful operation.


\subsubsection {News Letters}

Another source of high-level information is in the series of 
\htmladdnormallink{News Letters}{../../newsletters/index.html} (now terminated). 
These are aimed at describing some interesting piece of functionality
for astronomers.


\subsection {For Detailed Information}

\subsubsection {Glish}

There is a comprehensive 
\htmladdnormallink{Glish Manual}{../../glish/glish.html}
that you should use to gain a detailed understanding of \glish.
It is a reference manual.  Therefore if there is
something you want to do in \glish,  but don't know
the syntax for, this manual is the place to look.

\subsubsection {User Reference Manual}

The ultimate repository of information about \aipspp\ \tools\ is the
\htmladdnormallink{User Reference Manual}{../../user/Refman/Refman.html}.
This manual does not generally offer you
astronomical context (this is the job of the CookBook).  It is truly a
Reference Manual.

To use the URM effectively, you should be reasonably experienced with
Glish and you {\it must} understand the basic \aipspp\ concepts regarding
\tools\ and how to use them.  

It is the URM that will enable you to write your own Glish scripts
and create your own \tools\ using other \aipspp\ \tools.

This manual is structured hierarchically  by Package, Module and Tool. 
Each Package is targeted at a broad functional  area such as Synthesis
processing.  Within each package there are a number of Modules, breaking
the package structure into smaller components. Finally, each Module
contains a number of \tools\ and (global) functions.

Each Module has ``Module'' documentation to a varying degree.  This documentation
is expected to offer you information that is relevant to all of the \tools\
in the  module, and that which unifies those \tools.  There are usually
some examples in the Module documentation.

Each \tool\ is documented in the same structure.  There will be some
general discussion about what the \tool\ is for and what its capabilties
are and some examples of how to use it.  Then  each \tool\ constructor
and function is documented.    These should describe what every argument
to every constructor or function does.  There should be some examples as
well.

The quality of the User Reference Manual is uneven.  There are some well-documented
Modules and \tools\ and some poorly documented ones.


\subsection {For Further Detailed Technical Information}

Other technical information can be found in the series of 
\htmladdnormallink{Notes}{../../notes/notes.html}. These Notes cover a wide range
of interests from software techniques to algorithms.  They are not aimed
at the casual user.





\section {Essential Concepts and Terminology}

In any software package there are concepts and language that you must
learn to be able to use the package effectively.  This is especially
true for \aipspp\ because there are some {\it new} concepts
compared to other packages that many of you might already be familiar with
(e.g. AIPS, Miriad, GIPSY etc).   

It is essential that you understand these concepts and terminology
so that you can read the documentation and use \aipspp\ effectively.  
In this section we will talk generally about these concepts. In the
following section, we will show some examples of how to actually
do things in \aipspp\ with these concepts from the \glish\ command line.


\subsection {What is a Tool ?}

We use the word \tool\ in \aipspp, and it has a meaning which is
analogous to the "tools" we are all familiar with in our usual computing
environment.  A browser is a tool; you can start several instances of
it, it has an interface (often GUI-based) and that gives you control
over what the tool can do  (e.g. format an HTML page, pull down a menu 
and select something).    I.e. it is software 'program' which has some
'functions' to do things.

In \aipspp, a \tool\ is something very similar; it is a collection of
related functions (\tool\ functions) that generally operate on some
common data source.    The range of things that can be done with each
tool is always focussed.  By analogy, a browser provides ways of
formatting mark-up languages (e.g. HTML) but you don't use it to do
image manipulation.  

\tools\ are ``constructed'' (or created) when you need one.   In our
browser analogy, your browser tool is constructed/created when you
type in the program name at the Unix command line.

\begin{verbatim}
% mozilla
\end{verbatim}.

This creates (constructs) the browser process or tool (and you can create as many as you like)
and gives you access to its functions through its GUI.

As well as \tools\ and \tool\ functions, in \aipspp\ we also have a
number of global functions (or just functions).  These functions stand
on their own and are not tied to a specific \tool\ (see examples in
followin section).

For those of you who are familiar with Objected Oriented programming,  a
\tool\ is just an object and it has \tool\ functions (methods) that you
can execute. This Object Oriented interface is exposed to users at the
command line.




Let us give a few examples of \aipspp\ \tools.

\begin{itemize} 

\item [Image]

An Image \tool\ is a \tool\ which has functions which process 
image data.  Now note an important thing.  There is not just {\bf one}
Image \tool\ which is used to process all the images you ever make in
\aipspp; if you wish to access an \aipspp\ image disk file, then you create
(or ``construct'', as we generally say) an Image \tool\ that is
associated with that image file.   Then all the functions of that
Image \tool\ operate on that data file (e.g. display it, compute
statistics, regrid it etc).      An Image \tool\ cannot exist
without a data source.

You will generally make quite a lot of Image \tools\ in the course of
processing images in \aipspp.

\item [Imager]

An Imager \tool\ is a \tool\ which is used to make images from
visibility data.  Its data source is then a visibility disk file (a
thing we call a Measurement Set) with which you construct an Imager
\tool.  It has lots of functions which then process the visibilities from
those data to make images.  An Imager \tool\ cannot exist without a data
source.  Like Image \tools, you may construct more than one Imager \tool,
but generally you will only have a small number of them.

\item [Quanta]

A Quanta \tool\ has functions which manipulate values and units.  For
example, convert 5km/s to pc/h, or add 20km to 3cm and give me the
answer in furlongs.  A Quanta \tool\ can exist without a data source. 
For this reason, the \aipspp\ system provides one pre-made Quanta \tool\
for you, and it's the only one you ever need to use.  If you really
want, you can make your own, but there is generally no point to doing
so. 

\end{itemize} 

So some \tools\ are associated with a data source, and some aren't.
Finally, when you construct a \tool, there may be more than one way to 
do it.  For example, you can construct an Image tool in many ways.
Here are three  ways (of many).

\begin{itemize} 

\item By converting a FITS file to an \aipspp\ file 

\item By directly associating with an \aipspp\ image disk file.

\item By creating an empty \aipspp\ image disk file from a specified shape and 
coordinate system.

\end{itemize}



\subsection {Destroying Tools}

When you construct a \tool, it takes up some computer resources (e.g. memory).
Because your \tool\ may be associated with a data file, it may also have
``locked'' that data  file so that other \tools\ can't access it (e.g. if your
\tool\ is modifying it.   

So it is very important that when you are finished with your \tool\ that
you destroy it.    If you don't do this, its resources will not be freed up
and you may leave files locked.  

A thing you should {\bf never} do is overwrite a \tool\ without first
destroying it.  You will get in big trouble if you do this.

Every \tool\ has a function called {\stff done} which will destroy the tool,
free up its resources and remove all locks.  Note that this does not
delete any underlying disk data files.  There are examples in the following
section. 

\subsection {Are Tools the same as Tasks ?}

Astronomy packages such as Miriad and AIPS are not object oriented; they
are process oriented.  This means that there is a process, usually
called a ``Task'' that has some particular functionality. For example,
in Miriad there is a Task called ``histo'' which computes statistics
from an image.  The user supplies it with inputs such as the input image
file name  and executes (runs) the task.  With \aipspp, the same
functionality is achieved by constructing (creating) an Image \tool\
from the image data file and then executing the {\stff statistics}
function.


\subsection {Terminology Summary}

In the above description there are just a few pieces of terminology that
you will see over and over.  Let us summarise them

\begin {itemize}

\item Tool - A software process which has a collection of related functions
(usually) operating on a common data source.

\item Constructor - a way in which a \tool\ is constructed (created).  Each 
\tool\ type might have more than one constructor.

\item Tool function - Allows you to execute specific functionality of a \tool.
Each \tool\ will typically have many functions for you to execute.

\item Global function - A function which is *not* tied to a specific tool
\end{itemize}



\section{More Details about Tools and functions using the Command Line}

In the previous section we talked in general terms about \tools\
and \tool\ functions.  Now we show some examples using the
\glish\ command line.    

\subsection {Loading the tool}

Before you try to create a particular \tool, you need to
tell \aipspp\ to load the commands that define the tool.
For example, if you wish to create an Image tool, you need
to first tell Glish about Image tools.  Here are some examples
of the most fundamental and useful tools in \aipspp.

\begin{verbatim}
% glish
- include 'table.g'                     # Access Table tools
- include 'quanta.g'                    # Access Quanta tools
- include 'measures.g'                  # Access Measures tools
- include 'image.g'                     # Access Image tools
- include 'pgplotter.g'                 # Access PgPlotter tools
- include 'catalog.g'                   # Access Catalog tools
- include 'imager.g'                    # Access Imager tools
- include 'ms.g'                        # Access MS tools
- include 'toolmanager.g'               # Access the toolmanager tool
\end{verbatim}

You might ask why don't we just load all of those tool scripts
so you do don't have to bother about it ?  We can and we do.
If you type

\begin{verbatim}
% aips++
\end{verbatim}

that's exactly what will happen.  However, it all takes time to
load these scripts into the computers memory.  It is often more
effective for you to just load the commands relevant to
the \tool\ you wish to work with.  When writing scripts,
this always how we use the system.

In the examples below, we assume you have already loaded the
appropriate scripts.  All the ones you need are named in
the examples above.

\subsection{Types of constructors}

In general \tools\ are made using their corresponding
\texttt{constructors}.  Generally, a \texttt{constructor} goes by the
descriptive name of the \tool.
\vspace{0.18in}
\hrule
\heading{ Making an imager, an ms, or an image \tool}

\hrule

\begin{verbatim} 
imgr:= imager('filename of an MS') 
include 'ms.g'
img := image('filename of an image') 
\end{verbatim} 
\hrule
\vspace{0.18in}

The variable on the left-hand side can have any name you choose. 

The catalog and toolmanager \tools\ can also construct a tool from
a table name and an appropriate constructor (that is chosen for
you).

\vspace{0.18in}
\hrule
\heading{ Making an imager, an ms, or an image \tool\ using the catalog 
or toolmanager}

\hrule

\begin{verbatim} 
tm.tool('filename of an MS') 
dc.tool('filename of an MS') 
tm.tool('filename of an image') 
dc.tool('filename of an image') 
\end{verbatim} 
\hrule
\vspace{0.18in}

Some \texttt{constructors} create a \tool\ after performing some
operation such as format conversion. For example, the 
\htmlref{\texttt{constructor fitstoms}}{ms:ms.fitstoms.constructor} converts a
FITS data file to an MeasurementSet, and creates an 
\htmlref{ms}{ms:ms.ms.constructor} \tool.
\vspace{0.18in}
\hrule
\heading{ Converting a FITS file to a MeasurementSet}

\hrule
\begin{verbatim}
myms:=fitstoms('output MS file name', 'input FITS file name')
\end{verbatim}
\hrule
\vspace{0.18in}

Other examples of these types of \texttt{constructors} are \htmlref{\texttt{
imagefromfits}}{images:image.imagefromfits.constructor} and \htmlref{\texttt{imagefromarray}}{images:image.imagefromarray.constructor}.  

Finally, Some \texttt{constructors} do not need an argument. Examples are
\vspace{0.18in}
\hrule
\heading{Constructors without arguments}

\hrule
\begin{verbatim}
cattool:=catalog()         # create a Catalog tool
myplotter:= pgplotter()    # create a Pgplotter tool
\end{verbatim}
\hrule
\vspace{0.18in}

The list of \tools\ that are constructed and active are
displayed on the Tool Manager GUI in the \textsf{Tools in Use}
view. Once a \tool\ is created, its various \texttt{functions}
which are meant for different operations can be used.
\vspace{0.18in}
\hrule
\heading{Constructing a Table \tool}
\hrule

\begin{verbatim}
mytable:= table('3C273XC1.ms')
\end{verbatim}
\hrule
\vspace{0.18in}

\htmlref{\texttt{table}}{table} is a general \tool\  for 
 operations on various types of 
\aipspp\ Tables. This \tool\ is not something that you may normally
use in standard data processing but it can be very useful if you wish
to do something out of the ordinary. The left-hand side of this
expression, \texttt{mytable}, is the name of the Table \texttt{tool} you created. You can
choose any name you like. The right-hand side is the 
 \texttt{constructor} which takes a file name,
in this case \textit{3C273XC1.ms}, as an argument and 'constructs' a
\tool.  If you click \textsf{Refresh} in
the Tool Manger GUI, the name of the newly constructed \tool\ now
appears in the list of \textsf{Tools in Use}. This \tool\ is now specifically
meant for operations on the MeasurementSet \textit{3C273XC1.ms}. You
can create another Table \tool\ (with a different name) for another
MeasurementSet or some other \aipspp\ Table.

\subsection{Using \texttt{Tool Functions} from the Command Line window}

The general syntax for using a \texttt{tool function} is
\vspace{0.18in}
\hrule
\heading{ General syntax for tool functions}

\hrule
\begin{verbatim}
[output:=]tool.func(arg)
\end{verbatim}
\hrule
\vspace{0.18in}

where \tool\  is the name of the actual instance of the \tool\  ({\em e.g.}, (\texttt{mytable}), 
\texttt{func} is the name of the \texttt{function} ({\em e.g.}, \texttt{getcol}), 
and \texttt{arg} are the
arguments of the \texttt{function}. When no arguments are needed then the
expression  ends with ().  The left-hand side is sometimes needed
if the \texttt{function} produces an output which may have to go into a 
\glish\ variable.  

Each \tool\ may have several \texttt{functions}:
\vspace{0.18in}
\hrule
\heading{ Some \texttt{functions} of a Table \tool}

\hrule
\begin{verbatim}
summary         # get a summary of the contents of the Table
colnames        # return the names of columns of the Table
getcol          # get values of a specific column in to a glish variable
getcoldesc      # get the description of a column
getkeywords     # get all the keywords of the Table
ncols           # return number of columns
nrows           # return number of rows
name            # return the name of the Table on the dis
\end{verbatim}
\hrule
\vspace{0.18in}

Execution any of these \texttt{functions} to \texttt{mytable} is done
in the following way.
\vspace{0.18in}
\hrule
\heading{ Executing tool functions}

\hrule
\begin{verbatim}
mytable.summary()   # watch the summary appear on the Logger window
mytable.colnames()  # column names appear on the Command Line window
a:= mytable.getcol('ANTENNA2') # column names now assigned to a
\end{verbatim}
\hrule
\vspace{0.18in}

In the last example, the \glish\ array \texttt{a} now contains all the
values of the column \textbf{ANTENNA2}.
Note that the array size of \texttt{a} is equal to the number of rows, which
was automatically set by the \glish\ statement above. You can check
the shape of an array using the {\tt ::shape} attribute.
\vspace{0.18in}
\hrule
\heading{ Check array size or shape}
\hrule

\begin{verbatim}
a::shape
b:=mytable.getcol('UVW')
b::shape
\end{verbatim}
\hrule
\vspace{0.18in}

You have just come across one of the important features of \glish,
namely automatic type assignment. The type of the variable (integer,
floating, scalar, vector) is assigned automatically as it is created;
therefore, you do not need to declare its type. There are many other
nice features in \glish\ which you can learn by reading the document
by Rick Fisher entitled
\htmladdnormallink{\emph{Getting Started with Glish}}{../../notes/195/195.html}.
\vspace{0.18in}
\hrule
\heading{ Destroy a Table \tool}

\hrule
\begin{description}
\item[GUI] Select \texttt{mytable} under the \textsf{Tools in Use} view
column and click \texttt{Delete}
\item[CLI]
\begin{verbatim}
mytable.close();		# If mytable still open
tabledelete('3C273XC1.ms')
\end{verbatim}
\end{description}
\hrule
\vspace{0.18in}

Note that in creating the \tool, \texttt{mytable}, you did not make
any copy of the MS (i.e., the original Table) \textit{3C273XC1.ms}. By
making a Table \tool\ with the MS attached to it, you are
able to gain access to various parts of the MS and use the 
 \texttt{functions} of the Table \tool\ to operate on them.  This is the
general way in which the various \tools\ and \texttt{tool functions} are
used in \aipspp.  The above example is actually a special one, chosen for
demonstrating access to the inside of an MS. One of the things you can
do with an MS is create an Imager \tool, which has various 
\texttt{functions} to make images and deconvolve them.  You can also
create a Calibrater \tool\ with an MS that has \texttt{functions} for
calibration of the UV data.                        

Below are some more examples of using \texttt{tool functions} from the Command Line
window. The commands below were not designed to try out in this session. They
are only examples.
\vspace{0.18in}
\hrule
\heading{ More table toolfunctions}

\hrule
\begin{verbatim}
myms.summary()                 # give the summary of myms
myms.range('TIME UVDIST')      # get the ranges of TIME and UVDIST
aa:=myms.range('TIME UVDIST'') # get the ranges into a record aa
\end{verbatim}
\hrule
\vspace{0.18in}

The ranges are now available in the record \texttt{aa} as record members
\texttt{aa.time, aa.uvdis}.\\
\vspace{0.18in}
\hrule
\heading{Setting imaging parameters}

\hrule
\begin{verbatim}
myimgr.setimage(cellx='5arcsec', celly='5arcsec', nx=256, ny=256,
    stokes = 'I')
\end{verbatim}
\hrule
\vspace{0.18in}

Note that other arguments of \texttt{setimage} such as \texttt{doshift},
\texttt{phasecenter}  take on default values. It is also possible to use
outputs of other \texttt{functions}  as arguments where applicable. 
\vspace{0.18in}
\hrule
\heading{Various ways of setting the imager phasecenter}

\hrule
\begin{verbatim}
imgr.setimage(phasecenter=
              image('myother.image').coordmeasures().direction)
imgr.setimage(phasecenter=
              dm.direction('j2000', '05h30m','-30.2deg'))
\end{verbatim}
\hrule
\vspace{0.18in}

\subsection{More Examples of \tools\ and \texttt{functions}}

Before leaving the subject of \tools, make one more 
\tool\ which is for a general utility  and use some of its 
\texttt{functions}.
\vspace{0.18in}
\hrule
\heading{Creating a pgplotter tool}

\hrule
\begin{description}
\item[GUI] Select \texttt{display.plotter.pgplotter} and press Create.
Then in the constructor view, leave the name as \texttt{myplotter}
and just press Create to construct the \texttt{pgplotter} \tool.
\item[CLI] Create a \texttt{pgplotter} \tool\  by typing  on the Command Line 
window:
\begin{verbatim}
include 'pgplotter.g'
myplotter:= pgplotter()
\end{verbatim}
\end{description}
\hrule
\vspace{0.18in}

Note that this  tool constructor can be used with no argument. It
brings up a \texttt{pgplotter} GUI like the one you saw  before while
executing some functions earlier. The Tool Manager Tools in Use view
now includes \textbf{myplotter}.
The \texttt{pgplotter} GUI is shown in Figure 11.  You can now use this plotter
to make any plot you want using the various \texttt{functions} of the
\texttt{pgplotter}
\tool.\\

\begin{center}
\begin{latexonly}
\bigskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-pgplottergui.ps,width=4in,height=4in}
\caption{\texttt{pgplotter} GUI}
\end{figure}
\end{latexonly}
\end{center}
\bigskip

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-pgplottergui.gif"><BR>
Figure 11:  \texttt{pgplotter} GUI
</center>
\end{rawhtml}
\end{htmlonly}

Now let us use the GUI or the CLI to plot some points.
First make two arrays \texttt{x}
and \texttt{y}, with \texttt{x} having values from 1 to 10 and \texttt{y =
x*x}, then plot \texttt{y} against \texttt{x}. 
\vspace{0.18in}
\hrule
\heading{Plotting x vs y}

\hrule
\begin{description}
\item[GUI]
\begin{itemize}
\item Select the \toolfunction\ \texttt{plotxy}
\item In \texttt{x}, type \texttt{1:10}
\item In \texttt{y}, type \texttt{(1:10)*(1:10)}
\item Press the Go button
\end{itemize}
\item[CLI]
\begin{verbatim}
x:=1:10
y:=x*x
print x, y
myplotter.plotxy(x,y)
\end{verbatim}
\end{description}
\hrule
\vspace{0.18in}

\texttt{plotxy} is one of the \texttt{functions} of the \texttt{pgplotter}
\tool. For those of you who use PGPLOT a lot, you will be pleased to
know that the \texttt{pgplotter} \tool\ allows you to do all the things you
can do with PGPLOT from the Command Line window, or through a 
\glish\ script of the various PGPLOT-type commands, or through the
pgplotter GUI.
\vspace{0.18in}

\hrule
\heading{ Label the axes and write some text on the plot}
\hrule
\begin{verbatim}
myplotter.lab('Xaxis label', 'Yaxis label', 'Top header')
myplotter.text(2,80,'Plot of X vs Y')
\end{verbatim}
\hrule
\vspace{0.18in}

You can now dismiss the \texttt{pgplotter} GUI by clicking  the \textsf{Dismiss}
button.

Notice that the \texttt{pgplotter} GUI has options under the menu items 
\textit{File, Tools and Edit}, These options allow you to save or print
the plot, to add other items to the plot, to zoom. The \texttt{pgplotter}
\tool\ is useful for making your own plots or customizing plots that
\aipspp\ has made.



\subsection {Destroying \tools}

We discussed in the previous chapter how it is very important to destroy
tools when you are finished with them.  This is because  they take up
some computer resources (e.g. memory) and may lock data files.  Let's
see some examples now of how to do this with the {\stff done} function,
which every \tool\ should have.

When you destroy a \tool,  it does not delete any disk-based data file that it may
be associated with.

\hrule
\heading{Destroy a tool correctly}
\hrule
\begin{verbatim}
im1 := imagemaketestimage('zz')         # Create Image tool and write image into disk file 'zz'
im1.statistics()                        # Do statistics
im1.done()                              # Destroy tool
\end{verbatim}
\hrule
\vspace{0.18in}


It is a very bad thing to overwrite a \tool.  You should never do this. It will
leave resources un-freeable, leave data files locked and possibly cause \aipspp\ to
crash.

\hrule
\heading{Overwrite a tool - BAD BAD BAD}
\hrule
\begin{verbatim}
im2 := image('zz')                      # Create Image tool from disk file
im2.statistics()                        # Do statistics
im2 := imagemaketestimage()             # Overwrite tool; BAD BAD BAD BAD
im2.done()                              # Try to destroy tool; will not work correctly
\end{verbatim}
\hrule
\vspace{0.18in}

To deal with this situation correctly, we should have done

\hrule
\heading{Destroy tool before reusing}
\hrule
\begin{verbatim}
im2 := image('zz')                      # Create Image tool from disk file
im2.statistics()                        # Do statistics
im2.done()                              # Destroy tool
im2 := imagemaketestimage()             # Construct a new tool (with the same name)
\end{verbatim}
\hrule
\vspace{0.18in}




\subsection{Global Functions}

In all the examples discussed above, the \texttt{functions} which actually
do the job are attached to a \tool. To use the \texttt{function}, the
\tool\ to which it is attached need to be created first. As mentioned
earlier, there are some useful \texttt{functions} which are not attached
to any \tool. These are known as \texttt{global functions} and they can be
activated at any point - usually from the Command Line window.
Although \texttt{global functions} may look different, they do belong to
the \aipspp\ hierarchy in the sequence packages.modules.\texttt{global functions}.
Thus, the access to \texttt{global functions} through the Tool Manager GUI is
by clicking the appropriate package and module.
If the \textsf{Run} button below the column
\textbf{global functions} in the Tool Manager GUI is clicked, then it will,
in most case, open up a GUI from which the \texttt{global function} can be activated
similar to the \texttt{tool functions} described earlier.
\vspace{0.18in}
\hrule
\heading{Examples of global functions}

\hrule
\begin{verbatim}
cat             # list the files and Tables in the Catalog
icat            # list images in the Catalog
tablecopy       # make a copy of a Table
tabledelete     # delete a Table
mean            # compute the mean of a set of number
moments         # compute the moments of a set of numbers
gaussian2d      # compute a 2-dimensional gaussia
\end{verbatim}
\hrule
\vspace{0.18in}

Using \texttt{global functions} is very similar to using \texttt{tool
functions}.  The difference is that \texttt{global functions} do not
require a \texttt{create} operation before they can be used. These
\texttt{functions} are global to \aipspp\ and they can be
entered at any point so long as the relevant packages or modules are
loaded using the \texttt{include} command. Some \texttt{global
functions} have optional arguments and produce output records, plots,
or GUIs. Currently, most \texttt{global functions} can be used
from the Tool Manager window.\\
\vspace{0.18in}
\hrule
\heading{Using \texttt{global functions} from the CLI}

\hrule

\begin{verbatim}
include 'statistics.g'          # load the statistics functions
mean(1:100)                     # mean of numbers 1 to 100
x:=[1,3,7,8:15,19,23]           # vector assignment
mean(x)                         # mean of x
note('This is a note in the Logger file')	# Note to the logger	
help('moments')                 # help on moments
web()                           # Drive the Web Browser to 
                                # the last requested help
moments(3,1:20)                 # compute up to 3rd moment of 
                                  numbers 1 to 20
\end{verbatim}
\hrule
\vspace{0.18in}

\hrule
\heading{ Use a  {\bf gaussian1d} function and plot it}

\hrule
\begin{verbatim}
include 'gaussian.g'
x:=1:100
y:=gaussian1d(x, height=5, center=40, fwhm=20)
include 'pgplotter.g'
mypgplotter:=pgplotter();
mypgplotter.gui()
mypgplotter.plotxy(x,y)
\end{verbatim}
\hrule
\vspace{0.18in}

The plot, as shown in Figure 12,  appears on your screen.

\begin{latexonly}
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-gaussplot.ps,width=5in,height=4in}
\caption{Gaussian 1D Plot}
\end{figure}
\bigskip
\end{latexonly}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-gaussplot.gif"><BR>
Figure 12:  Gaussian 1D Plot
</center>
\end{rawhtml}
\end{htmlonly}











\section{Data  and Images in \aipspp}

In \aipspp, all forms of data ({\em i.e.} visibility, images,
spectra, history, header information, logs) are stored in \htmlref{Tables}{table}.
Tables consist of information arranged in rows and columns.  The
columns have names (e.g. {\bf UVW, TIME, ANTENNA1, SIGMA}) and the
rows are numbered.  Keywords may be attached to both the Table as a
whole or to specific columns and are used to specify additional
information.  Examples of keywords are revision number of a Table,
author of the Table, units in a column, coordinate information for a
column and so on.  Keywords may also be used to store other Tables.

\subsection{Tables}

A Table and its contents are stored on disk as a directory with the
Table name ({\em e.g.} \textit{3C273XC1.ms}) and may contain a number of
files.  One technical aspect of Tables that you should be aware of is
that some Tables reference other Tables.  We try to avoid making
copies of Tables so that if two Tables contain almost the same data
except for one or two columns, then a reference Table is created that
points back to the original Table for shared information.  This
mechanism is also used for sorts and selections. If you sort or select
a Table to create another Table then the new Table points back to the
original Table via a column of row numbers. The only reason
you need to be aware of this  is to avoid deleting the original Table.

Although there can be many different types of Tables in
\aipspp, representing different types of data, there are two
important types of Tables which you will commonly use: MeasurementSet
(MS) (which represents data from a telescope, {\em e.g.}  visibility data)
and Image (which represents the distributions of intensity on the
sky).  An Image may have two or more dimensions, {\em e.g.} position,
velocity, stokes.

\subsection{MeasurementSet (MS)}

A \htmlref{MeasurementSet(ms)}{ms} is simply a Table obeying certain conventions
that allow it to represent observations from many different types of
radio telescopes.  In addition to a number of data columns, it also
contains sub-Tables stored as Table keywords (as discussed above).
These keywords contain information on the antennas, feeds, fields, and
spectral windows.  An MS can be dynamic in that new columns can be
written into it as data are processed.  For example, the original
measured UV data appears in the data column and subsequent processing
can produce additional columns containing corrected data (for e.g.
after a Selfcal) or  Model data  (a set of clean or other components)

\subsection{Image}

An \htmlref{Image}{images} is also a Table. The keywords in this Table contain
information on units and coordinates. The pixels are stored as a
single cell in a column. Other information about the
image (e.g. its co-ordinates, origin, history, characteristics)
are stored under separate keywords. 

\section{Running \aipspp}

In this section, we describe how to set up your environment to run
\aipspp. This is quite straightforward and only requires a few
steps.

\subsection{Initializing your environment to run \aipspp}

Because \aipspp\ is run from a Command Line window
interpreter/control hub, before starting \aipspp, you are
going to need to load some environment variables.  This is the most
site specific part of using \aipspp.  You need to know where
your local installations are kept, and what the update policy is. We
keep four copies at NRAO-SOC and NRAO-CV, they are \texttt{/aips++/release,
/aips++/stable, /aips++/weekly}, and \texttt{/aips++/daily}. The first
(\texttt{release})
is the production version that corresponds to the last formal release,
and the second (\texttt{stable}) is a regularly updated snapshot of the current
development system. If possible, you should use release or stable. The
latter two installations (\texttt{weekly} and (\texttt{daily}) are developmental copies
and should not be used unless you need to use something specific that
is available only there.  Of these two, \texttt{weekly} is more stable, but
\texttt{daily} gets bug fixes and new features more quickly.  \texttt{Daily} is
recompiled often, so you may see strange results if the executable you
need is either not available or is deleted prior to a re-compilation.

Thus, if the installation you need is kept in {\em e.g.}, 
\texttt{/aips++/release}
\vspace{0.18in}
\hrule
\heading{Initializing your shell to run \aipspp}
\hrule

\begin{verbatim}
. /aips++/release/aipsinit.sh       # Bourne/Korn/Bash
source /aips++/release/aipsinit.csh # csh and similar shells
\end{verbatim}
\hrule
\vspace{0.18in}

\subsection{Creating working space}

We recommend that you create a separate directory on your disk with
plenty of space to work in \aipspp. Unlike AIPS, \aipspp\ does not have
its own catalog and instead relies upon the file system of your
computer to manage the files. Although it is possible to specify full
directory paths for file names that need to be read or written by
\aipspp, it is most convenient to work in the directory
containing the files on which you wish to work. Thus you should create
a separate directory to run \aipspp\ and move to that directory.
\vspace{0.18in}
\hrule
\heading{Create a separate directory to run \aipspp}
\hrule
\begin{verbatim}
mkdir new_directory_name
cd new_directory_name
\end{verbatim}
\hrule
\vspace{0.18in}

\subsection{Setting X-windows to run \aipspp}

\aipspp\ can be run from a simple character-based terminal, but 
you will get better results running it with a windowing interface.
\vspace{0.18in}
\hrule
\heading{Setting your DISPLAY environment}

\hrule
\begin{verbatim}
export DISPLAY; DISPLAY=:0.0       # Bourne/Korn/Bash shell:
setenv DISPLAY :0.0                # csh shell
\end{verbatim}
\hrule
\vspace{0.18in}

\subsection{Running \aipspp}

To run \aipspp:
\vspace{0.18in}
\hrule
\heading{Starting \aipspp}

\hrule
\begin{verbatim}
aips++
\end{verbatim}
\hrule
\vspace{0.18in}
 
This does three things: Starts \glish, opens a Logger window where
messages are displayed, and opens the Tool Manager GUI.
The very first time that you start \aipspp, it may take some time
to start up, as some initializing files are being created. Subsequent
start ups will be much faster. 

Before proceeding any further, there are three things you absolutely 
must know: 
\vspace{0.18in}
\hrule
\heading{Essential commands}

\hrule
\begin{verbatim}
exit    # Exit from Glish
bug()   # Report a bug
ask()   # Ask the local contact or AIPS++ Project Staff
help()  # Get help
\end{verbatim}
\hrule
\vspace{0.18in}

Control-c and Control-z will abort and suspend \glish, 
respectively.

\subsection{Getting Help}

In \aipspp, help is available at various stages, both
from the \glish\ Command Line window and from the GUIs for various 
applications. Reference material for most things are usually
presented through your Web browser.

At the \glish\ Command Line window, help can be obtained 
by typing:
\vspace{0.18in}
\hrule
\heading{Get some help on a module, \tool, or \texttt{function}}

\hrule
\begin{verbatim}
help('general')       # modules in the general package
help('*name*')        # wild cards are allowed
help('catalog')       # tools and functions of the catalog 
help('catalog.show')  # function show of the Catalog
help('*cat*')         # all occurrences of 'cat' in help
\end{verbatim}
\hrule
\vspace{0.18in}

You can also get more detailed information on a specific subject by
using your browser.
\vspace{0.18in}
\hrule
\heading{Help via your Web browser}

\hrule
\begin{verbatim}
web()           # Drives to last requested help section
help('Refman:') # Drives to the Refman
help('Glish:')  # Drives to the Glish User Manual
\end{verbatim}
\hrule
\vspace{0.18in}

When using GUIs, some help is available for each of the buttons.  If
you position your mouse pointer over a given button for about a
second, a brief help pops up. The GUIs also have \textsf{Help} or
\textsf{Web} buttons which steer your Web browser to the appropriate
section or provide some additional help. The \textsf{Help} button is
usually located at the top right corner of the GUIs.

\clearpage

\subsection{Fine-tuning up your environment}

\aipspp\ uses a file called \texttt{.aipsrc} to control
how it works. To create a version of this file, or
to edit existing values, use the tool \texttt{setupwizard}.
\vspace{0.18in}
\hrule
\heading{Setting up the \aipspp\ environment}

\hrule
\begin{verbatim}
include 'setupwizard.g'
setupwizard()
\end{verbatim}
\hrule
\vspace{0.18in}

This will start a gui-based wizard for setting values in the \texttt{.aipsrc}
file. If you don't have a GUI available for the wizard, then you
can create the \texttt{.aipsrc} file by hand. See Appendix B for more
details.

\subsection{Brief overview of \aipspp\ windows and GUIs}

After starting \aipspp, the window from which you executed the 
 \texttt{aips++} command is now running the
\glish\ Command Line window. \glish\ is alive and well when
a `-' (or sometimes a `+') prompt appears on the screen.  You use the
\glish\ Command Line window to type commands.  At this
point rearrange the three windows (terminal, Logger GUI, and
Tool Manager GUI) any way that suits your convenience.

\begin{latexonly}
\medskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-logger.ps,width=5in}
\caption{The Logger window}
\end{figure}
\medskip 
\end{latexonly}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-logger.gif"><BR>
Figure 1:  The Logger window
</center>
\end{rawhtml}
\end{htmlonly}


\begin{description}
\item[The Logger window] shown in Figure 1, is something you may watch as
action takes place in response to your commands. Most actions are
reported to the logger, with only a few exceptions, such as 
({\em e.g.}, {\em Help}) that are reported to the \glish\ CLI window.
The Logger window has three frames. From left to right, they are  the
{\bf time}, the {\bf priority}, and the {\bf message}.  In addition, a
fourth frame may be activated which displays the module from which the
message arose. These frames are toggled on and off from the 
\textit{Options} menu in the window. The \textit{File} menu allows you
to: 

\begin{description}
\item[query] Select a subset of the messages using a query. You will
be prompted to fill in the details of the query.
\item[purge] clear the log messages,
\item[print] make a hardcopy of the log messages (you are prompted for the 
number of messages to print), 
\item[script] write commands in the log to a script
\end{description}

Notice that some messages have already been logged in the Logger
window after you started \aipspp. These messages tell you that
several default \tools\ have already been loaded ({\em e.g.},
 \texttt{viewer tool `dv'}, \texttt{catalog tool `dc'}).

\item[The Tool Manager GUI] (\htmlref{Figure 2}{gettingstarted:figure2}) is
central to \aipspp.  It is used to control \aipspp\ as well as to
obtain help on various \tools\ and functions in
\aipspp.  It is not desirable to resize this (or other
\aipspp) windows using the window manager on your
workstation. If you do so, you may get strange results in subsequent
operations.  

\end{description}

\section{Use of the Tool Manager}

The Tool Manager is key to the interactive GUI-based use of
\aipspp.  To use \aipspp, it helps to have
mastered the use of the Tool Manager. For this reason, we
suggest that you work through this section especially
carefully, performing the suggested examples as you go
along.




\subsection{Views in the Tool Manager}

Views of various aspects of \aipspp\ can selected using the tab
buttons just underneath the top menu.
The three principal views are:

\begin{description} 
\item[Manager] For traversing the hierachy of \tools, and for creating
new instances of \tools. This view (and the associated tab) is always
available.
\item[Tools in Use] For interacting with existing \tools. This view 
(and the associated tab) is always available.
\item[Tools, Constructors, or Global Functions] Each tool, constructor,
or global function has a view dedicated to it. These are added and
removed from the set of tabs as appropriate.
\end{description}

\begin{latexonly}
\medskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-toolman1.ps,width=5in}
\caption{The Tool Manager GUI as it appears when \aipspp\ is
started. This is the Manager view.}
\end{figure}
\medskip 
\end{latexonly}

\label{gettingstarted:figure2}
\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-toolman1.gif"><BR>
Figure 2: The Tool Manager GUI as it appears when <font face=helvetica>AIPS++</font>  
is started. This is the Manager view.
</center>
\end{rawhtml}
\end{htmlonly}

As described above, the various \tools\ and \texttt{functions} in
\aipspp\ are arranged in a modular, hierarchical fashion.  The overall
structure of \aipspp\ from a user point of view can be seen using this
view of the Tool Manager GUI.

\medskip
\begin{latexonly}
\medskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-toolman2.ps,width=4in}
\caption{The Tool Manager GUI with the Tools in Use view displayed}
\end{figure}
\medskip
\end{latexonly}


\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-toolman2.gif"><BR>
Figure 3:  The Tool Manager GUI with the Tools in Use view displayed
</center>
\end{rawhtml}
\end{htmlonly}

Under the \textsf{Tools in Use} view, if you press the button right
button to ``Show all tools'', you will see a list of \tools\ with
names like \textbf{dc} (default catalog),
\textbf{dv} (default viewer), \textbf{dl} (default logger),
\textbf{dm} (default measures).  \texttt{dm} is an innovative
\tool\ which performs varieties of operations related to
co-ordinates, time, quantities, and conversions. Any of these
\tools\ can be activated by clicking the required \tool
name and then clicking the \textsf{Show} button in the same window.
To see how this works, notice the tool \texttt{dl} (Logger) which was
already activated by default.  Click the \textsf{Dismiss} button on the
Logger window.  The Logger window is removed. Now select \texttt{dl} from
list of \textsf{Tools in Use} and click \textsf{Show}. The Logger window
reappears. This is the standard way in which the GUIs (Graphic User
Interfaces) of \tools\ that are not in use can be removed (it helps to
reduce the clutter on your screen) and brought back when needed.
Note that at the bottom of this view there is a line of buttons.
These control which tools are shown, how they are listed, and how
often the list is updated.

Now switch back to the Manager view. The top layer of \aipspp,
\htmladdnormallink{packages}{../Refman/Refman.html}, is listed in the
left most column. These are known as {\em packages}. Currently there are
nine packages in \aipspp\ (\texttt{general, utility, display, synthesis, dish,
BIMA, NRAO, NFRA, ATNF}). In addition, you will see an entry
\texttt{unclassified} when a classification is not
possible.

Each package contains one or more {\em modules}. The list of modules
in each package can be seen by clicking on the name of the package in
column 1 of the Tool Manager GUI. The list of modules appears in Column 2.

For instance, click on the package \texttt{synthesis}. The following list of
modules appears in the second column:

\begin{description}
\item[\htmlref{\texttt{calibrater}}{calibrater}]: module for calibrating UV data
\item[\htmlref{\texttt{componentmodels}}{componentmodels}]: module for
making source components for use in deconvolution or self-calibration
\item[\htmlref{\texttt{imager}}{imager}]: module for most imaging needs
\item[\htmlref{\texttt{simulator}}{simulator}]: module for simulating UV and other data
\item[\htmlref{\texttt{msplot}}{ms:msplot}]: module for plotting Visibility data in various ways
\end{description}

Each module can contain {\em tools} and {\em global functions}:

\begin{description}
\item[\tools] are collections of related functions that operate on 
some common data source. To use the \texttt{functions} of a \tool, the
\tool\ needs to be connected to the data source. This
connection is usually called ``creation'' or ``construction'', and is
performed using special functions called \texttt{constructors}.  Each
\tool\ may have one or more types of \texttt{constructors}.  Once a
\tool\ has been constructed, the user can use functions of the \tool\
to perform the various operations needed for data processing.
\item[\texttt{Global functions}] perform single straightforward operations that
cannot be naturally grouped. Invocation of the global function is
very straightforward, involving just the arguments of the function.
\end{description}

As an example, the \htmlref{Mathematics module}{mathematics} in the 
\texttt{utility}  package contains many \tools\ (including, 
\htmlref{fftserver}{mathematics:fftserver}, \htmlref{matrix}{mathematics:matrix}, 
\htmlref{polyfitter}{mathematics:polyfitter}) and \texttt{global
functions} (including, \htmlref{gauss1dfitter}{mathematics:gaussian1d},
\htmlref{mean}{mathematics:mean}, \htmlref{moments}{mathematics:moments}). 

\texttt{Global functions, tool constructors}, and \toolfunctions perform
the actual operations associated with data processing.  These 
 \texttt{functions} and \texttt{constructors} have various input arguments (with
sensible defaults) and optional outputs. These will be shown once you
press the Create or Run buttons.

Finally, the Tool Manager GUI contains a \textsf{Search} entry on the
top.  This entry can be used to search for the occurrence of any
string of characters in the entire \aipspp\ system. 
There is one entry \textbf{Search String} and a
button to the right to display the results of the search.  The search option
is very useful for locating the appropriate modules or \texttt{functions} for a
given operation for which you may only know a keyword.

\begin{itemize} 

\item For instance, type \texttt{advise} in the
\textbf{Search String} window and press return. The results can be
seen by pressing the \textbf{Search Results} button.

\item You get the answer \texttt{synthesis.imager.imager.advise}

\item This implies, that \texttt{advise} is a \texttt{function} of the
\tool\ \htmlref{imager}{imager} which is contained in the module 
\texttt{imager} of the
package \textit{synthesis}.

\item The general syntax for representing an "entity" in the
\aipspp\ hierarchy is thus

\begin{itemize}
\item \texttt{package.module.tool} or
\item \texttt{package.module.tool.function} or
\item \texttt{package.module.tool.constructor} or
\item \texttt{package.module.global function}
\end{itemize}

\item As a further experiment, type \texttt{imager} for the search
string and see the various occurrence of this string displayed in the
window. Notice that the same name ({\em e.g.} imager) is used for a module,
a \tool\ and a \texttt{constructor}. There is no clash in this
usage.

\end{itemize}

\subsection{An example of the use of the Tool Manager}

The concepts introduced above should become more understandable once
actually do something, so let's make an {\tt imager} \tool. 
\texttt{Tools} can be constructed from the Tool Manager GUI by selecting the
\tool\ name and then clicking the \textsf{Create} button. This
operation generates a view of the \tool\ constructor with various arguments.

\begin{latexonly}
\medskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-imagercons.ps,width=6in,height=4in}
\caption{Tool Manager view of the imager constructor}
\end{figure}
\medskip 
\end{latexonly}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-imagercons.gif"><BR>
Figure 4:  Tool manager view of the imager constructor
</center>
\end{rawhtml}
\end{htmlonly}
\vspace{0.18in}
\hrule
\heading{Making and using an \texttt{imager} \tool}

\hrule
\begin{itemize}
\item Click  the Manager tab  on the Tool Manager GUI. Then
      Select the \htmlref{\texttt{imager}}{imager} \tool\ by sequentially clicking \textbf{synthesis}
      under \textit{package}, {\texttt{imager} under \textit{module} and finally
      {\cf imager} under \textit{Tools}}.

\item Click  \textsf{Create}. A Constructor GUI  appears as shown in Figure 4.
      On the left hand size this GUI shows that there are two imager
      \texttt{constructors}, called imager and imagertester. 
 
\item Click  \htmlref{\texttt{imagertester}}{imager:imager.imagertester.constructor} under the list of 
      \textit{imager constructors}. The
      GUI displays the inputs to this \texttt{constructor}. This
      constructor creates a standard MeasurementSet and connects the
      imager tool to it. All the default arguments will work just
      fine for this demonstration. (Note that the other constructor
      takes the name of a MeasurementSet and so if you have one, you
      could use that constructor instead. Both constructors lead to an
      \htmlref{\texttt{imager}}{imager} tool that is used in exactly 
      the same way.)

\item type in the \tool\ name you want, by placing the cursor on that
      window. (or just leave it at its default \texttt{myimager})

\item Press the \textbf{Create} button. The imager constructor then
      starts to run. Afte 10-15 seconds, the view of the constructor will
      disappear and it will be replaced by a view of the tool
      functions (figure 5). The tabs at the tool will be updated.


\end{itemize}
\hrule 
\vspace{0.18in}
 
\begin{latexonly}
\bigskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-imagergui.ps,width=5in,height=4in}
\caption{Tool manager view of an imager tool}
\end{figure}
\bigskip
\end{latexonly}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-imagergui.gif"><BR>
Figure 5:  Tool manager view of an imager tool
</center> 
\end{rawhtml}
\end{htmlonly}

On the left of the view, you will see a scrollable list of the
functions of the tool. Selecting one of these functions causes the
corresponding tool function arguments to be shown on the right hand
side.  Input arguments have a white background, output arguments have
a grey background and cannot be edited.

For some complicated tools, such as imager, the functions may be
grouped. The particular group may be selected using the
button labelled 'Function groups' at the top of the list of
functions. If you do not find this helpful, you may access all
functions at once using the group 'all'.

To use a specific \texttt{function} of the imager \tool, do:
\vspace{0.18in}
\hrule
\heading{Using a \toolfunction}
\hrule
\begin{enumerate}
\item If present, choose the required group of functions by clicking on the
      'Function group' button.
\item Choose the required \toolfunction\ by clicking  it. This operation
      gives a one line description of the \toolfunction\ and a list of
      various input arguments. At any point, 
      you may press the \textbf{web} button to get detailed information on
      that function.
\item Enter the various input arguments. Some \toolfunctions\ may have
      no arguments. Short popup help on each argument is  available by placing 
      the mouse pointer on the argument name. More detailed help can
      send to your browser using the \textbf{web} button.
\item Click  \textsf{Go}
\end{enumerate}
\hrule
\vspace{0.18in}

Try this now for the \texttt{advise} \toolfunction found in the
helpers function group. This \toolfunction calculates maximum cell
sizes for the selected data in the associated MeasurementSet. You can
also set a field of view to get a recommended number of
pixels. 

\begin{latexonly}
\bigskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-imagergui2.ps,width=5in,height=4in}
\caption{Tool manager view of an imager tool showing the advise function}
\end{figure}
\bigskip
\end{latexonly}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-imagergui2.gif"><BR>
Figure 6:  Tool manager view of an imager tool showing the advise function
</center> 
\end{rawhtml}
\end{htmlonly}


Another good \toolfunction\ to try is \texttt{plotvis} to plot
the visibility data.

At this point you may switch views in a number of ways:
\vspace{0.18in}
\hrule
\heading{Switching Tool Manager views}

\hrule
\begin{itemize}
\item Switch to the Manager view using the tabs. Note that
a new tab \texttt{imager:myimager} now appears.
Switch back to the imager tool using this option.
\item Dismiss this view of \texttt{imager:myimager} using the
the \textsf{Dismiss} button. The tool still exists but this view has
been removed from the Tool Manager. The view can be recreated by
selecting the \tool\ name \texttt{myimager} in the
\textsf{Tools in Use} view and clicking \textsf{Show}. 
\item End the use of this tool (and the view) by pressing the \textsf{Done} button.
This will destroy the \tool\ altogether so that it can no
longer be used.
\item Switch to the Tools in Use view using the tabs.
\end{itemize}
\hrule
\vspace{0.18in}

\subsection{Saving and restoring function arguments}

The \textsf{Save} button at the bottom of the GUI, when pressed, saves
the current inputs of the currently selected \texttt{tool function} to a
default \glish\ record named \textit{lastsave}. Similarly
\textsf{Restore} fills in the arguments of that \texttt{function} from
previously saved values in \textit{lastsave}. Also when the
\textsf{Go} button is pressed the values used for the \texttt{tool function}
are automatically saved into \textit{lastsave}. The \glish\ record
\textit{lastsave} is written into a file called \textit{aips++.inputs.table}
in your \aipspp\ directory. This \aipspp\ Table can, in
principle, contain many \glish\ records. The inputs to a
\texttt{function} can be saved into a different record by changing the
name from \textit{lastsave} to some other name, say, \textit
{mysave1}. In this case \textit{mysave1} is written as another
\glish\ record in the same table \textit{aips++.inputs.table}
(This Table can be browsed from the File Catalog using the
\textsf{View} button). Same rules apply for \textsf{Restore}.

Note that \textsf{Save} and \textsf{Go} buttons do not save the entire
environment of \aipspp.  Each action only saves the inputs of only that
\texttt{tool function} which is executed. Thus the saved records in
\textit{aips++.inputs.table} can be of different length.

\subsubsection{The \textsf{Spanner} or \textsf{Wrench}}

For each of the parameters of a function, the \textsf{Spanner} (or 
\textsf{Wrench}) button offers the various options by which
parameters can be assigned or used.

\begin{itemize}
\item \textbf{Original}: Returns the original value the argument had when you
       opened the \texttt{function}. Useful if you typed something
       wrong and wanted to go back to the original value.

\item \textbf{Default} and \textbf{Clear} are self explanatory.

\item \textbf{Copy}: Copies the variable (whatever it is - a number, a string,
      an array) to the Clipboard (see below). Useful if the \texttt{function}
      has an output which you may want to use somewhere. Or if you want to
      transfer an argument from one \texttt{function} to another. 

\textbf{Paste} does the reverse of copy.

\item \textbf{Unset}: Sometimes not assigning anything to a variable 
       is sensible.

\item \textbf{Set}: The reverse of unset: sets the value back to
       a default value.

\item \textbf{View}: This option comes up depending on the context. 
       If the argument is an image name ({\em e.g.} an output image in
       \texttt{CLEAN}), then \textbf{view} brings up the Viewer tool. Or if it
       is a Table, it will bring up the Table Browser.

\item \textbf{Tool}: This option comes up depending on the context. 
       If the argument is a table name then \textbf{Tool} constructs
       an appropriate tool ({\em e.g.} \texttt{ms} for a
       MeasurementSet, \texttt{image} for an Image, {\em etc.}, and
       then uses the toolmanager to display the GUI.

\item \textbf{Manage}: This option comes up depending on the context. 
       For a region, the regionmanager is started. The regionmanager
       allows one to specify an area in an image 
       ({\em e.g.} blc, trc) or a polygon.

\item \textbf{From catalog} Opens up the File Catalog GUI from which
       a file name can be picked.

\item \textbf{From ms} Opens up a context-sensitive graphical tool to
       select items such as antennas or baselines.

\item \textbf{From image} Opens up the viewer to select either a point,
       region, or statistics.
\item \textbf{Save} Saves a record to the recordmanager. The
       recordmanager allows you to keep copies of useful records
       from session to session, and independently of the inputs
       system. Use \texttt {drcm.gui()} to see the GUI for the 
       recordmanager.

\item \textbf{Restore} Restores a record from the recordmanager.
\end{itemize}

\subsection{The \texttt{clipboard}} 

The \htmlref{\texttt{clipboard}}{tasking:clipboard} is just a clipboard. Any
\glish\ variable (A filename, an array, a string of characters, a number, a set of variables) can be
copied to the \htmlref{\texttt{clipboard}}{tasking:clipboard} and pasted back to
the same or some other place. For instance under the button
\textsf{Inputs}, near the top of a tool view, the option \textbf{Copy
to Clipboard} will copy all the inputs of the function to the
Clipboard. They can be pasted back using
\textbf{Paste} option under the same button. Under the
\textsf{Commands} button, which is next to it, the option \textbf{copy
to clipboard} will copy an equivalent \glish\ command string to
the Clipboard. This string, when typed on the Command Line window will
execute the function just like pressing the
\textsf{Go} button on the GUI. This string can, for example, be copied
on to the Command Line window using
\vspace{0.18in}
\hrule
\heading{ Pasting from the clipboard}
\hrule

\begin{verbatim}
x := dcb.paste()    # Set x to the value in the clipboard
eval(dcb.paste())   # Evaulate the contents of the clipboard
\end{verbatim}
\hrule
\vspace{0.18in}

where \texttt{eval} is a very useful \glish\ function that evaluates the
supplied string and returns the result.

\texttt{dcb} is in fact a \tool\ (\textit{defaultclipboard})
which has two functions \textbf{copy} and \textbf{paste}. It
belongs to the module \texttt{tasking} in the package
\texttt{Utility}. In principle, it is available under the
\textsf{Tools in Use} view, but you will hardly ever need to
use it from there.

Similarly variables can copied to the \htmlref{\texttt{clipboard}}{tasking:clipboard}:
copied into a \glish\ variable by using:
\vspace{0.18in}
\hrule
\heading{ Copying to the clipboard}

\hrule
\begin{verbatim}
dcb.copy(x)                   # Copy the glish variable x
dcb.copy(dm.source('3C273'))  # Copy the position of 3C273
\end{verbatim}
\hrule
\vspace{0.18in}

\subsection{The arguments status button}

At the right end of each entry is an indicator of the
status of the value. The states are:

\begin{description}
\item[Green tick] The value is valid. Execution can start.
\item[Red cross] The value is invalid. Execution cannot start until
this value is changed.
\item[No entry sign] No entry is allowed ({\em i.e.} output only field.
\end{description}

\subsection{The \texttt{scripter}}

Each function that is executed by the Tool Manager has an equivalent
\glish\ command string which could be used from the \glish\ prompt or
in a \glish\ script to achieve the same result. A \tool\ \htmlref{\texttt{
scripter}}{tasking:scripter} is available to record all equivalent \glish
commands for a Tool Manager interactive session. It can be enabled
using the option \textbf{Write to Scripter} under the
\textsf{Commands} button in the Tool Manager. This will start recording all
subsequent commands to the \htmlref{\texttt{scripter}}{tasking:scripter}
(actually the {\tt defaultscripter}: see the Tools in Use view of the
Tool Manager). 

\htmlref{\texttt{scripter}}{tasking:scripter} can save the
accumulated \glish\ commands to a file, in addition to other
capabilities. This file can be used as a \glish\ script, and can be
edited and executed. This is a good starting point for generating
customized \glish\ scripts. A given script can be executed from
\glish\ using the command \texttt{include 'myscript.g'}. A utility is
available to edit the script before execution as \texttt{
dc.edit('myscript.g')}.

\section{The File Catalog GUI}

Besides the Logger and the Tool Manager, the other important GUI is
the \htmlref{File Catalog GUI}{catalog:catalog.catalog.constructor}.  This
displays the contents of the directory in which you have started
\aipspp. Assuming that you started
\aipspp\ in a new directory that you created for this purpose,
the only content of this directory is the sub-directory \texttt{./cache}
which was also created by you on startup.  There are no other
files in this directory right now.

The File Catalog GUI offers many options and functions, including:

\begin{itemize}
\item listing files and directories in the catalog
\item selectively deleting  files or directories
\item making a copy of a file or rename a file
\item giving  a summary of the header information of images and data files
\item creating or editing an ASCII file 
\item executing  a \glish\ script
\item viewing  or displaying ASCII  files, images, and data sets
\item selecting and transmitting names of files to other processes
\item constructing a tool from a table using an appropriate constructor
\end{itemize}
\vspace{0.18in}
\hrule
\heading{Showing the Catalog GUI}

\hrule
\begin{description}
\item[GUI] Activate the File Catalog GUI from the Tools in Use view of
the Tool Manager GUI. Choose {\tt dc} and Click  \textsf{Show} 
\item[CLI]
\begin{verbatim}
include 'catalog.g'
dc.gui()
\end{verbatim}
\end{description}
\hrule
\vspace{0.18in}

The GUI for the File Catalog is activated and it is as shown in Figure
6, Of course, the file names you get may be different from the ones
shown in Fig 6.


\begin{center}
\begin{latexonly}
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-catalog.ps,width=6in}
\caption{The File Catalog GUI}
\end{figure}
\end{latexonly}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-catalog.gif"><BR>
Figure 7:  The File Catalog GUI
</center>
\end{rawhtml}
\end{htmlonly}

\end{center}

Let us now take a look at some uses of the File Catalog GUI. Various
buttons on the GUI (i.e., {\sf Show} and {\sf Copy}) are self
explanatory.  Placing your mouse pointer over any of these buttons for
a few seconds gives you a brief summary of help for that button. 

Note that the \textsf{View} button on the File Catalog GUI is
intelligent, in that it brings up a Table Browser GUI for an MS, the
\htmlref{Viewer}{viewer} for an Image, and uses the \texttt{less}
command in UNIX for an ASCII file.

Double clicking on a file name is equivalent to selecting the file and
clicking the \textsf{View} button.



\section{A Practical Demonstration: Making an Image from a visibility dataset}

To demonstrate the use of the Tool Manager, we will now make
an image. For completeness, we also show how to accomplish
the same goal using the \glish\ command line.

\subsection{Loading package and module definitions}

When you start \aipspp, only package \textit{general}, which is for
general processing, is automatically loaded and readily available for
use. In order to access other packages or modules it is 
necessary to explicitly load them.
 
\vspace{0.18in}
\hrule
\heading{Loading definitions}

\hrule
\begin{description}
\item[GUI] Any operation from the Tool Manager ({\em e.g.} creating a new tool or running
a \texttt{global function}) normally loads the required modules
automatically.
\item[CLI] The \texttt{include} command
can be used to load either a whole package or individual 
modules:
\begin{verbatim}
include 'synthesis.g'  # load the synthesis package
include 'table.g'      # load the table tool
include 'ms.g'         # load the module ms
include 'msplot.g'     # load the ms plotting function
include 'utility.g'    # load the utilities module
\end{verbatim}
\end{description}
\hrule
\vspace{0.18in}

If you write your own script ({\em e.g.}, \texttt{myscript.g}), then to
execute the script:
\vspace{0.18in}
\hrule
\heading{ Executing a script}

\hrule
\begin{description}
\item[GUI] In the File Catalog GUI, double click on \texttt{myscript.g}
\item[CLI] Use the glish 'include' command:
\begin{verbatim}
include 'myscript.g'   # execute myscript.g
\end{verbatim}
\end{description}
\hrule
\vspace{0.18in}

\subsection{Create a UV Data Set \& Make an Image}

For our example, we will need to create a UV data set in the \aipspp\
format from the data which has been supplied with the \aipspp\
distribution for test purposes. It is a continuum data of the radio
source 3C273, taken using the VLA C-array at a frequency near 8.5
GHz. To create this data set in your directory in standard \aipspp\
format, do the following:
\vspace{0.18in}
\hrule
\heading{ Creating a test MeasurementSet}

\hrule
\begin{description}
\item[GUI] Run the global function \texttt{synthesis.imager.imagermaketestms}
\item[CLI] 
\begin{verbatim}
include 'imager.g'              # Load imager definitions
imagermaketestms('3C273XC1.ms') # Make the MeasurementSet
\end{verbatim}
\end{description}
\hrule
\vspace{0.18in}

The global function \texttt{imagermaketestms} creates the MeasurementSet
with the name \textit{'3C273XC1.ms'} from s FITS data file supplied
with the \aipspp\ distribution.

If the File Catalog is running, click the \textsf{Refresh} or
\textsf{Show} button on the File Catalog GUI and notice that a new
file name \textit{'3C273XC1.ms'} has been added to the directory.
Select this file by clicking it and then click
\textsf{Summarize} to get a brief summary of the MeasurementSet on the
Logger window.

To make images from this UV data set:
\vspace{0.18in}
\hrule
\heading{Making images from a MeasurementSet}

\hrule
\begin{description}
\item[GUI] 
\begin{itemize}
\item Create an imager using \texttt{synthesis.imager.imager} with the
filename 3C273XC1.ms.
\item In the resulting view for \texttt{imager:myimager}, use \texttt{setimage} to
set the cellsizes to 0.7 arcsec, and the image sizes to 300
pixels. Don't forget to press Go.
\item Use \texttt{clean} to clean the image. All the defaults are fine.
\end{itemize}
\item[CLI]
\begin{verbatim}
myimager:=imager('3C273XC1.ms')
myimager.setimage(cellx='0.7arcsec',celly='0.7arcsec',
                  nx=300,ny=300)
myimager.clean(image='3C273XC1.restored', model='3C273XC1.clean',
               residual='3C273XC1.residual')
\end{verbatim}
\end{description}
\hrule
\vspace{0.18in}

When these operations are finished, click the \textsf{Show} button on
the File Catalog GUI to see the new entries.

\subsection{View an Image using the Viewer}

Images are best viewed using the Viewer.  The Viewer can be
invoked in a number of different ways. 
\vspace{0.18in}
\hrule
\heading{Viewing an image}

\hrule
\begin{description}
\item[GUI] 
\begin{itemize}
\item {\bf Using the catalog:}
\begin{verbatim}
In the File Catalog, double click on the Image name
\end{verbatim}
\item {\bf Using the tool manager:}
Make sure you create a viewer tool (\texttt{display.viewer.viewer}) {\bf AND}
an image tool (\texttt{general.images.image}). If you have created the
image tool after the viewer tool \textsf{Update} the
viewer data manager and select the \textsf{Display type} in the
\textsf{Load Data} panel. The image will appear in the
\textsf{Datasets} box. When the image is selected it will be made available
on the Display Panel. Select the image in the \textsf{DisplayData}
menu and it will be shown.
\end{itemize}
\item[CLI] 
\begin{itemize}
\item {\bf Using the catalog:}
\begin{verbatim}
include 'catalog.g'
dc.view('3C273XC1.restored')
\end{verbatim}
\item {\bf Using the image tool:}
\begin{verbatim}
include 'image.g'
myimage:=image('3C273XC1.restored')
myimage.view();
\end{verbatim}
\end{itemize}
\end{description}
\hrule
\vspace{0.18in}

This pops up a window for viewing the image. Be patient when doing 
this for the first time in a session. Loading the Viewer currently
takes about 10-15 seconds. Subsequent views will be very quick. More than
one image can be viewed at the same time. Double clicking on a second
image brings up another display panel.

\begin{center}
\begin{latexonly}
\medskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-viewer.ps,width=4in,height=4in}
\caption{Viewer}
\end{figure}
\medskip 
\end{latexonly}
\end{center}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-viewer.gif"><BR>
Figure 8:  Viewer
</center>
\end{rawhtml}
\end{htmlonly}

\begin{description}
\item[Brightness/colormap fiddling..] The color map can be changed in a
number of ways.  The colormap may be fiddled directly by down-clicking
and moving the middle button of the mouse. The data maximum and
minimum, scaling power, and type of color map can be set in the \textsf{Adjust}
panel.
\item[Adjust] Use the \textsf{Adjust...}  to obtain a control for the display. This
allows a large degree of control over the displayed image and axes.
\item[Zoom/Unzoom] To zoom, down-click the left mouse button and drag
out the region you want to zoom. Then double-click inside the selected
area. This will zoom. To unzoom, press the \textsf{Unzoom} button. To
cancel selection of a region, use the \textsf{Escape} key.
\item[Clear]  Pressing the \textsf{Clear} button clears the display
\item[Print] The \textsf{Print}  button allows printing of the image, as displayed, to either
Postscript or to the X11 pixmap format.
\item[Animation] To step plane by plane, or continuously through the
other axes of the image, you can use the \textsf{tape-deck} buttons on
the right hand side of the Viewer. To change the third axis displayed,
use the \textsf{Adjust} control.
\item[Selection of region to display] This may be done interactively
using the zoom capability described above, or using the \textbf{Image Region}
specification in the \textsf{Adjust} panel {\em e.g.} to display the inner
quarter of the image, enter \texttt{drm.quarter()} in the \textbf{Image Region}
entry.
\end{description}

The Viewer has many other capabilities. For example, to overlay
a raster display with a contour display (not necessarily of the
same image), follow these steps:
\vspace{0.18in}
\hrule
\heading{ Displaying a contour on top of a raster}

\hrule
\begin{enumerate}
\item On the \textit{File} menu, select \textbf{Data Manager}
\item On the Data Manager window, Press the \textsf{Load data} panel.
\item In the Display Type window, select \textbf{Contour}
\item In the Dataset window, select \textit{image:3C273XC1.restored}  (you could
select a completely different image here)
\item Back on the Viewer, go to \textit{DisplayData}, and select the second
image.
\item To adjust the contour levels, use the \textsf{Adjust} button on the
Viewer or the Adjust Data window on the Data Manager.
\end{enumerate}
\hrule

\subsection{Browse an MS using the Table Browser}

The MeasurementSet \textit{3C273XC1.ms} and the images
\textit{3C273XC1.restored} are \aipspp\ Tables. As mentioned
earlier, a Table in \aipspp\ is actually stored as a directory
with the same name as the Tbale. For instance, in the
File Catalog GUI click on the file name {\it 3C273XC1.ms} and then
click \textsf{Show}. The File Catalog GUI now displays the list of
files in the directory named \texttt{3C273XC1.ms}. \aipspp
knows to recognize this whole collection of files and subdirectories
as a single Table. Similarly, {\it 3C273XC1.restored} is a Table
representing the restored image and contains many files under the
directory with its name.  Restore the File Catalog GUI to the display
the contents of your main \aipspp\ directory by selecting [..]
in the File Name column and click
\textsf{Show}.

Although you may not do this during regular processing of the data
from a telescope, it is useful at this stage to have a look at the 
insides of an MS and how it is orgnized in \aipspp.  
To do this you will  use the Table Browser GUI..

The Table Browser GUI has many options, for example, you can pull out all
of the entries of a given column into a \glish\ array, manipulate
it and put it back.  You can also plot one column, or a mathematical
combination of several columns against other columns or their
combinations.  Here you will use it just to browse the Table.
\vspace{0.18in}
\hrule
\heading{ Browsing a MeasurementSet}

\hrule
\vspace{0.18in}
\begin{description}
\item[GUI] In the File Catalog, double click on the MeasurementSet
name
\item[CLI]
\begin{verbatim}
t:=table('3C273XC1.ms') # to make a table tool.
t.browse()              # to invoke the browse function.
t.close()               # when finished, close the tool
\end{verbatim}
\end{description}
\hrule

\begin{latexonly}
\medskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-msbrowse.ps,width=6in}
\caption{View of MeasurementSet with a Table Browser GUI}
\end{figure}
\medskip 
\end{latexonly}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-msbrowse.gif"><BR>
Figure 9:  View of MeasurementSet with a Table Browser GUI
</center>
\end{rawhtml}
\end{htmlonly}

The name of your Table may not be exactly as shown in Figure 9.
For convenience in viewing, use the mouse and stretch the Table
Browser GUI to occupy the entire width of your screen.  Wait about 10
seconds while several columns of data appear in the window. The row
number is given in the first column. It stretches all the way to the
number of visibilities (7669 in this case). However, at a given time
the Table Browser GUI reads only about 1000 rows. Now use the
horizontal scroll bar at the bottom of the Table Browser GUI to look
at the various columns ({\bf UVW}, {\bf ANT1}, {\bf ANT2}).  This is
basically to give you a feel for the MS and also to show that the
insides of any \aipspp\ Table can be examined or modified.
 On the Table Browser GUI, use the \textit{View} menu and choose 
\textbf{Table Summary}. A new Summary GUI appears on your 
screen as shown in Figure 10.

\begin{latexonly}
\bigskip
\begin{figure}[h]
\epsfig{file=gettingstarted.dir/gsfig-mssumm.ps,width=6in}
\caption{Table Summary GUI}
\end{figure}
\bigskip
\end{latexonly}

\begin{htmlonly}
\begin{rawhtml}
<center>
<img src="../gettingstarted.dir/gsfig-mssumm.gif"><BR>
Figure 10:  Table Summary GUI
</center>
\end{rawhtml}
\end{htmlonly}
 
The top part of this GUI gives a brief summary of the MS and the
bottom part contains a list of keywords for the MS. Scroll
down the list of keywords using the scroll bar on the right side of
the GUI.  Each one of these keywords represent a sub-Table containing
information indicated by the keyword. Click the keyword
\textsf{ANTENNA}, and notice that another Table Browser GUI comes up
giving details of this sub-Table. Browse the various columns of this
Table using the horizontal scroll bar.

After you examine this Table, be sure to use the \textsf{Dismiss} button
on this GUI to close the window. Otherwise you will end up with a lot
of GUIs on your screen. 

Having browsed through some of the sub-Tables of the MS, you can now
dismiss the Summary GUI by clicking \textsf{Dismiss}, and remove the
Table Browser GUI by choosing \textbf{Exit} under its \textit{File}
menu.

Another example of an Image is the Table {\it 3C273XC1.restored}. Images are
best viewed using the Viewer, which is invoked by selecting the
file name on the File Catalog GUI and clicking the \textsf{View} button.
However, although it is not very instructive, you can also use the Table
Browser GUI to get a feel for the Image Table.



\section{A Guide to a Typical \aipspp\ Data Reduction Session}

We describe here what \tools\ and \texttt{tool functions} could be used in a
typical \aipspp\ data reduction session.  We recommend a GUI
based approach. Although a command line approach is possible for using
the same \tools\ and \texttt{tool functions}, it will require a lot of typing and
ability to remember the various arguments for the required \texttt{tool
function}. In GUI based approach, you only need to know how to
create the required \aipspp\  \tool\ and how to use the \texttt{tool
functions}. 

\subsection{Data Loading}
At this stage it is recommended that you import externally calibrated (and
edited) data into \aipspp. Write a FITS disk file of the calibrated 
UV data into the same directory in which you intend to run \aipspp. To keep
things organized, you may choose to create a FITS sub-directory into which
any FITS files can be written. 

To convert the FITS UV data file to an \aipspp\ MeasurementSet (MS), use the
\texttt{constructor} \texttt{fitstoms} of the \tool\ \texttt{ms} which is in the module
\texttt{ms} of the package \textit{general}. We represent this \texttt{constructor}
and the hierarchy it belongs in the format
\texttt{package.module.tool.constructor} as:

\htmlref{\texttt{general.ms.ms.fitstoms}}{ms:ms.fitstoms.constructor}

Similarly, if you want to convert a FITS image to an \aipspp\ image use 

\htmlref{\texttt{general.images.image.imagefromfits}}{images:image.imagefromfits.constructor}

If you want to directly `fill' VLA data from the archive, then
you could use the {\cf global functions}:

\htmlref{\texttt{nrao.vla.vlafillerfromtape}}{vla:vlafillerfromtape}

\htmlref{\texttt{nrao.vla.vlafillerfromdisk}}{vla:vlafillerfromdisk}

\subsection{Data Examination}

A summary of the data can be obtained using the File Catalog GUI
which, if it is not already active, can be invoked from the Tool
Manger (Click on \textbf{dc} in the \textsf{Tools in Use} view and click
\textsf{Show}). To obtain the summary select the MS file name by
clicking on it and then click on \textbf{summary}. The summary
appears in the Logger window.

You can also get the summary using the \texttt{tool function}

\htmlref{\texttt{general.ms.ms.summary}}{ms:ms.summary.function}

Visibility data can be plotted in various ways using the \tool

\htmlref{\texttt{synthesis.msplot.msplot}}{ms:msplot}

Various columns and sub-Tables of the MeasurementSet can be examined
using the Table Browser which can be invoked from the File Catalog GUI
by selecting the MS name and then clicking on \textsf{view}.

Currently there are no \tools\ to directly print or type selected
portions of the UV data (like LISTR in \textbf{AIPS}). However, if you are
adventurous, you can use the tool \htmlref{\texttt{utilities.table.table}}{table:table}
and its various \texttt{tool functions} such as \texttt{colnames, getcol} to
extract various colums of the MS into \glish\ arrays (see next section)
and use the \glish\ command \texttt{print} to examine the column
values. You can even modify these values and put them back in to the
MS using the Table \texttt{tool function}  \texttt{putcol}, which can of course be
dangerous.

\htmlref{\texttt{synthesis.msplot}}{ms:msplot} is useful for viewing various types
of plots of the visibility data, but currently, it has only
rudimentary tools for interactive editing of visibility data.

\htmlref{\texttt{synthesis.flagger}}{flagger} contains some simple functions for 
non-interactive editing.

\subsection{Calibration}

The \tool\ to use for calibration is:

\htmlref{\texttt{synthesis.calibrater.calibrater}}{calibrater:calibrater}

\subsection{Imaging}

This is a well developed section of \aipspp. \tools\ are available for a
variety of imaging requirements such as 3D, wide-field, multi-field,
multi-frequency synthesis and mosaicing. The \tools\ also allow 
self-calibration to be incorporated into the loop.

Starting from a calibrated MeasurementSet, the main \tools\ for imaging
are

\htmlref{synthesis.imager.imager}{imager:imager}

\htmlref{synthesis.imager.dragon}{imager:dragon}

\htmlref{synthesis.imager.imagerwizard}{imager:imagerwizard}



In the \tool\ \htmlref{\texttt{imager}}{imager}, the \texttt{tool functions} to use are:

\begin{tabular}{ll}
\texttt{setimage}   & \# To set the image size, cellsize, {\em etc.}\\
\texttt{setdata}    & \# To select the require data from the MS\\
\texttt{uvrange}    & \# Set the UV range\\
\texttt{setimage}   & \# set the image characterics, size, cell \\
\texttt{weight}     & \# setting Weighting of UV (robust etc)\\
\texttt{setbeam}    & \# Specify the convolving beam\\
\texttt{mask}       & \# Setup a mask to specify ``cleaning'' areas\\
\texttt{clean}      & \# Make the image and deconvolve
\end{tabular}

Some of the steps above are optional, in the sense that sensible
defaults will be used. Note that executing each of these \texttt{tool
functions} will specify the parameters for the \htmlref{\texttt{
imager}}{imager} \tool\ for that session. In other words you are
specifying a \textit{state} for the Imager \tool. Repeated execution
of \texttt{clean}, for example, will use this state. This is a general
feature of all \tools\ in \aipspp.

\subsection{Self Calibration}

A self-calibration loop can be inserted in both \htmlref{\texttt{imager}}{imager} and
\htmlref{\texttt{dragon}}{imager:dragon} tools. In \htmlref{\texttt{
imager}}{imager} the \texttt{tool function} is \texttt{selfcal} which takes
as input the name of a \htmlref{\texttt{calibrater}}{calibrater} \tool\
which should be setup appropriately before hand.

In \htmlref{\texttt{dragon}}{imager:dragon}, the self-cal loop is built into the \texttt{tool function}
\texttt{image}.  The relevant parameters to set are
\textit{amplitudelevel} and \textit{timescale}.

\subsection{Image Analysis}

Analysis of images is provided through several \tools:

\htmlref{\texttt{image}}{images:image}, 
\htmlref{\texttt{imagefitter}}{images:imagefitter},
\htmlref{\texttt{imageprofilefitter}}{images:imageprofilefitter},
\htmlref{\texttt{imagepol}}{images:imagepol},
\htmlref{\texttt{regionmanager}}{images:regionmanager}, and
\htmlref{\texttt{coordsys}}{images:coordsys}.

The basic Image-related \tool\ is the 
\htmlref{\texttt{image}}{images:image} \tool, in which functions are
available for various types of analysis and manipulation. 
Some of the
\texttt{tool constructors} are:
\begin{tabular}{ll}
\texttt{image}           & \# Construct Image tool from an \aipspp\ image file\\
\texttt{imagefromfits}   & \# Construct Image tool and convert from a FITS file\\
\texttt{imagemaketestimage}   & \# Construct Image tool from a built-in test image\\
\end{tabular}


\medskip
Some of the \texttt{tool functions} are
\begin{tabular}{ll}
\texttt{view}       & \# View image with Viewer\\
\texttt{summary}    & \# Generate a summary of the image\\
\texttt{statistics} & \# Compute and plot various statistics of the image\\
\texttt{sepconvolve}& \# Independent convolution off different axes\\
\texttt{moments}    & \# Compute various moments of images and cubes\\
\texttt{regrid}     & \# Regrid image\\
\texttt{subimage}   & \# Make a subimage\\\texttt{tofits}     & \# write FITS file of the image\\
\texttt{calc}       & \# Mathematical combinations of images\\
\end{tabular}


\htmlref{\texttt{Imagefitter}}{images:imagefitter} is a comprehensive
\tool\ which can perform component fits to selected regions of the image
aided by an integrated image display with zoom, pan, region drawing and
other options.  Similarly, \htmlref{\texttt{imageprofilefitter}}{images:imageprofilefitter} 
is used to fit 1-D models to profiles interactively extracted from an image.

The \htmlref{\texttt{imagepol}}{images:imagepol} \tool\ provides specialized
polarimetric image anlaysis.  

The \htmlref{\texttt{regionmanager}}{images:regionmanager} \tool\ manages 
image regions of interest.

The \htmlref{\texttt{coordsys}}{images:coordsys} \tool\ manages Coordinate
Systems including coordinate conversions.



\subsection{Image Display and Contour plots}

The main \tool\ for displaying, contour and grey scale plotting of images is
\htmlref{\texttt{viewer}}{viewer:viewer}

The Viewer is started from File Catalog GUI by choosing the file
name and clicking on \textsf{View}. Multiple images can be viewed
simultaneously in different display panels. Clicking on \textsf{View} after
selecting a file name starts up a new display panel.

Another way of starting the Viewer is to use the
\texttt{tool function} \htmlref{\texttt{image.view}}{images:image.view.function}.

Grey scale range and contour levels can be controlled using the
\textsf{Adjust} button on the display panel.

Once the desired contour or grey scale plot is drawn on the Viewer, the
\textsf{Print} button on the display panel can be used to send the
plot to a printer.

\subsection{Data Archiving}

The suggested method of data archiving is to use the UNIX tar
facility.  While MeasurementSets and Images can be tarred directly ({\em i.e.} in
their \aipspp\ table format) if they are intended to be read back into
\aipspp\ directories, we recommend that these be converted to
FITS files (using mstofits and image.tofits) and then archived using
tar. Use of the FITS format is currently preferred as a long term
archive format since the \aipspp\ formats may change.

\section{\glish\ Overview}
\label{glish:overview}

\glish\ is a programming language which allows you to perform
mathematical computations, both at the Command Line level and also by
writing \glish\ programs or scripts. \glish\ handles the
following types of variables: \texttt{boolean, byte, short, integer,
float, double, complex, double complex, character strings}, and \texttt{records}. 
Another feature of \glish\ is that it allows Automatic
Variable Typing in that variables are automatically assigned a type
when they are created. No declaration statements are necessary. While
this is convenient, it provides no warning if you inadvertently
reassign a variable. A whole array can be wiped out by assigning it to
an integer. Variables can be protected by using the keyword constant.

\vspace{0.18in}
\hrule
\heading{Protect a variable}
\hrule
\begin{verbatim}

const Pi:=3.14159

\end{verbatim}
\hrule
\vspace{0.18in}

Arithmetic operators are:\\
\begin{verbatim}
+ - * / % ^
\end{verbatim}

where \%  is the modulus operator and \^~~  is the exponentiation.
Values of variables and constants in an arithmetic expression are
all converted to the type of highest precision in the expression
before performing the mathematical operations.
\vspace{0.18in}
\hrule
\heading{Combine arithmetic and assignment operators}
\hrule
\begin{tabular}{ll}
\texttt{y:=1:10}           &\#a 1-d array containing values 1 to 10\\
\texttt{y +:= 2}           &\# add 2 to every element of the array\\
\texttt{y} \^~:= 2          &\# square every element of the array\\
\end{tabular}
\hrule
\vspace{0.18in}

Array operations are one of the \glish's strong points for computing
efficiency and code economy. For instance\\
\\
\begin{tabular}{ll}
\texttt{x:=1:10; y:= 11:20}        &\# creates two arrays x and y of length 10\\
\texttt{z:= x*y}                   &\# performs z(i)=x(i)*y(i);i=1 to 10\\
\end{tabular}

Indexing arrays can be done in various ways. 
\vspace{0.18in}
\hrule
\heading{For contiguous range}
\hrule
\texttt{y[3:7]}
\hrule
\vspace{0.18in}

\newpage

\hrule
\heading{Random indexing is possible with}
\hrule
\begin{tabular}{ll}
\texttt{index := [3,5,6,8]}                &\# an index array\\ 
\texttt{y[index]}                          &\# get y(3), y(5), y(6) and y(8)\\
\end{tabular}
\hrule
\vspace{0.18in}

Another special type of variable in \glish\ is the record.
A record can contain heterogeneous data structures. A 
record goes by a single variable name and can be passed on as a
single unit to a \texttt{global  function}. Some \texttt{functions}  
return a  record. You can create a record all at
once or add to it piece by piece.

\begin{itemize}
\item {\bf Create a record}\\

\texttt{header:= [name='3C273', ra=12.12345, dec=2.3318]}
\end{itemize}

This example makes a record by name header with three members 
{\bf name} (variable type: string), {\bf ra} (variable type: float) and 
{\bf dec} (float). 
\vspace{0.18in}
\hrule
\heading{ Add other members to the record}

\hrule
\begin{verbatim}
header.flux:=27.6
header.type:='quasar'
header.frequency:=5.0
\end{verbatim}
\hrule
\vspace{0.18in}

\hrule
\heading{ Accessing record members by name or by number}

\hrule
\begin{verbatim}
header.dec
header['dec']
header[3]
\end{verbatim}
\hrule
\vspace{0.18in}
 
\glish\ variables can be assigned an ``attribute''
\vspace{0.18in}
\hrule
\heading{ \glish\ variable attributes}

\hrule

\begin{verbatim}
- header.flux::units := 'Jy'
- header.frequency::unit :=  'GHz'
- velocity:=20
- velocity::definition:= 'heliocentric'
- velocity::units:= 'km/s'
- print velocity
20
- print velocity::
[units=km/s, definition=heliocentric]
\end{verbatim}
\hrule
\vspace{0.18in}

Like record members, attributes can be accessed by name or by number:
\vspace{0.18in}
\hrule
\heading{ Accessing record members by name or by number}
\hrule
\begin{verbatim}
velocity::[1]
velocity::units
velocity::['units']
\end{verbatim}
\hrule
\vspace{0.18in}

The fields of a record many be retrieved using the \texttt{field\_names}
function:
\vspace{0.18in}
\hrule
\heading{ Retrieval of field names}

\hrule
\begin{verbatim}
field_names(header)
\end{verbatim}
\hrule
\vspace{0.18in}

Some \texttt{tool functions} and \texttt{global functions} in \aipspp\ 
return a record with many members as their output.
\vspace{0.18in}
\hrule
\heading{image.coordmeasures}

\hrule
\begin{verbatim}
myimg:=image('my3C273XC1.restored')   # Make an image tool
posinfo:=myimg.coordmeasures([128,128]) # get info about center pixel
print posinfo
field_names(posinfo)
\end{verbatim}
\hrule
\vspace{0.18in}

We can now use some of the features of \glish\ in combination
with one of the salient features of \aipspp: namely that all the data,
either from an MS or an Image can be accessed from \glish,
manipulated and placed back, if needed. Many of the \tools,
such as Table, MS, and Image, have \texttt{functions} which can
extract the data from specified portions and create \glish
variables or arrays with those data. Thus, it is possible to write
\glish\ scripts for special user specific applications or do
simple computations at the Command Line window itself. Furthermore,
since \tools\ for printing and plotting are available at the
Command Line level, they can also be included in such applications.
\vspace{0.18in}
\hrule
\heading{Manipulating MeasurementSet data in \glish}
\hrule

\begin{verbatim}

tablecopy('3C273XC1.ms', 'tempcopy.ms') # keep original
mytab:=table('tempcopy.ms', readonly=F) # open with write permission
uvw:=mytab.getcol('UVW')    # get the column named UVW
uvw*:=2.0                   # double the whole Glish array
mytab.putcol('UVW', uvw)    # put the Glish array back into the colum
mytab.flush()               # flush the Table 
\end{verbatim}

\section{The \texttt{Measures} System in \aipspp}

\aipspp\ has modules called \texttt{Measures} and \texttt{quanta}
(in the package \textit{general}), to handle various astronomical
measures and quantities. A \textit{quantity} is value with a Unit
({\em e.g.} 5km/s, 7arcsec) and \textit{measures} is a quantity with a
reference frame ({\em e.g.} J2000, UTC). Many tools in \aipspp\ use
the \tools\ of the \texttt{Measures} and \texttt{quanta} modules in
their computations. These modules can also be used directly for various
astronomical computations and conversions. A module called
\texttt{measures\_data} contains (and  updated periodically) a
variety of astronomical data ({\em e.g.} solar system parameters, time
related parameters, some source co-ordinates) which are utilized
by the various \tools\ in the modules \texttt{Measures} and
\texttt{quanta}.  All the computations can be handled using GUIs as
well as \glish\ commands.

For an introduction to the Measures system, see
\htmladdnormallink{\emph{The Measures system} by Wim
Brouw}{../../newsletters/apr98/aprilnews/aprilnews.html#measures} and
\htmladdnormallink{\emph{The Measures system: II} by Wim
Brouw}{../../newsletters/jun98/junenews/junenews.html#measures} in April
and June 98 \aipspp News Letters.

\section{Frequently Asked Questions}

To answer Frequently Asked Questions, there is a 
\htmladdnormallink{\emph{FAQ}}{../../faq/faq.html} at
http://aips2.nrao.edu/docs/faq/faq.html. If you have a
question that is not answered here then use the \texttt{ask()}
function to ask us. 




\section*{Appendix A: Structure of \aipspp}
 
To simplify use of \aipspp, the available functionality is
split into a hierachy of packages and modules. One can choose to use
just those packages and modules which are of direct interest.
Each module holds a number of \tools and global functions.

\subsubsection{packages}

The top layer of the \aipspp\ software system contains 
\htmladdnormallink{packages}{../Refman/Refman.html}.
Each package contains specific modules.  Some examples of packages are:

\begin{description} 
\item[\texttt{synthesis}]: for processing
aperture synthesis data with modules for calibrating, editing,
visibility plotting,  imaging, and deconvolving.

\item[\texttt{general}]: contains modules of general utility
such as units and measures, coordinate conversions, image analysis,
and manipulations.

\item[\texttt{utility}]: for printing, catalog
handling, and mathematical operations.

\item[\texttt{display}]: for plotting, and displaying.

\item[\texttt{dish}]: for processing single-dish data.

\item[\texttt{atnf}]: contains modules relevant for data from the
Australia Telescope.

\item[\texttt{nrao}]: contains modules relevant for data from 
NRAO telescopes, currently the GBT and the VLA.

\end{description}

\subsubsection{modules}

Each package contains a specific set of modules.  modules are a group
of closely related applications. For example, the modules of package
\textit{Synthesis} are:

\begin{itemize}
\item \htmlref{\texttt{calibrater}}{calibrater}: calibrating UV data
\item \htmlref{\texttt{componentmodels}}{componentmodels}:  making source
component models
\item \htmlref{\texttt{imager}}{imager}:  imaging and deconvolution, wide-field
imaging, mosaicing, {\em etc.}.
\item \htmlref{\texttt{simulator}}{simulator}:  simulating UV and other data
\item \htmlref{\texttt{msplot}}{ms:msplot}:  plotting visibility data in various ways
\end{itemize}



\section*{Appendix B: Creating your own \texttt{.aipsrc} file}

As described above, the \texttt{.aipsrc} file is used to control
the detailed behavior of \aipspp. This may be set up using
the setupwizard
%\htmlref{\texttt{setupwizard}}{setupwizard}
or you may
create one by hand:

\begin{itemize}
\item {\bf Create a file in your root area named}: 

\texttt{.aipsrc}

\end{itemize}

An example of an \textit{.aipsrc} file is given below, you can find
more information about \textit{.aipsrc} in the
\htmlref{\texttt{aipsrcdata}}{aipsrcdata} section of the User Reference Manual.

\begin{verbatim}
# Work in the current directory
#
user.aipsdir:            .
#
# Put scratch files here: can be a list of directories
#
user.directories.work:   /export/home/xherb4
#
# Put the aips++ cache files in one place: shouldn't be
# over an NFS mount
#
user.cache:             $HOME/aips++/cache
#
# Set these so that bug(), ask(), etc. know who I am
#
userinfo.name: Tim Cornwell
userinfo.email: tcornwel@nrao.edu
userinfo.org:   National Radio Astronomy Observatory
#
# Switch on the display of memory used by each server
#
user.display.memory:    True
#
# Uncomment this to send log messages to the deep blue yonder
#
#logger.file:           none
#
# Initial height of the logger window
#
logger.height:          20
#
# Disable progress meters?
#
progress.show:          F
#
#system.resources.memory: 128
\end{verbatim}


\end{document}



