\documentstyle[11pt]{article}
\topmargin -0.25in
\oddsidemargin 0in
\evensidemargin 0in
\headheight .125in
\footheight .125in
\textheight 8.9in
\textwidth 6.5in
\parindent 0in  % Paragraph indentation amount
\parskip 1ex    % White space between paragraphs amount
\clubpenalty 100000
\widowpenalty 100000

\begin{document}
\pagestyle{plain}
\thispagestyle{empty}

\newcommand{\glish}{{\it glish\/}}

\vspace*{2in}

\begin{center} \Large \bf
AIPS++ Review \\ \large \bf
12--14 December 1994 \\
National Radio Astronomy Observatory \\
Charlottesville, VA \\
~ \\
Report of the Review Panel \\
~~ \\
Ray Offen (Chair) \\
Wim Brouw \\
James Coggins \\
Tim Cornwell \\
Dennis Gannon \\
Bob Hanisch \\
~~ \\
15 December 1994 \\
\end{center}

\clearpage

\vspace*{1in}

\tableofcontents

\clearpage

\vspace*{1in}

\section*{Executive Summary} \addcontentsline{toc}{section}{Executive Summary}

The primary aim of the Review was to allow the Review Panel to consider all
aspects of the AIPS++ Project and provide firm suggestions and guidance to the
Project where needed.  All aspects of the Project were considered in the
review, including organization and management of the project, tactical
decisions and strategic choices made by the project, and the design and
technical details of the project.

The primary reason for building AIPS++ is to improve the research productivity
of the Radio Astronomy Community.  The AIPS++ vision is very bold.  It
represents a unification of new astronomical algorithm and software ideas with
state-of-the-art computing technology. One of the strengths of this project is
its aggressive adoption of both object-oriented methodologies and distributed
computing.  We believe that success of the AIPS++ Project is critical for
the mid- and long-term future of radio astronomy research and that technical
expertise is available in sufficient quality and quantity to assure this 
success.

Our most important observation is that leadership at the Project level is
largely absent, and that technical leadership is informal and ad hoc.  Despite
this, the technical direction of the AIPS++ project has been forward-looking,
sometimes aggressively so, unafraid of complex computing technologies, and
abreast of or even ahead of the state of the art. The AIPS++ project has not
been, and is not, managed in any conventional sense of the word, despite the
existence of a project manager. The project is essentially anarchic in
character and out of control, driven in the main by egos, private agendas, and
personal chemistry. There are no meaningful schedules, milestones, resource
allocations, or understanding of dependencies.  There is a remarkable lack of
definition, in terms of functionality, of what actually is being built.

The Steering Committee has been ineffective in providing clear technical and
management guidance to the Project Manager and the development teams.  The
minutes of the Steering Committee contain evidence of many good intentions
that have ultimately failed in their execution. The Steering Committee needs to
formulate a clear and agreed strategy for achieving the AIPS++ mission
statement, that is then communicated to the Project Manager as an unambiguous
determinant of his/her role.

Finally, the AIPS++ Project lacks strong and vital connections to the
astronomical community to motivate and guide development in specific areas. A
similar lack of connection to the Computer Science community is also evident.
The Project would benefit greatly from establishing such connections as soon as
possible.

In summary, the Review Panel firmly believes that the AIPS++ Consortium should
move rapidly to make changes in three key areas if the project is to
survive, start to flourish, and eventually to be the source of an innovative set
of research tools for the radio astronomy community. These areas are
effective Steering Committee guidance, project management, and collaboration
with the astronomy and computer science communities.

\clearpage

\vspace*{1in}

\section{Charge to the Panel}

The primary aim of the Review was to allow the Review Panel to consider all
aspects of the AIPS++ Project and provide firm suggestions and guidance to the
Project where needed.  All aspects of the Project were considered in the review,
including organization and management of the project, tactical decisions and
strategic choices made by the project, and the design and technical details of
the project.  The AIPS++ Steering Committee asked for ``a clear and hard-nosed 
objective assessment of the viability of the present approach of, and plans for,
the Project, primarily with regards to Management and Design.''  The Panel was
asked to respond to the following specific questions:

\begin{enumerate}

\item Is the overall AIPS++ Design suitable to serve the needs
(as described in the Requirements) of the Consortium members over the
foreseeable future?

\item Are the various parts of the Design well-integrated
together, to produce a coherent whole, which can grow for some time?

\item To what extent is the Project achieving its first goal to
make available ``at least the functionality of existing packages such
as Classic AIPS'' by January 1996?  If not by then, when?

\item To what extent will it be possible (easy?) for external
programmers to write AIPS++ applications?
 \begin{itemize}
   \item Available infrastructure
   \item Documentation
   \item Application ``frameworks''
   \item Examples (very important!)
   \item Platform support
 \end{itemize}

\item Do the existing plans represent sufficient efforts to make
it attractive for leading application programmers to implement their
ideas in AIPS++, despite the following obstacles:
 \begin{itemize}
   \item Methodology barrier (OOP)
   \item Language barrier (C++)
   \item New (``universal'') formalisms
   \item Psychological barriers
   \item Software Engineering practices (testing and code policing)
 \end{itemize}

\end{enumerate}

The last two questions are viewed as especially important in view of the fact
that many of the AIPS++ applications will (have to) be written by programmers
outside the AIPS++ Center. It is felt that, if a flow of high-quality external
contributions can be attracted (and managed!), the Project is implicitly
healthy.

The Review Panel was not to feel constrained to answer only the above
questions, but was asked to identify any changes which it feels will help
the Project to progress more surely, and to avoid failure or delays.
The Steering Committee asked that these recommendations, if any, implicitly
recognize the resource constraints which face the Project.

The Panel did its best to address the specific questions above, but because
of the stage the project is at and the paucity of project documentation the
Panel has not been able to thoroughly address them all.

\section{Overview of Project Status}

First, the Panel would like to thank the AIPS++ project staff for preparing
a thorough and in depth review of the project status.  We appreciated the
clarity and candor of the presentations, and believe that we have been able
to form a reasonably clear picture of the accomplishments, technical
challenges, and programmatic difficulties of carrying out this ambitious
project.  It is clear that preparation of the review required a major effort
on the part of the staff, but we hope that this provided an opportunity for
everyone --- not just the Panel --- to step back from the day-to-day 
activities and assess the overall program.

Our most general observation is that leadership at the Project level is largely
absent, and that technical leadership is informal and ad hoc.  Despite this,
the technical direction of the AIPS++ project has been forward-looking,
sometimes aggressively so, unafraid of complex computing technologies, and
abreast of or even ahead of the state of the art. The technical leadership has
spent a great deal of its energy working out capabilities that might be needed
by anticipated applications whose features and priorities are largely
unspecified. In the absence of application-area guidance, the technical
leadership has worked hard to define and implement infrastructure capabilities
sufficient to support all of the envisioned or imagined application needs as
inferred from the few requirements documents currently available and as
synthesized from knowledge and experience in astronomy and computing. The
result has been to make slow but steady progress on an incredibly broad front.

Working ahead of the state of the art is acknowledged to pose the danger of
having to discard developed code and retrofit applications as industry
standards appear and are adopted. This is seen as a necessary cost of doing
business at this level of sophistication. Another potential danger is that the
development of computing infrastructure can take on a life of its own.  The
issue of how far the computing infrastructure should go is an important
strategic decision that has evolved to its present state by many defaults and
the strong design work of several individuals and not by virtue of a strategic
plan for this project.

The Project technical leadership claims to have a clear idea of the difference
between infrastructure needs and infrastructure dreams, but the presentations
and other discussions provide the Panel with no confidence that this vision is
shared by all.  The Panel's view is that there is in fact no basis for the
claim that the real infrastructure needs are well understood by anyone because
of the lack of guidance concerning the nature, ordering, and priority of
astronomical applications to be developed in the AIPS++ framework.

The AIPS++ project has not been, and is not, managed in any conventional sense
of the word, despite the existence of a project manager!  The project
management function to date has involved little more than monitoring what has
happened, as the dictates of different players held sway.  The  project is
essentially anarchic in character and out of control, driven in the main by
egos, private agendas, and personal chemistry.  There are no formal decision
making processes, most decisions being justified on a post-hoc basis.  There
are no meaningful schedules, milestones, dependencies, or resource
allocations,making it next to impossible to predict outcomes with any
confidence whatever.  There is no evidence of even the most elementary of
project management methods and tools being utilized to manage the project.
This is the case despite the expenditure to date of approximately 40 to 45
person-years of development effort at an estimated cost of some US\$5 Million.
It is not at all clear to the Panel that this quite considerable effort and
expenditure has been as productively utilized within the AIPS++ development as
might have been the case if the project had been well managed, rather than
being allowed to ``follow its nose.''

In some sense it is unfortunate that the focus for AIPS++ project management
has been NRAO, which does not have a culture of project management for software
projects --- for hardware based projects external project managers are
specifically retained.  It should be recognized that much of the success of
radio astronomy experimentation now depends directly and critically on software
and, consequently, that the development of ``software instruments'' needs to be
as carefully project managed as for hardware.

There is a remarkable lack of definition, in terms of functionality, of what
actually is being built.  Features are added or not, as the case may be, at the
whim of the technical developers.  The only requirements-like material that
exists in documented form is little more than an all-encompassing wish-list.
A partial architectural design document only appeared once this review was seen
to be inevitable.

There is a sense in which the AIPS++ development is regarded as just
another research project, which it certainly is not. It must be regarded as a
serious attempt to build, in software, an important research instrument.  Few
people will happily accept the folly of conducting important basic research
on what is essentially research infrastructure!


\section{Technical Development and Infrastructure}

\subsection{OO Methodology, Distributed Computing, and the CLI}

The AIPS++ vision is very bold.  It represents a unification of new
astronomical algorithm and software ideas with state-of-the-art  computing
technology.   In the paragraphs that follow we will discuss some of the
potential technical problems as well as some exciting opportunities that we
feel may be encountered in the year ahead.

This project involves two major core software technologies:  AIPS++, the base
object-oriented (OO) C++ class library, and \glish, a software system that
provides an interpreted programming language to allow users an interactive data
exploration and manipulation tool and a ``software bus'' that allows AIPS++ and
AIPS++ compliant applications to be distributed over a network.

One of the strengths of this project is its aggressive adoption of both 
object-oriented methodologies
and distributed computing.  Unfortunately, being such early
adopters of new technology has caused a number of problems.  More specifically,
some of the early industry standards that they have adopted are not yet stable
and widely available. In other cases, they have had to invent many OO and
distributed computing tools because industry standards had not yet emerged. As
an example of the former, the style of C++ programming in AIPS++ makes heavy
use of templates and exception handling.  While their use of these language
features is part of a very good overall design, most compilers do not fully
support these features.  Consequently, the Project has a serious but temporary
problem with portability.  As compilers improve these problems will vanish.

Another example of technology maturity problems is the \glish\ system.  While it
has a nice programming model, long-term support is uncertain and it requires many
modifications to be everything desired.  These modification include more
complete support of programming language features appropriate to AIPS++ and
fixing potential security and performance scalability problems of the
distributed computing ``\glish\ software bus''.

{\bf Recommendations:}

Now that industry standards are appearing, some of the early
technology decisions may need to be revisited.  For example, the array class in
AIPS++ may not be as sophisticated in performance and memory management as some
others (such as the Los Alamos A++ library).  Also, the \glish\ software bus
will need to be extended to allow access to other distributed object systems
standards like MicroSoft OLE.  Indeed, this layer of \glish\ may need to be
replaced by something compliant with OpenDoc or the OMG CORBA specification.
Other examples of technology choices that may need to be reconsidered include
the use of Mosaic as a forms and help system manager ({\it tcl/tk} may be more
appropriate), or the use of persistent object data base systems as a base
technology for the Tables classes.

One general recomendation is to look at a more formal approach to interfacing
software components and distributed objects.   ``Interface Definition
Language'' approaches may be one possibility.  In general more emphasis needs
to be put on technology integration.

\subsection{High Performance Computing}

The primary reason for building AIPS++ is to improve the research productivity
of the Radio Astronomy Community. Clearly the first priority of the design and
implementation is correctness and utility.  One of the goals of \glish\ is to
make it possible to for research to explore data and algorithms on an
interactive basis.  Consequently, performance will become an issue and
implementation of parts of the system on massively parallel supercomputers may
be an important consideration.

Fortunately, the design of AIPS++ and the incorporation of distributed
computing principles into the design of the \glish\ programming model make this
well within reach.  Indeed, the first demo of \glish/AIPS++ programming
demonstrated that it is relatively straightforward to partition some
computational tasks, such as the analysis of independent spectral lines, into
independent processes that may be allocated by a server to different processors
or machines.

In a more general context, one can consider a future implementation of a modified
AIPS++ server that runs on a supercomputer with key computational classes that
encapsulate parallel implementations of the algorithms.  A ``driver'' program
written in AIPS++ or \glish\ on a workstation can manipulate ``proxy objects''
which in turn employ the software bus to send requests to the parallel server
where the real data is stored.  The design and organization of algorithms using
the A-Matrix formalism makes this approach very attractive.

\clearpage

{\bf Recommendations:}

As a general recommendation, the AIPS++ consortium may wish to foster carefully
targeted collaborations with one of the supercomputing centers like NCSA to
experiment with this approach.

\subsection{Code Acceptance, Distribution, and Documentation}

The procedures and tools for code acceptance, distribution, and documentation
have been developed quasi-independently by several persons under only loose
control by project management and technical leadership. On the whole, these
elements have been developed in sophisticated and elegant ways, but there are
some alternatives that should be considered.

The project is positioned to use the Internet as the principal distribution
medium for all AIPS++ code, data, and documentation, with physical media as a
rarely-used alternative. This appears to be a reasonable expectation,
especially if the material is segmented effectively so that users can acquire
the components they are interested in without having to deal with the rest of
the corpus.

The acceptance procedure is central to the design of the ultimate AIPS++
operation.  Decisions made in regard to the acceptance strategy will determine
the level of interest in the community in contributing to the AIPS++
distribution. These decisions could result in AIPS++ ``writing itself'' through
steady contributions from the community, or being a sterile framework with no
users at all. The code acceptance strategy must be based on a simple,
reasonable, enforceable model of what an AIPS++ component is.

A serious concern with the current acceptance plan is the restrictive, brittle
definition of ``acceptance.'' At present, acceptance is a binary decision
requiring various quality assurance (policing) steps. As demonstrated at this
meeting, the community is very interested in rapid dissemination of tools even
if they are not fully certified. The acceptance strategy in AIPS++ should be
augmented to make it easier to get products into the AIPS++ distribution, but
always with proper labeling of the level of certification and the intention (or
lack thereof) of the developer to obtain a higher level of certification. (The
AIPS++ Core should probably always consist of fully certified code.  Acceptance
into the Compliant and Freedom layers should be with varying levels of
certification.) Labeling by certification level will also be necessary for the
levels of integration described at the Review (core, compliant, freedom) since
a likely (even desirable) strategy for the development of AIPS++ is to accept
code into the Freedom layer, integrate it over time with AIPS++ classes and
migrate it to the compliant layer, and if there is sufficient interest to fully
integrate it eventually into the AIPS++ Core.

The code management and distribution system is very sophisticated, but there
are aspects of it that may be overcomplicated. The system appears to violate
the principle of locality, which says that all material relating to a
particular piece of code should be located in close proximity in the overall
structure. Control of this system is centralized in one individual and is
perceived as a high-intertia design. That is, it is perceived as being brittle,
so structural variations are not welcome, and high-inertia, so design changes
are difficult to make and slow to take effect.

The vision of a hypertext system integrating documentation of all parts of the
system is very attractive, and the use of HTML as the markup language for
accomplishing this seems appropriate in spite of its current, temporary
limitations for mathematical use.  The realization of the vision will be
expensive to contributors who must buy into this form of Literate Programming
and to the Center in terms of developing tools for automatically extracting and
linking submissions into the documentation system.  This is another likely
point of collaboration with computer science projects that are studying this
possibility explicitly.

It is not clear that the difficulty of creating elaborate hypertext documents
has been adequately assessed and incorporated into estimates of project effort
and duration. The focus of the documentation effort has been new users, but in
fact the most important documentation to develop depends on the strategic
direction of the project.  If programmability is declared most important, the
most important documentation is the application programmer interface. If a
complete analysis path is declared most important, then the most critical
documentation is that for the tools implementing the analysis path.

The structure of the system seems to imply that there should exist a compilation,
linking, and archiving formalism for documentation as well as library code.
Documentation extracted from code must be linked into the overall documentation
library just as executables must be linked into code libraries.

\subsection{Data Models and Astronomical Issues}

{\em SDCI.} The SDCI effort has produced a working AIPS++ application that
could conceivably be used for astronomy within a few weeks: the On-The-Fly
mapping tool.  Unfortunately, however, the OTF effort did not capitalize upon
the interest of local astronomers, but instead provoked a fair amount of
unhappiness because of lack of consultation.  Moreover, the plans for a simple
interactive replacement for UniPops continue to be vague. While it may be
possible to implement many of the language elements of UniPops in \glish, it is
not clear how long this would take or that this can be justified for any other
than sociological reasons.

{\em UVCI.} The work required in the development of the UVCI facilities is
potentially very large. We heard an estimate from an observer at the review
that writing useful software for the VLA/VLBA would require roughly 10
staff-years. We believe this is a reasonable and realistic estimate.  The
``travelling circus'' planned for the UVCI effort in Dwingeloo in early 1995
seems unlikely to work, given previous experience in arranging large
collaborative design efforts.  In addition, we perceive a politically motivated
rapid expansion of the UVCI to cover many different types of telescopes as
quickly as possible. This is unwise.

{\em The Green Bank Model.} The Green Bank Model, which is an abstraction of
how complicated calibration and imaging algorithms are structured based on a
physical model of the real world, remains controversial.  Since its development
at the February 1992 design meeting (Shone and Cornwell 1992) and subsequent
refinements, little progress has been made in design or validation.  There
continues to be strong but hard-to-summarize opposition to the Green Bank Model
from a small number of people (two). We find the criticisms hard to analyze and
reproduce here.

{\em IMAL and Visualization.} The image display and visualization facilities
developed by the Illinois group are both interesting and problematic.  They
fall into the category of ``AIPS++-Aware'' software, but it appears that this
category of software was defined in order to provide a space for code that, for
political and programmatic reasons, was not developed in an AIPS++ compliant
manner.  The AIPSView application is sufficiently well-developed that it should
be made available to the user community, and if ``marketed'' properly it will
bring much needed credibility to the overall effort.  The application appears
to be successful despite the limited user testing and feedback that has
occurred (only one astronomer has looked at it in detail).  This contains a
useful lesson for the project: development of an initial version of a tool can
be performed effectively by a close programmer--astronomer collaboration.
However, the facility would have been much more impressive if AIPSView were
usable as a general purpose display server for AIPS++ applications.  In
addition, there appears to be an unnatural split between the design and
implementation work on visualization and image analysis in the Project. We see
no real reason for this split.

The BIMA group indicated plans to incorporate extensive image analysis
capabilities into the visualization toolkit.  We have concerns about
this approach, in that it burdens a self-standing display and visualization
tool with a semi-infinite potential for growth and complexity.  Image
analysis must be done on the original data (not on display buffers) and
could easily grow in scope beyond a supportable level if incorporated
directly into the image display and visualization applications.

{\em Astronomical Oversight.} Links of programming efforts to interested and
committed astronomers are missing. In the acerbic but well-chosen words of one
observer at this review, the project is running ``open-loop,'' that is without
sufficient oversight and correction from astronomers. This is especially
pernicious given the all-encompassing nature of the main specifications
document used by the project (Hjellming 1992). There seems to be a more
fundamental communications problem:  even after two days of presentations, one
astronomer commented that he did not have a firm idea of what AIPS++ was.

{\em The Relationship Between AIPS and AIPS++.} The continuing existence of the
AIPS package is both a hindrance and a blessing to the AIPS++ project. The
advantage is that the pressure for applications is lessened. The main
disadvantage is the same. AIPS++ has to demonstrate superiority over existing
packages in some area to gain converts.  There is an obvious schism between the
AIPS and AIPS++ Project staffs. This is deeply regrettable.

{\em Documentation.} The plans for on-line user and programmer documentation
seem sensible and well-thought out. We doubt that the staffing required has
been accurately assessed.

{\em Performance.} The relative priority attached to performance issues is not
stated in the AIPS++ mission statement. It was suggested by one observer that
the AIPSMark benchmark be reproduced in AIPS++. This would require coding of
all the DDT (Dirty Dozen Tasks) in comparable form in AIPS++.

{\bf Recommendations:}

{\em SDCI.} The Project should continue with the development of the OTF mapping
tool. It is important that the design be expressed fully in terms of the Green
Bank Model.  Add more functionality expressly to check the GB Model.
Possibilities include baseline fitting and removal, multi-beam observations,
and on-line calibrations.  Install this software at the 12-m in Tucson and try
to add functionality as suggested. Make this a ``flagship'' application for
SDCI in AIPS++. Add more sophisticated imaging algorithms as possible.  Analyze
the need carefully and consult often with interested astronomers over the plans
for a UniPops replacement.

{\em UVCI.} In the area of UV data calibration and imaging, focus on a
telescope model sufficient to calibrate a single telescope's interferometric
data (e.g., VLA, WSRT, or AT). Push this all the way from data filling to
self-calibration {\em before} starting on other TelescopeModels and
MeasurementModels.  Arrange for a small number of people to work in this area.
Avoid premature testing of the design against every conceivable type of
telescope.  When the basic features of the design have been demonstrated in
this way, expand it out slowly to cover more additional telescopes.  We
encourage, at least initially, sequential development by one or two people
rather than parallel development by a large number of people. This conservative
approach is warranted by the difficulties expected in this complicated area.
Note that this implies, not unexpectedly, that interferometric data reduction
capabilities will not be delivered early in the Project.

{\em The Green Bank Model.} For both the SDCI and UVCI development efforts, the
Green Bank Model should be tested and scrutinized.  If it has significant
problems, it should be modified or dropped. However, for the moment, continue
with it.

{\em IMAL and Visualization.} For image analysis and visualization, release
AIPSView soon as a stand-alone AIPS++ application.  There seems to be a strange
reluctance in the project to capitalize upon the success of the development of
AIPSView. The fact remains that it is associated with the AIPS++ project and
can be more closely incorporated with ``main-stream'' AIPS++ in the future if
warranted.

The working relationship between the BIMA group and the rest of the
Consortium needs attention, however.  Now that more of the infrastructure
is available, the BIMA group should incorporate AIPS++ classes into their
visualization tools (e.g., FITS classes, image classes, and coordinate
classes).  This will allow for a tighter integration of the visualization
utilities with AIPS++ applications, yet also allow these utilities to be
used ``stand-alone'' --- to the benefit of the entire astronomical community.

{\em Astronomical Oversight.} The Project should establish
programmer--astronomer partnerships. This places AIPS++ development in the
personal ``critical path'' of the astronomer and thus will ensure continuing
involvement of the astronomer, something that otherwise is difficult to obtain.
This model of interaction will produce very capable applications in one or two
narrowly focussed areas, rather than across a broad range of application
areas, which should be demonstrated to the user community at every opportunity.
Do everything possible to ensure that realistic deadlines are carefully
set and are then met. Nothing is more destructive to a collaboration than
promises that are broken time and time again.

{\em The Relationship Between AIPS and AIPS++.} Don't compete head-on with the
AIPS Project or other existing astronomical packages. Choose areas where other
packages are known to have deficiencies, e.g., real-time filling of data as is
needed in On-The-Fly mapping.  We doubt that a formal testing of the AIPSMark
is warranted at the moment, especially given the work entailed in writing the
DDT tasks in a comparable form. However, we encourage monitoring and correction
of performance issues as a standard part of development, if appropriate. An
AIPS++Mark may be worthwhile as a long-term goal.  In addition, it would
beneficial to both the AIPS++ Consortium and specifically to NRAO if the schism
between the AIPS and AIPS++ Project staffs can be healed.

{\em Documentation.} Inform the astronomical community very soon of plans for
user documentation development and ask for contributions. It may be that other
groups have plans for documentation that complement those of the Project.

\section{Organization and Project Management}

\subsection{The AIPS++ Consortium}

The AIPS++ Consortium is an informal collaboration between dissimilar
institutes with different short-term agendas. The only common ground of the
institutes involved is a motherhood-type long-term goal.
In addition there are cultural differences between the adhering countries.
To illustrate some of the differences:

\begin{itemize}

\item European countries have been involved in many collaborative projects in
astronomy for many decades at a variety of levels:
 \begin{itemize}
        \item government, e.g., ESO (D-DK-S-I-CH-NL-F-B)
        \item agencies, e.g., IRAM (D-F-E), ING (NL-GB-E)
        \item institutes, e.g., EVN (D-NL-PL-I-GB-S)
 \end{itemize}
Australia has some experience as well. In the US international cooperation
has only recently started.

\item National facilities are sometimes run and directed by national bodies, but
in other cases they are autonomous, providing a national facility with
only retrospective accountability.

\item Some of the partners are private institutes, some national facilities.

\end{itemize}

A collaboration comparable to the AIPS++ Consortium is the EVN (European VLBI
Network).  It is an open collaboration between European institutes (some
national, some private) to coordinate VLBI observations. In addition to the
members it even has associate members (F-CHN-USSR). The EVN assumes
control of the telescope infrastructure of its members for certain periods
of time (for coordinated observing campaigns) and has recently instituted
a European VLBI Institute.  The EVN has also built a satellite receiver as
a joint but distributed project.

The general operation of the EVN is as described by the rules above, some of
which were copied from organizations like ESO and of which came into existence
after the signing of the initial ``motherhood'' MOU.

{\bf Recommendations:}

For such an organization to work, the following ground rules should be observed:
\begin{itemize}
\item A clear MOU should be defined, stating the responsibilities of each of
the partners in the collaboration, and the goal to be attained.
\item Partners should have a vested interest in the goal of the project.
\item Political decisions about the adherence to the MOU and changes to it 
should be made by representatives of the institutes that can make decisions
about financial and manpower matters (Steering Committee).
\item Technical and scientific advice on the project should be given to the SC 
by an Advisory Group consisting of scientists (in this case astronomers and
computer scientists). This advice could be on matters raised by either
the SC or the AG itself.
\item Project management should report to the SC (and give information to the AG
if requested), but it, and the project workers, should {\em not} be members
of the SG.
\item Partners should be ``equal,'' i.e., they should contribute according to
their relative size and/or benefits.
\item A clear work-plan and design should be present and be regularly updated 
and detailed by the PM. The PM should report to the SC on this plan, and
any changes should be vetted by the SC.
\item Whatever happens, it should be clear where and when decisions are made 
(and should be made) and they should be communicated to all project members.
\item Communications between project members should be regular and open.
\item Distributed groups should have well identified (sub-)tasks, with planning
and design criteria attached.
\item A collaboration budget (even if only minimal) should be available to the
Project Manager.
\end{itemize}

\subsection{Steering Committee}

The Steering Committee has been ineffective in providing clear strategic and
management guidance to the Project Manager and the development teams.  This has
led to a severe lack of credibility and direction for the project.  Much of the
development is now motivated by technical prerogatives, rather than
user-specified requirements.

The minutes of the Steering Committee contain evidence of many good intentions
that have ultimately failed in their execution.  The statement that the
concerns of the Steering Committee are with policy is all well and good, but a
bit pointless when it is clear that much of the policy has little impact on the
everyday reality of the project.

The structure of the Steering Committee is anomalous in that site Technical
managers are, in most cases, also Steering Committee members and in that the
Project Manager also represents one of the Consortium partners on the
Committee.  Consequently, it is not surprising to find a confounding of motives
and viewpoints among Steering Committee members.  The lack of control over
resources exercised by most of the Steering Committee members means that there
are serious problems in getting Consortium Members to commit and supply the
resources necessary to meet Project goals.

{\bf Recommendations:}

The Steering Committee should seriously consider reconstituting itself in
such a manner that binding decisions can be made, without appeal to higher
authority.

The Steering Committee needs to formulate a clear and agreed strategy for
achieving the AIPS++ mission statement, that is then communicated to the
Project Manager as an unambiguous determinant of his/her role.

The Steering Committee needs to provide clear guidance to the Project
Manager on both technical and end-user priorities, so that he/she is
empowered to make decisions that reflect the intentions of the Steering 
Committee.

There should be no confounding of roles within the membership of the
Steering Committee.

\subsection{Project Management}

The AIPS++ project is not managed, despite the existence of a Project
Manager role, in any conventional sense of the word.  The AIPS++ project
can best be characterized as 

\begin{itemize}
\item anarchic and out of control;
\item driven by egos, private agendas and personal chemistry;
\item having most decisions justified on a post-hoc basis;
\item not guided by a clear set of requirements;
\item having ill-defined release functionality;
\item suffering from a fluctuating resource base;
\item having no meaningful schedules, milestones, or understanding of internal
dependencies; and
\item surviving only because of the skill and dedication of a few individuals.
\end{itemize}

{\bf Recommendations:}

A full-time and effective Project Manager needs to be put in place 
immediately.

Realistic project management techniques must be adopted immediately for
the AIPS++ project.  This should include the following, as a minimum
requirement:

\begin{itemize}
\item Sensible (can be achieved) and meaningful (based on defined
requirements) schedules, work-plans, and resource allocations (with
committed resources), all driven by the Steering Committee's strategic plan.
\item Regular management and technical reviews, with reports to the
Steering Committee.
\item Recording of actual effort (so that estimation techniques can be 
refined and so that real costs can be calculated).
\end{itemize}

Appropriate project management skills must be acquired.

AIPS++ should not be considered as a research project, but rather as the
construction, in software, of a ``research instrument'' which can be deployed
by astronomers to advance their science.  It is recognized that new software
technologies are important in the development of the system, but their usage
in the project should be carefully considered.


\subsection{Skills Base}

There is a longer-term issue that relates to the provision of the software
engineering skills needed to support the distribution and evolution of
successive version of AIPS++ once it is used as a ``research instrument'' by
practicing astronomers.  Software engineering capability will become
important as AIPS++ evolves and becomes increasingly relied on.  New
modules and applications developed by astronomer programmers will need
to be guided by ``best software engineering practice.''

{\bf Recommendations:}

Establish a small software engineering support group (2 or 3 persons) at the
AIPS++ Project Center.


\section{Strategic Planning}

\subsection{Release Schedules and Project Goals}

It is clear that making early releases of a new software system can have both
positive and negative results.  If the release is scoped properly and made
available to ``friendly users'' (i.e., people willing to work closely with the
software development group and provide positive feedback) it gives the
development team needed inputs for subsequent improvements and extensions to
the system.  However, if the contents of the release are oversold, or
expectations exceed what can be delivered, an early release can do more damage
than good.  Moreover, the damage can have a long-lasting effect on user
perceptions of the system.  A poorly prepared early release will alienate much
of the potential user community.

Of course, delaying software releases too long also undermines the credibility
of the software development project.  However, it is our opinion that the
potential harm of a premature release is the greater risk.  AIPS++ should not
promise a release to users outside of the immediate software development
community (i.e., the Consortium sites) until it has a robust set of utilities
and a (limited) number of demonstration applications.  These applications need
not be complete, but must show the potential of the new system and provide some
incentive for users to make the transition from the old to the new technology.

The relatively early availability of the BIMA visualization software meant that
there was a clear opportunity to demonstrate some of the emerging AIPS++ data
visualization functionality to the wider community, even if it does not meet
the longer-term requirement for AIPS++ compliance.  Development could then have
been guided by feedback from real user requirements and experience, rather than
more abstract and idealised considerations.  This particular strategic
opportunity was not exploited, if even it was perceived by the Consortium,
because of the technical rather than user focus that dominates much of the
project's thinking.  The response of the review (observer) audience to the
demonstration of the BIMA software is evidence enough to support this
particular supposition.

\subsection{Role of AIPS++ in the Astronomical Community}

Astronomical research is rarely confined to a single instrument or wavelength
domain, and astronomers have to use data analysis tools from a variety of
systems and environments in order to develop a comprehensive understanding of
the physics of astronomical objects.  AIPS++ strives to be THE reduction and
analysis tool for radio astronomy (for both filled and synthetic apertures),
yet it must work in conjunction with other astronomical data analysis packages
and public domain or commercial software.  The Project does not seem to have
given much attention to this situation.  That is, how might astronomers make
use of AIPS++ facilities without having to import, install, and learn the
entire AIPS++ environment?  And conversely, how might an AIPS++ user access
tools from outside the environment, and easily transfer data from one system to
another?  We believe that the AIPS++ design is flexible enough to facilitate
open exchange of software and data, but simply want to emphasize the long-term
importance of providing an open system.  It would be a mistake to implement
AIPS++ under the assumption that the system provides all capabilities, or
isolates the user from either the host operating system or other applications
packages.

\subsection{Generality and Completeness vs.\ Cost}

The Panel is concerned with the implications of the frequently stated ``Polish
graduate student'' model (whereby all software required for the AIPS++ Project,
other than compilers, must be non-commercial), which appears to one of the very
few identifiable strategic drivers for the AIPS++ project.  The ``Polish
Graduate Student'' is a powerful, effective metaphor that may have been too
effective in guiding this project into unfortunate, wasteful redevelopment of
difficult software. This ``parsimony-driven'' view of the development of an
important (software) ``scientific instrument'' seems highly anomalous, given
the cost in human and hardware terms of conducting most radio astronomy
research.  This tacit strategy has been costly to the project in that it has
forced the developers to eschew, as a matter of principle, highly appropriate
commercially available software, which has had to be rebuilt from scratch or
acquired from other research groups (with very considerable long-term support
and evolution implications).

\subsection{Guidelines for Strategic Planning}

The technical development has proceeded in the absence of a clear understanding
of the ordering or priority of applications to be supported by AIPS++.
Technical staff have thus applied their best effort to anticipate what
infrastructure might be needed.  At least five different criteria have been
used in discussions for determining or suggesting the proper ordering and
priority of AIPS++ application development.

{\em 1. AIPS++ must provide at least one end-to-end analysis path.}
In favor of this criterion, people argue that in order to earn credibility with
the client community AIPS++ must show that it really does something.
Furthermore, AIPS++ must show that it does that something correctly and with
reasonable performance. The use of the DDT test set was suggested as a means to
cross-validate AIPS++ against Classic AIPS. While a comparison of results on
the DDT test set or some other test suite might be useful for validating that
AIPS++ tools do valid computations, the distributed architecture of AIPS++ may
make it very difficult to obtain meaningful performance benchmarks. Discussions
with project management suggest that while DDT might be a reasonable partial
strategy for accomplishing this objective, DDT does not trace the whole
end-to-end data analysis path of interest. This criterion emphasizes the
importance of early prototype tools, even ones that do not use the full
capabilities of the envisioned computing infrastructure. In addition, the
observation that astronomers tend not to comment on design documents but they
evidently respond viscerally to effective demos argues that a rapid prototyping
strategy would be particularly effective in this community.

{\em 2. AIPS++ must provide the core functionality of AIPS.}
Besides the ambiguity of what the ``core'' functionality of AIPS might be, there
is doubt as to whether this criterion yields the most effective use of project
effort. On the one hand, duplicating AIPS functionality might not be an
effective goal since AIPS exists and does support much work. In addition, it is
clear that the AIPS core is itself inadequate for the analysis of
interferometric data from a number of telescopes.  On the other hand,
duplicating AIPS functionality might provide an entry path to AIPS++ for the
largest number of users.

The next three criteria would lead the AIPS++ project team to produce
capabilities that would be unique to AIPS++ in some way. The arguments for
these and against the above criteria are that astronomers have software that
supports many of their needs now, so AIPS++ would have a greater impact by
providing something not available in other software packages, whether this be
unique preprogrammed functionality, unique flexibility, or unique integration
of available but currently separated tools. In favor of the above criteria are
the arguments that the above criteria would engage one larger user community
and the experience with existing tools would provide a better cross- validation
of the AIPS++ infrastructure than would completely new development.

{\em 3. AIPS++ must provide a way for the community to understand and access 
AIPS++ infrastructure capabilities, thereby allowing the community to develop 
their own data analysis methods.}
The review panel was told several times that user programmability is the key
potential advantage of AIPS++. This capability would be a major attractor of a
user community to AIPS++ and would set up AIPS++ to attract graduate students
and build a long-term future in the community. Users interested in such
interactions are interested in direct access to their data and the ability to
develop new reduction and analysis algorithms, and not necessarily in the
niceties of GUIs nor in advanced computing technology in and of itself. If this
criterion is adopted, it will be crucial to devise an effective and efficient
strategy for communicating to users a vision or model and a direction of
development of the infrastructure.

We note that if direct manipulation of data is adopted widely in the astronomy
community it may dramatically change the way astronomy is performed since it
will be necessary to describe and justify algorithms mathematically rather than
by reference to a particular standard analysis program.

{\em 4. AIPS++ must provide something in a form that is better in some way than
what other packages provide.}
The idea is that to attract a user community whose needs are already at least
partially satisfied by existing software packages, AIPS++ must provide versions
of the tools that are more accurate, more robust, better integrated,
easier to use or customize, or faster than the existing tools.

{\em 5. AIPS++ must provide some things that are best-in-the-world 
implementations.}
This objective would be most readily realized by associating AIPS++ with an
emerging project for which AIPS++ would provide primary support. Such an
arrangement would likely associate AIPS++ with a small but loyal user
community. Having any community willing to proclaim the merits of the AIPS++
project and show real results obtained from it would be an advance over the
current situation.

The review panel was told that the view of project management is to push
single-dish applications now (especially NRAO instruments) and in 1995 focus on
core interferometry applications.  The direction of the infrastructure design
has occurred primarily by consensus and persuasion rather than, for example, by
explicit evaluation of options by a task force, critical evaluation of the
decisions, and final decision by the technical leader.

{\bf Recommendations:}

The most important recommendation is that the AIPS++ Project must have a
clearly defined strategic plan --- to date, there appears to be none. We
suggest that the AIPS++ Steering Committee and Project Management define
specific goals for each phase of AIPS++ development.  These goals should be
based on functionality and content, not the calendar.  The goals should be
chosen for their strategic interest to the AIPS++ project, i.e., to demonstrate
both the practicality of the object-oriented software development methodology
and the potential for flexibility and new functionality as a result of the
object-oriented paradigm.  The Project has already identified several possible
applications that could form the basis for the initial releases, such as single
dish (on-the-fly) mapping, image deconvolution (various CLEAN algorithms), and
general purpose image manipulation via the \glish\ CLI.  We suggest
that one or two facilities of this sort be defined as the goal of each phase,
and that the Project enlist the help of astronomers at the Consortium
institutions and within their user communities to provide feedback.

On the more general issue of which of the general criteria discussed above
should form the primary basis for defining a strategic plan, the Panel
takes no position.  No doubt more than one can be adopted. We observe, however,
that the community appears for the most part to be willing to be patient with
the project and accept the Project's priority and ordering decisions when such
decisions are indeed made and communicated to them so they can know what to
expect from AIPS++.  Regardless of the criteria selected, the AIPS++ project
management must identify the infrastructure elements that are really needed by
the initial applications and get those developed rapidly.


\section{Conclusions}

In summary, the Review Panel firmly believes that the AIPS++ Consortium should
move rapidly to make changes in three key areas if the project is to survive,
to start to flourish, and eventually be the source of an innovative set of
research tools for the radio astronomy community.  These areas are effective
Steering Committee guidance, project management, and collaboration with the
astronomy and computer science communities.

The Steering Committee must rapidly resolve the present confounding of roles
that exists and then take charge of the project by providing clear guidance on
strategic and management issues.  The scope and functionality of planned
releases of AIPS++, linked to real radio astronomy research demands, must be
agreed and communicated to the development team.  Clear terms of reference for
the Project Manager need to be drawn up and enforced.

A full-time Project Manager must be appointed immediately and expected
to put in place commonly accepted software project management processes
and standards.

In order to end the very real isolation of the AIPS++ project, the
Consortium should move to establish close collaborative ties between the
AIPS++ project and practicing astronomers on one hand and the computer
science community on the other.

We believe that success of the AIPS++ Project is critical for
the mid- and long-term future of radio astronomy research and that technical
expertise is available in sufficient quality and quantity to assure this 
success.


\end{document}
