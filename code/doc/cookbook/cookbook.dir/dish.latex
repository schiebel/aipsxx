\chapter{Single Dish Analysis}
\label{GRsingledish}

{\em R.W. Garwood \& J.P. McMullin}

\section{Introduction}

DISH is a collection of \glish\ scripts and clients which provide an
environment within \aipspp\ for single dish radioastronomy analysis.

The latest version of DISH merges development between the single dish and
interferometric efforts in AIPS++. DISH is a standard tool and may take
advantage of the tool manager interface. DISH also has a new and
much simplified Command Line Interface (CLI). Note: If you have used previous
versions of AIPS++/DISH, you {\bf must} remove the file containing the 
previous state information. This is contained in a file called {\it default}
which will be under your home directory in the aips++/dishstate directory:

\begin{verbatim}
> rm ~/aips++/dishstate/default
\end{verbatim}

This will prevent spurious errors from appearing upon startup due to the
changes in the software from the last release.

More information is available on DISH in the User Reference Manual.

DISH may be accessed in several ways:
\begin{enumerate}

\item{} After setting up the environment for AIPS++:

\begin{verbatim}
> . /aips++/release/aipsinit.sh       # bash shell AIPS++ setup
> source /aips++/release/aipsinit.csh # (t)csh shell AIPS++ setup
\end{verbatim}

execute:

\begin{verbatim}
> glish -l dish.g                     # to load just the single dish analysis
or
> aips++ -l dish.g                    # to start AIPS++ with single dish
\end{verbatim}


\item{} Once in AIPS++, it can be accessed through the tool manager interface.
        \begin{enumerate}
        \item{}Select on Packages, dish.
        \item{}Select on Modules, dish.
        \item{}Select on Tools, dish.
        \item{}Press create.
        \item{}Choose the toolname for the new DISH tool and press "Create".
        \end{enumerate}

\item{} Once in AIPS++, it can be accessed from the command line.
        \begin{enumerate}
        \item{} include 'dish.g'
	\item{} d:=dish();
        \end{enumerate}

\end{enumerate}

The default is to start the dish tool with the GUI interface as before.
However, this may be over-ridden using a local .aipsrc value:

\begin{verbatim}
#dish.gui.auto:T
dish.gui.auto:F
\end{verbatim}

In this release (v1.7), DISH may use \aipspp\ flat tables (filled through the
fits2table command) or MeasurementSets (either generated naturally or converted
via sdfits2ms or through facility fillers (e.g., gbtmsfiller)).


\section{Getting Data Into Dish}

There are several ways to get data into DISH: 

\subsection{MeasurementSets}

If you have data produced as a MeasurementSet,
it merely needs to be loaded into the system. From the
GUI, this entails using the Open option in the File menu (either Read only
or Read and Write). This opens up a file chooser GUI which allows you to
select the relevant file. From the command line, the command:
\begin{verbatim}
- d.open('pne.ms');
\end{verbatim}

Loads the file into the results manager and is ready for use.

\subsection{Facility filler (e.g., GBT)}

Some facilities have native fillers which directly convert raw data formats
into the MS format. An example based on the GBT is provided below:

\begin{verbatim}
gbtmsfiller project=zeroSpacing01 minscan=401 maxscan=441 msrootname='oriona1_'
 fillrawpointing=True

where project = the GBT project directory
      minscan = first scan to fill
      maxscan = last scan to fill
   msrootname = the name of the output MS; this will have the Backend used
                appended to it.
\end{verbatim}

A dish utility function, {\it import}, streamlines this process, filling
the data and doing an {\it open} on the resulting MeasurementSet.

\subsection{SDFITS data file (e.g., Arecibo Observatory)}

\begin{enumerate}
\item Convert to MS

Use the \aipspp\ utility {\it sdfits2ms} to convert from a fits file
following the SDFITS convention to an \aipspp\ table. The syntax,
from the UNIX prompt, is:
\begin{verbatim}

sdfits2ms sdfits_name ms_name, for example:

charybdis<965>$ sdfits2ms n7027.sdfits n7027.ms
0%....10....20....30....40....50....60....70....80....90....100%
End Successfully:      34.79 real        5.43 user        5.03 system
\end{verbatim}

\item
Use the \aipspp\ utility {\it fits2table} to convert from a binary
table following the SDFITS convention to an \aipspp\ table. The syntax,
from the UNIX prompt, is:
\begin{verbatim}
fits2table input=sdfits_file output=aips2_table [which_hdu=#]
\end{verbatim}
where ``sdfits\_file'' is the name of the SDFITS file and ``aips2\_table'' is
the desired name of the new \aipspp\ table created by this step.
The third argument, ``which\_hdu'', is optional.  Use this to specify
a specific FITS header data unit (hdu) other than the first one after
the primary hdu.  For example, if you have a FITS file which has three tables
following the primary hdu and the second table is a valid SDFITS table
then you would use \verb!which_hdu=2! to indicate that that hdu is
the one to be converted to the indicated output \aipspp\ table.

Note: Arecibo Observatory data may be brought into DISH in this manner.

\end{enumerate}

\subsection{UniPOPS SDD data file}

There are three steps to getting a UniPOPS SDD data file into DISH:

\begin{enumerate}
\item Convert UniPOPS SDD data to UniPOPS FITS binary table.

Use the UniPOPS utility {\it uni2fits} to convert the SDD data to FITS binary
format. To use the program, you must be logged onto a Sun workstation 
where UniPOPS has previously been installed and have your path include:

\begin{verbatim}
export popsdir=~unipops/test/
export PATH=$popsdir/sunbin:$popsdir/utilities:$PATH
purgatory<143>$ uni2fits
Starting uni2fits ver 1.3 
So you want to write UniPOPS data to FITS tape eh?
 (to abort this dialog, type CNTRL-C)
 
Do you want output file on disk(D) or tape(T)? [default=D]: 
Using default (D).
Please enter name of output FITS file: hbnmeth.fits
Output file will be: hbnmeth.fits 
 
Choose line or continuum (L, C) [default=L]:    
Using default (L)
 
Label scan axis as Frequency(F) or Velocity(V) [default=F]: V
 
Please type input UniPOPS file name: sdd.www_001
Do you want to choose a scan number range? (y or n) n
--------------------------------------------------------
Ready to make FITS file, name = hbnmeth.fits
 Will use all L scans from sdd.www_001.
 is this ok? (type Y to proceed) Y 
 
Getting initial information from UniPOPS file.
1+0 records in
1+0 records out
 
Previewing the UniPOPS file.

u2f version 1.5 (22Apr98),  run: Fri Oct 13 14:19:36 2000
12182+0 records in
12182+0 records out
Wrote 0 scans out of 3018; 0 fits records written. 
 
Converting the data to FITS.

u2f version 1.5 (22Apr98),  run: Fri Oct 13 14:20:50 2000
12182+0 records in
12182+0 records out
Wrote 2674 scans out of 3018; 1675 fits records written. 
 
FITS writing complete.
\end{verbatim}

\item Convert UniPOPS FITS to standard SDFITS.

Use the \aipspp\ utility {\it uni2sdfits} to convert the data file. The syntax 
is:

\begin{verbatim}
uni2sdfits input=unipops_fits_file output=sdfits_file
e.g.
charybdis<276>$ which uni2sdfits
/aips++/daily/linux/bin/uni2sdfits
charybdis<277>$ uni2sdfits input=hbnmeth.fits output=hbnmeth.sdfits  
uni2sdfits: Version 1999/07/30 BEG/TPPR/PJT/GvD

Scanning all HDUs looking for any non-constant DATA column shapes
Skipping HDU 0 of type : 1
Scanning HDU 1 of type : 4
HDU 1 is a BinaryTable with fixed shape DATA column with TDIM = (128,1,1,1,1)
Primary HDU
HDU # 1
column SERIES renamed to DATA
column BANDWIDT renamed to BANDWID
column PROJECT renamed to PROJID
column VELOCITY renamed to VFRAME
column VCORR renamed to RVSYS
column TOUTSIDE renamed to TAMBIENT
column BEAMWIDT renamed to BMAJ
NMATRIX keyword removed
MAXIS keyword removed
MAXIS2 keyword removed
MAXIS3 keyword removed
MAXIS4 keyword removed
MAXIS5 keyword removed
Removing column 2 : MAXIS1  
keyword value set: TDIM195 = (128,1,1,1,1)
done.
\end{verbatim}

\item Convert the SDFITS file to an \aipspp\ table (either
a MS or a flat table).
See Section 2.2.

\end{enumerate}

\subsection{Dish demo data}

There is also a utility for loading demonstration data into dish 
as a check of the functionality. More information is given on 
this in the Getting Results in AIPS++ Documentation.

\begin{verbatim}
- include 'dishdemodata.g'
- dishdemodata() # this will create several demo working sets
- 		 # on disk, which are then available to be loaded and
-		 # worked upon.
-                # dishdemo1, dishdemo2, dishmopra, dishparkes, dishspecproc
-		 # each of these can be accessed through the open command, e.g.
- d.open('dishdemo2'); # assumes 'd' is the defined DISH tool.
\end{verbatim}

\section{The Dish Graphical User Interface}

In DISH, wherever practical, what you see is what you are operating
on.  So, for example, when you press the ``Apply'' button in the
``Baselines'' graphical user interface (GUI) frame of DISH, a
baseline will be fit to whatever is currently plotted in the
DISH plotter.  Results appear in the results manager
and, when appropriate, are immediately displayed on the plotter.
Results can be moved between the results manager, the calculator,
and the browser through the use of
a menu which appears when the user presses the right mouse button
in one of these frames.
This default behavior can be changed so that selections from the Results
Manager will be operated upon. This change is necessary to perform
functions on SDIterators (see Bulk Processing).

The current state of DISH (the contents of the results manager, the
settings of all of the operations, the contents of the calculator,
and any active browsers) can be saved at any time either to the
default state file or to a location of the user's choosing.  DISH can
be restored to a previously saved state.  By default, DISH saves its
state upon exit from glish and restores itself to that same state when
DISH is started in a new \glish\ session.

The following sections detail the major graphical components of DISH.

\subsection{Results Manager}

The Results Manager is the heart of DISH. All results which DISH 
creates in response to user actions are stored in the results manager and 
listed in the {\it Results} window. These results are all available at the 
\glish\ command line as glish variables of the same name for the user to 
interact with. DISH immediately plots the
currently selected result if it can be plotted. A description is associated
with each result. The user can change the description or the name of the  
result if they choose to do so. Certain results can also be browsed.
Since each result is also a glish variable of the same name, new names
are limited to be a valid glish variable name.

Results can be copied to and from the clipboard or to the calculator.
This Copy/Paste facility is activated by pressing the right mouse
button when the mouse pointer is over the {\it Results} window.  A
popup menu appears with the three possible options.  The
current selection is copied to the chosen destination when a copy
option is selected.  The contents of the clipboard are
pasted into the results manager when that option is selected.

\subsubsection{Working sets, SDRECORDs, and everything else}

Results are either working sets (also known as sditerators),
SDRECORD, and anything else.  

A working set is a collection of
SDRECORDs.  Specifically, it is an sditerator tool.  When you
open a data set through the {\it File} menu (either a new one
or an existing one) the result is a working set which will be shown
in the results manager.  The other way to create a working set is
to use the ``Apply'' button in the ``Selection'' operation.
When you make a selection this way the result is also a 
working set.  It does not make a copy of the selected data, rather
it makes a reference to the selected data in the underlying data.
This means that if you change the underlying data, the reference
in the selected data is also changed.  Working sets can be browsed.
See the Reference Manual for more information 
on the \htmlref{Sditerator \texttt{tool}}{dish:sditerator}.

An SDRECORD is a \glish\ record which has the structure described
\htmlref{below}{app:sdrecord}.
It is data (generally spectra at this 
point in DISH development) plus some standard header values, any
non-standard header values, and a history of what has been done
to that particular SDRECORD.  SDRECORDs can be browsed and plotted.

Anything may appear in the results manager.  If it isn't a working
set or an SDRECORD it can not be browsed or plotted.

\subsection{Menubar and Message Line}

New data files are created, existing data files are opened, the state of
DISH is saved, a previously saved state is restored, and DISH is reset to
its default initial state through the 
{\it File} menu. The GUI panels for each available operation are enabled
and dismissed through the {\it Operations} menu. The {\it Options} menu
has two options which can be turned on or off.  The ``Write to Script'' option, 
when turned on, causes DISH to echo the
underlying glish commands to the \aipspp\ defaultscripter (ds) tool when a GUI 
operation occurs in DISH.  This can be a way to learn more about what
DISH is doing behind the scenes and write glish scripts to do operations
not yet available in DISH.  When the ``Save when done'' option is turned on,
the state of DISH is saved to the current state file when the
``done'' function is invoked (e.g. \verb!dish.done()!).  The ``done''
function is always invoked whenever you exit glish.  Because DISH can
not be restarted after ``done'' has been called it is best not to
do that unless you are about to exit glish. This deficiency will be
corrected in the next release.

The Message Line is the text immediately below the Results Manager. These 
messages are also echoed to the \aipspp\ logger for longer term storage.

\subsection{Browsing}

A working set within the results manager can be 'browsed' or examined by 
hitting the 'Browse' button. This brings up a frame which lists all of
the scan numbers and objects, record by record, within the working set. Each
SDRECORD can also be browsed to examine all of the contents
(e.g., all of the header information and data).

When browsing a working set, individual records can be copied to the clipboard 
or to the results manager.
This copy facility is activated by pressing the right mouse
button when the mouse pointer is over the browser window.  A
popup menu appears with the three possible options.  The
current selection is copied to the chosen destination when one
of the copy options is selected.

\subsection{Inspecting}

Inspecting is another way of viewing the values of the results within
the results manager. It lists all of the contents of the
selected result.  These may be accessed via the \glish\ command line by the 
names shown while inspecting. 

\subsection{Operations}

\input{dish_oper.latex}

\section{Saving/Restoring State}

If you do nothing, a file called {\it default} will be created within 
the \verb!$HOME/aips++/dishstate! directory upon exiting from a DISH session. 
The file is created automatically and dish will be restored to the
state saved in that file automatically 
upon startup. The dish state file
contains all of the values known to the results manager as well as the
various settings for each GUI element and operation.  So, by default
a record is kept of the state of DISH after each use of DISH and
DISH is restored to this state the next time DISH is used.

There are several ways in which you can alter this default behavior.
\begin{itemize}
\item The state can be saved at any time by selecting the {\it File/Save state}
menu item.
\item A state can be restored to a previously restored state at any time by
selecting the {\it File/Restore state} menu item.
\item The state can be saved to a state file other than the default file at
any time by selecting the {\it File/Save state as ...} menu item.  This
makes the \aipspp\ catalog tool visible and allows you type in or select
a file name to hold the state information.  Once you have made your
selection and the state saved to that file, that file becomes the default
state file until changed with {\it Save state as ...} or 
{\it Restore state from ...}.
\item The state can be restored from a state file other than the default file
at any time by selecting the {\it File/Restore state from ...} menu item.  This
makes the \aipspp\ catalog tool visible and allows you to select
a file name to retrieve the state information from.  Once you have made your
selection and the state retrieved from that file, that file becomes the default
state file until changed with {\it Save state as ...} or 
{\it Restore state from ...}.
\item Restore the state to the default initial DISH state by selecting the
{\it Reset to default state} menu item.
\item The default behavior of saving the state when \verb!dish.done()! is 
invoked (which 
happens which you exit glish) can be turned off by toggling that option
in the {\it Options} menu.
\item The default behavior of restoring from the default state file when
DISH is first started can be turned off by setting the aipsrc variable
``dish.restorestate'' to F (for False).  To turn it back on, set this
variable to (T) or remove it from your \verb!.aipsrc! file.
\item The default state file can be set before DISH starts by setting
the aisprc variable dish.statefile to whatever file you wish to designate
as the default state file.  This is always the state file used when
DISH starts up.  Its default value is \verb!$HOME/aips++/dishstate/default!
\end{itemize}


\section{The Dish Plotter}

\input{dishplotter.latex}

\section{The Dish Command Line Interface}

\input{dishcli.latex}

%\section{SDImager}

%\input{sdimager.latex}

\section{Recipes}

\subsection{Recipe 1: Change syntax to suit}

Finally, any syntax can be roughly approximated by a combination of Glish
and the existing tools in DISH. You can always set a new variable to
equal an existing function. In this way you can modify and create your
own command line reduction language. An example of changing the syntax
to approximate a UniPops command would be:

\begin{verbatim}
UniPops: hanning xx             #this will hanning smooth a spectrum and
                                #redisplay it

- hanning:=function() { d.smooth('HANNING');}
                                #create a new function that automatically does
                                #a hanning smooth; CLI defaults to operate on
                                #the currently displayed spectrum.
- hanning()                     #this now does the equivalent of the above
                                #UniPops command
\end{verbatim}

\subsection{Recipe 3: Add a function to DISH (or fun with extensibility)}

Plugins are another standard means of adding functionality to DISH. Any
file called mydish\_*.gp that lives in the current directory will be picked
up when DISH is started. An example plugin file with a simple squaring
function is shown here:

\begin{verbatim}
pragma include once;
note('mydish_example included');
mydish_example := [=];
mydish_example.attach := function (ref public) {
        #new function
#####User adds functions here
        public.square := function(somevalue) {
                wider public;
                print 'the square of ',somevalue,' is: ',somevalue*somevalue;
		return T;
        }
# other functions go here
#       public.otherfunction := function(input1,input2,etc) {
#              some code goes here to do something
#              return; # can return a value too if you like
#       }
#       public.etc...
#
#####End user edit
return T;
}
\end{verbatim}

If you then look at the functions contained in your DISH tool, d, it will
now have a 'square' function.

Running this operation within dish looks like the following:

\begin{verbatim}
- field_names(d)
done dismiss gui rm ops addop normalcursor busycursor savestate restorestate debug open showscript message plotter gaufit myfunction
- d.square(4)
the square of 4 is: 16
T
\end{verbatim}

\section{sditerator}
See the Reference Manual for information on the 
\htmlref{Sditerator \texttt{tool}}{dish:sditerator}.
and the \htmlref{\texttt{is\_sditerator}}{dish:sditerator} function.

\input{sdfits.latex}
