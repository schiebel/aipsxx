% ADASS II Paper by R.M. Hjellming, on Programmibility in AIPS++
%
\documentstyle[11pt,paspconf]{article}

\begin{document}

\title{Programmability in AIPS++}
\author{R.M. Hjellming}
\affil{National Radio Astronomy Observatory\footnote{The National
Radio Astronomy Observatory is operated by Associated Universities, Inc.,
under a cooperative agreement with the National Science Foundation.
}, Socorro, NM 87801-0379}

\begin{abstract}
AIPS++ is a software system being developed for processing of data 
from radio and other telescopes. Since it is being implemented in 
C++ using object-oriented techniques, the issue of programmability
has more than the normal number of levels of application.  In this
paper we discuss the planned programmability in AIPS++ from the 
point of view of the astronomer ``user'', the programmer coding 
``outside'' AIPS++, and the programmer coding inside AIPS++ with C++.
We emphasize
that in the latter area there is a tremendous difference between
programming with extensive libraries of C++ classes and programming
where the design of classes is paramount; and that even more important
than ``another'' system with ``another'' acronym is the development of
classes for astronomical purposes inside and outside AIPS++.
\end{abstract}


\keywords{astronomical data processing, C++, object-oriented
programming, class libraries, AIPS, AIPS++}

\section{Introduction}

AIPS++ is an Astronomical Information Processing System being
implemented in C++ (Croes, 1992) using object-oriented techniques
(Farris 1992), which is
intended to replace the functionality of AIPS (Astronomical Image
Processing System) for radio
astronomical data reduction, imaging, image analysis, and image
display.  Largely because most astronomers are only familiar with
programming in FORTRAN, but partly because user programmability at
the command language level has become more important to astronomers,
amongst the principal questions asked about AIPS++ is ``how easy
will it be to program''.  In this paper I wish to focus on various
aspects of this programmability.

   Implementation of AIPS++ in C++ means that extensive libraries of classes
are being designed and implemented.  This
fact, and the fact that learning how to design classes (think in
terms of objects) is new to most people, adds new dimensions to the 
programmability issue.
The result is that programmability involves at least four levels of expertise:

  \begin{itemize}
  \item astronomer user ``programming'', both interactively with a
command language, and with scripts;
  \item programming outside AIPS++  with access to AIPS++ data files;
  \item astronomer programming inside AIPS++ using C++  classes; and
  \item programming in AIPS++, with C++, at a lower level with class design.
  \end{itemize}

In this paper we will briefly discuss all four levels, but we mainly
wish to point out the considerable difference between the third and
fourth levels.  Programming with extensive libraries of classes will
be easier and more powerful than any previous form of programming that
astronomers are familiar with.



\section{Astronomer User ``Programming''}

   For most users of any data reduction system the ``friendliness'' of
the user interface, and the match between what the user wants to do and
what the system is designed to do, are the most important elements 
of the system. AIPS++ is  planned to allow multiple,
``plug-compatible'' user interfaces to control the same processing tasks.
The most basic user interface is planned to be an IDL-like, interactive
(command line), and script programming environment.
It is planned to allow the user to control the scope of ``packages''
in each AIPS++ session, in addition to selection amongst available
user interfaces.  Graphical displays will be integrated into all
packages and basic X-windows with multiple mixing and matching of
text, plot, and image display will be the most commonly used display
setup.
Serious consideration is being given to a graphical, data-flow
user interface with programmability with, and inside, ``icons''
(Khoros-, AVS-like).

  It is hoped that the IDL-like programmability with the control
language will satisfy the programmability needs of a large fraction of
astronomers.

\section{Programming from Outside AIPS++}

  Because AIPS++ is aimed at a certain level of POSIX-compliant
systems, we plan the system architecture to allow  UNIX-level 
execution of AIPS++ ``tasks''.  In addition, we recognize that
astronomers use a range of data processing systems and commercial
packages, so
data input and output in simple table, FITS, etc., formats
will be emphasized.  This will allow as high a degree of compatibility
as possible with other commercial and non-commercial data analysis
systems

    Most astronomers still program in FORTRAN, so we are 
planning a set of FORTRAN I/O subroutines to access telescope and image
data from external FORTRAN programs. However it  will be the sole
responsibility of the person programming, or using, programs outside
AIPS++ to NOT corrupt telescope, image, and other data structures 
inside AIPS++.


\section{Programming Inside AIPS++ With C++}

  The most important aspect of programming inside AIPS++, that will
have to be seen to believed, is that most astronomers should be able
to program new things using basic and
application class libraries, requiring only a simple level of
knowledge of C++ programming.  Class libraries for
telescope and image association data handling,
mathematical transformations,
table handling, and
high level graphics, 
will provide a more powerful set of programming ``tools'' than
one has ever had.  This is largely because objects couple data and
operations on that data so that much of the normal drudgery of
book-keeping and programming control structures is minimized.
At the level of programming using class libraries you need to
know the functionality of the classes you use, but you do NOT need
to know how to develop object-oriented software

   Class design and low level C++ programming will always require
a high level of expertise at object-oriented programming in
general, and C++ in particular. However, few astronomers will face
this need once a rich enough set of C++ class libraries are available for
use inside, and outside, AIPS++.

\section{Mathematical Classes}

   Most data processing can be decomposed into:
organizing data into associations, files, and
arrays or tables;
operations on the associations and files; and
mathematical operations on {\it ARRAYS}\ (scalars, vectors, matrices,
cubes, ...) and {\it TABLES} (data structure with columns of the
same data type).

   For this reason extensive effort is being devoted to such
mathematical data processing components (classes).  This will be
based on two types of basic classes:
array classes which implement basic operations on arrays
(multiplication, inversion, determinant, ...); and
table classes which allow complicated storage of data arrays
(including strings and other specially defined data types) as a
function of data coordinates. Table classes will allow:
rows with pre defined fields for each column;
linear operations for arithmetic between row elements and
   between rows of different tables (calibration application,
interpolation, ...);
sorting;
coordinate transformations;
data transformations; and
display operations on columns and column sub-sets.

   Beyond this, higher order math classes will then inherit the
properties of array and table classes to do a large fraction of the 
real processing work. Obvious examples, some of which have already
been prototyped as part of AIPS++ development, are:


\begin{itemize}
\item specialized matrix classes (banded, general, Hermitian,
Hermitian banded, skew symmetric, symmetric, tridiagonal, lower
triangular, upper triangular);

\item GridTool class for gridding and de-gridding between tables and
 n-D arrays;

\item FFTTool classes;

\item linear algebra classes (including LU factorization);

\item statistics classes (linear least squares fitting with error analysis;
histogram classes; standard distribution generation with noise)

\item decomposition (SVD, Cholesky, QR, LU);

\item bilinear interpolation in matrices and cubes;

\item spline fitting and interpolation;

\item Gaussian (and other) functional component fitting;

\item root computation;

\item non-linear fitting and minimization (iterative substitution,
conjugate gradient, steepest descent, ...); and
  
\item polynomial classes for various standard and orthonormal
     polynomials.
\end{itemize}

   An example, to illustrate the sort of programming one can do
with a powerful set of classes, is the following which uses class
libraries to do a fairly sophisticated level of data fitting with
error analysis.

\begin{verbatim}
/* Programming with C++ Classes - a non-trivial example:
   Polynomial Least Squares Fitting with Error Analysis
   Solving for X in AX = y where y is a vector of data as a 
   function of an independent variable vector x. 
*/
#include <fstream.h>
#include <dgenfct.h>        // Basic I/O and matrix libraries
#include <dgenmat.h>
#include <rstream.h>
#include <pstream.h>
#include <polylsq.h>        // Class doing all the work

void main() {

  PolyLeastSquareFit x;     // Invoke constructor for object x

  x.calcfit();              // Solve for fit to polynomial

  x.erroranal();            // Do error analysis for fit
}
\end{verbatim}

This is the sort of coding an astronomer would have to do to use these
classes.  All that he needs to know is the public information
in the following header file for the PolyLeastSquareFit class.

\begin{verbatim}
Class PolyLeastSquareFit{
  Public:
    PolyLeastSquareFit();      // Constructor.  Asks for order of 
                               //      polynomial and data input
    void fileInput();          // File input of (x,y) data table
    void kbdInput();           // Type in (x,y) data table
    void calcFit();            // Find Atranspose, G = Atranspose*A,
                               //  Ginv, Xsoln = Ginv(Ainv*y), ysoln
                               //  = A*Xsoln, using matrix classes
    void errorAnal();          // Compute rms, sigma vectors and 
                               // correlation coefficient matrix
  Private:                     // hidden data and member functions
    int n;                     // number of data points
    int order;                 // order of polynomial fit
    DoubleGenMat *y;           // pointer array of y data
    DoubleGenMat *a;           // pointer to "A" matrix
    DoubleGenMat *calcValues;  // pointer to calculated values
    DoubleGenMat *X;           // matrix of polynomial coeff.
    double errorSqd();         // member function for finding
                               //         sum of errors squared
    double rms();              // find rms
    double std();              // find standard deviation
    double corrCoeff();        // find correlation coefficients
}; /* Followed by code for constructor and all member functions */

\end{verbatim}

Note that in the private declaration portion of the class the sort of
details one usually must cope with in programming are hidden because
they
are things the astronomer does not need to know or deal with.

   In order to emphasize the programmability aspects of AIPS++ in
terms that can be commonly understood, we have not discussed the
applications classes being developed for manipulating, calibrating, imaging,
etc., radio (and other) astronomical data.  These can be viewed as the
next layer of classes on top of both  the mathematical and table (data base)
classes and higher level math classes.  In the end, all these things,
hidden inside what will be a hopefully friendly user interface, will
be the program entity called AIPS++. 

\section{Conclusions}

   Programming with class libraries developed for AIPS++ should be
both powerful and easy.  All classes developed for AIPS++ will be
copyrighted with a Gnu-like copyright, but will be available in the
public domain via anonymous ftp.  For most astronomers the planned IDL-like
programmability of the command language will be all that is needed.
Import and export between AIPS++ and other commercial and
non-commercial packages will be highly supported.  However, of all
these things it is the development of class libraries for further
development inside and outside AIPS++ that will constitute what has
been called the ``freedom layer'' of software development, and which
will do the most the change the way software of this type is developed
in the future.


\begin{references}
\reference Croes, G.A. 1992,  Second Annual Conference on
Astronomical Data Analysis Software and Systems.
\reference Farris, A. 1992, Second Annual Conference on
Astronomical Data Analysis Software and Systems.
\end{references}

\end{document}




