\documentstyle[epsf]{article}
\textwidth=6.25in
\textheight=9.0in
\oddsidemargin=0mm
\evensidemargin=0mm
\parindent=5mm
\parskip=2mm
\headsep=10mm
\headheight=4mm
\topmargin=-10mm
\raggedbottom
\pagestyle{headings}

\newcommand{\aipspp}{{\sc aips{\tt ++}}}

\begin{document}

\centerline{\Huge\bf AipsView: an \aipspp}
\centerline{\Huge\bf Visualization Tool}

\bigskip
\bigskip
\bigskip
\centerline{\large \aipspp\ note 180}
\bigskip
\centerline{\Large {\it Richard M. Crutcher} and {\it M. Pauline Baker}}
\centerline{\large National Center for Supercomputing Applications,}
\centerline{\large University of Illinois}
\centerline{1995/03/23}

\bigskip
\bigskip
\bigskip


\section {Introduction}

This document describes one part of the visualization component of
the \aipspp\ software system D- AipsView.  AipsView will be a very
powerful, state-of-the-art software tool for the visual analysis of
astronomical image data.  AipsView will include the familiar
display mechanisms of the existing systems, such as AIPS.  It will
also add much new functionality, yielding a more complete set of
visualization capabilities, tailored to the needs of the \aipspp\
community.

AipsView is being developed by the BIMA/NCSA group as a stand alone
but \aipspp\ compatible software tool.  Infrastructure visualization
is being developed by the \aipspp\ infrastructure group at NRAO
Charlottesville; infrastructure visualization is described in a
separate document and is not covered here.


\section{User Requirements}

\subsection{Definition}

The definition of the requirements that astronomers have for
visualization and analysis of astronomical images has been obtained
from the user requirements documents prepared by members of the
\aipspp\ consortium, from meetings at which astronomical
visualization needs have been discussed and tools have been
demonstrated, from comments on earlier descriptions of AipsView,
and from feedback provided by a number of astronomers.  The
definition of requirements will continue throughout the development
process.  We have made very substantial changes in earlier designs
and preliminary implementations in response to such feedback, and
expect this process to accelerate with the alpha release of
AipsView, planned for early 1995.

\subsection{Functionality}

We list below the functionality that we expect to implement in AipsView.
Items with a filled bullet ($\bullet$) will be functional in the alpha release
of AipsView planned for early 1995.  Items preceded by an open bullet
($\circ$) are planned for future releases.

Two-dimensional (2D) display

\begin{itemize}
\item
   Easy to use, intuitive user interface.

\item
   Input of FITS image files.

\item
   Display of 2D images.

\item
   Display of any orthogonal 2D slice from a 3D image cube (e.g.,
   display of RA vs. Dec for a given velocity, display of RA vs.
   velocity for a fixed Dec, etc.).

\item
   Movie or animation function for time-sequence display of third
   dimension of 3D images.

\item
   Blink function for animation display of 2 (or more) single
   planes of different images.

\item
   Simultaneous display of images from multiple data sets.

\item
   Panning and zooming.

\item
   Interactive display of data values, pixel values, and world
   (e.g., RA, Dec) coordinate values as pointer is moved around image.

\item
   Interactive vector (line drawing) plots of data value vs.
   coordinate value, e.g., for line profile plots or intensity vs.
   spatial position plots.

\item
   Hard copy output as X Window screen dump.

\item
   Complete colormap editor for manipulation of color look-up
   tables and creation of new tables.

\renewcommand{\labelitemi}{$\circ$}
\item
   Input of \aipspp\ internal format images and HDF files.

\item
   Tile (mosaic) display of multiple planes of a single image cube.

\item
   Synchronization of multiple images, so operations carried out on
   1 image may automatically be carried out on the others.

\item
   Support for image blanking, with upper and lower threshold
   blanking determined by values in the image or in a second image. 
   Blanking or threshold values adjustable via a parameter or
   slider.

\item
   Multiple-dimension region selection, with regions being either
   single points, rectangular regions, simple geometric shapes,
   polygonal regions, free-hand regions, or boundary selection
   (along an image contour, for example).

\item
   Hard copy output as postscript files with full resolution.

\item
   Support for 24-bit displays, with color values determined from 3
   separate 2D regions, either from 3 planes (e.g., different
   velocities) of 3D images or from 3 separate images.

\item
   Re-binning and re-registration of images, so that multiple images
   may be displayed on a common coordinate system.

\item
   Support for handling very large data sets.  This will include
   easy display of subregions with full resolution and/or subsampled
   images.

\item
   Full support for vector graphics, for plotting line profiles,
   contours, annotations, etc.

\item
   Full support for \aipspp\ image analysis, with tasks being called
   from AipsView and results reported back to AipsView.
\end{itemize}


Three-dimensional (3D) display

3D applications are very CPU and/or graphics processor intensive,
and cannot realistically be supported on the typical low-end
workstations.  Use of 3D visualization techniques in astronomy is
a largely unexplored area, and part of our work will be to discover
what algorithms are useful and how they may best be implemented. 
For these reasons, we plan to develop 3D functions in the OpenGL
and OpenInventor environments on SGI workstations.  This will not
necessarily leave out those without SGI workstations, for OpenGL
and OpenInventor have been licensed by third party companies for
Sun workstations, and by HP, IBM, and Microsoft.  Exactly how 3D
visualization will be supported by \aipspp\ will be an evolving
topic, subject to developments in workstation hardware and software
and astronomer requirements and demands.  The 3D visualization tool
will include the functionality of the 2D tool, plus the items
listed below.


\begin{itemize}
\renewcommand{\labelitemi}{$\circ$}
\item
   Isosurface representation.  The 3D analog of a 2D contour plot,
   an isosurface shows the surface of constant value within a 3D
   volume.

\item
   Block and brick excavation.  These techniques support removal of
   user-specified subvolumes, revealing the data values in the
   neighboring data cells.

\item
   Direct volume rendering.  A variety of techniques determine image
   pixel values by casting rays through the data volume.  We will
   explore both software approaches and interactive, hardware-based
   approaches.

\item
   Volume subregion selection.  In addition to rectangular region
   selection, irregular subregions can be selected using deformable
   containers, such as "rubber sheets".
\end{itemize}

 
\subsection{\aipspp\ Integration}

It was originally planned that there be only a single \aipspp\
visualization development effort, with the display classes
developed for AipsView being used to support infrastructure
visualization needs.  Recently, \aipspp\ project management decided
to separate infrastructure visualization from the high-end
visualization tool described here.  The primary reason for this
decision was to have the crucial infrastructure visualization needs
of \aipspp\ under the control of the infrastructure development group
at Charlottesville, so that problems of distributed development of
code that must be tightly integrated would be avoided.  At the same
time, development of code that need not be tightly integrated with
the infrastructure and which was not being written at
Charlottesville would be freed from the unavoidable overhead and
inefficiency of distributed code development.  This approach
loosens the requirement for full integration of the AipsView tool
with \aipspp\, which has the advantage of allowing greater
flexibility in the development of AipsView.  We expect that this
flexibility will permit the development of a more complete and
powerful tool.


\section{Interface}

The AipsView user interface is designed to be intuitive and to help
astronomers visualize and analyze image data sets, without getting
in the way.  The interface is built with Motif.  As with other
Motif applications, a defaults file can be used to customize the
application for the user.

Perhaps the best way to describe how the AipsView user interface
works is to describe a sample session with the tool.

\begin{center}
\leavevmode
\epsffile{fig1.ps}
\end{center}

\noindent
Figure 1 shows a screen dump of a sample session with AipsView which
illustrates many of the currently implemented functions.

On starting AipsView one gets a DataPanel window with two menu
buttons: File and Options (see upper left window in figure 1).  The
File menu brings up a standard Motif FileSelection  box (not
shown), from which an image file may be selected and loaded.  After
a data set is loaded, the DataPanel window displays basic
information about the data set.  Figure 1 shows that the data file
"OMC.fits" has been loaded, that it has a size of 64 x 64 x 26
pixels, the minimum and maximum ranges of RA, Dec, and Velocity
covered by the data set, and that the minimum and maximum data
values are -4.243 and 26.714.  Sliders allow the user to adjust the
minimum and maximum data values to be displayed; the default
display will be a linear mapping to the display palette of the data
values between the selected data values of interest.  The default
display of an image cube is to automatically display the middle
plane in the z dimension; in this case, the middle velocity image. 
Hence, the Slice along VEL button is shown as having been pushed.  (To
produce a RA vs. Velocity slice, one would push the Slice along DEC
button.)

To the right of the DataPanel window is the Display window.  The
AipsView defaults file has been set up to show an overview of the
image on a 256 x 256 pixel display.  A smaller image (like
OMC.fits, which is 64 x 64) is expanded to 256 x 256 by pixel
replication.  If the image to be displayed is larger than 256 x
256, the displayed image would be subsampled (i.e., every 2nd pixel
of a 512 x 512  image would be displayed).  The Display window has
two menu buttons, Options and Scale.  The Scale button allows changing
the scaling of image pixels to screen pixels, in order to zoom (or
reduce) an image.  The default scaling of the OMC.fits image is
400%.  Setting the scale factor at 100% for OMC.fits would produce
a 64 x 64 pixel display.  If a scale of 500% were selected, only
4/5ths of the image would be shown in the 256 x 256 display window;
the size of the display window may be adjusted by standard window
management (grab the corner with the mouse pointer and drag it to
a different size).  Under the Options menu is the option to bring up a 
ViewPanel window, which is shown at the lower left of figure 1 for OMC.fits.

The ViewPanel window (lower left) gives information about the particular 
view of the image that is shown in the Display window.  The top shows that 
you are looking at a Velocity slice, plane 13 of the total range 0 to 25, 
which corresponds to a velocity of 8.0 km/s.  A different z-plane value may 
be typed in here, or one of the arrow buttons pressed to change the velocity 
channel which is displayed.  The AutoSlice line has three buttons which permit
one to cycle through all velocity channels as a movie; one can run the movie 
forward once, run continuously forward and backward, or run continuously 
forward (jumping back to the beginning at the end).  The next line shows the 
region which has been selected, which by default is the entire region.  By 
pushing the Region button, one activates region selection.  Clicking the mouse 
at a pixel in the Display window, dragging to another pixel, and releasing the 
mouse button defines a new region, which is displayed as a rectangle in the 
display window and as pixel values in the ViewPanel window. (In later releases, 
these pixel values may be sent to an image analysis task to define a region
over which a task is to operate).  The world (RA, Dec) values of the selected 
region are also displayed in the ViewPanel window.  By pushing the Display
Region button, one can get a new Display window showing only the selected
region (this has not been done here).  Below this button is a Value button.
By turning this on (as has been done in figure 1), the pixel coordinates,
world coordinates, and data value are continuously updated as the mouse
pointer roams the Display window.  Finally, by pushing the Profile button (as
has been done in figure 1), one gets a continuously updated plot of the data
value vs.  the 3rd coordinate (in this case, since the display is of a RA-DEC
slice, the profile is a spectral line plot) as the mouse pointer roams the
Display window.

The ColorView window in the lower right of figure 1 is used to carry out a 
very wide range of palette fiddling and editing, including loading saved
palette files and saving created files.  The ColorView task is actually
independent, and may be run separately from the remainder of AipsView.


\section{Design}

This section gives an overview of the major classes that make up the
visualization tools, along with an indication of how they relate to each other.
The major classes are shown in Figure 2.

\begin{center}
\leavevmode
\epsffile{fig2.ps}
\end{center}

\begin{description}
\item[AipsView]
   Maintains information about the data sets brought into the application and
   the various views of those data sets.

\item[DataPanel]
   The user interface panel showing information about each particular data
   set.

\item[ViewPanel]
   The user interface for a particular view of the data (along some axis).
   Supports user interaction with the view to obtain quantitative values,
   define regions, animate through the slices, and obtain profiles.

\item[DisplayWindow]
   The window that shows the data and tracks user activity for interaction
   with the window contents.

\item[2DRepresentation]
   An abstract class of objects that provide two-dimensional ways to show the
   data.  Derived classes reference at least one instance of GriddedData.

\item[CLUImage]
   A color-lookup table raster image.  In conjunction with classes to do
   two-dimensional drawing (such as Raster), CLUImage converts a
   two-dimensional slice of a GriddedData object to a raster image that can be
   drawn on the screen.

\item[Contour]
   A contour plot.  In conjunction with classes to do two-dimensional drawing
   (such as Polyline), this class contours a two-dimensional slice of a
   GriddedData object and draws the contours on the screen.

\item[2DGraphics]
   An abstract class of objects that support drawing 2D graphics primitives.

\item[Raster]
   Derived from 2DGraphics, a class for displaying raster images in Xlib.

\item[Polyline]
   Derived from 2DGraphics, a class for displaying lines using Xlib.

\item[GriddedData]
   The data structure containing a data set.  Includes an instance of Array
   (stores the data) and Grid (stores information on the topology, physical
   coordinates, units, dimension labels, etc.)  of the data, and a Reader.

\item[Reader]
   An abstract class that provides a source of data.  Derived classes deal
   with the specifics of file formats, and include FitsFileReader and
   HDFReader.
\end{description}

Additional classes have been developed to ease application development.  For
example, UserComp is an abstract class for Motif interface components that can
be used as top level windows or embedded within other windows.  The App class,
also derived from UserComp, adds support for making menus, allocating colors,
and establishing a connection to the X server.

\end{document}
