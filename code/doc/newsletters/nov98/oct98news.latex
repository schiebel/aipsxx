\documentclass{article}
\usepackage{epsfig}

\begin{document}

\begin{center}{\sf AIPS++} is a project of the
{\sf AIPS++}Consortium
\end{center}

\begin{figure}[h]
\epsfig{figure=octmast.ps,height=1in,width=6in}
\end{figure}
 
{\Large \bf November  1998}
 

{\bf In this issue:}
\begin{itemize}
\item {\sf AIPS++} Display Library
\item Third Beta Release
\item {\em Getting Started in {\sf AIPS++}} Documentation
\item Project Summary
\item {\sf AIPS++} Table System
\item Synthesis I
\item What's New in {\sf AIPS++}
\end{itemize}
 
 
\medskip




\section*{The {\sf AIPS++} Display Library - Part 1}
{\it David Barnes - ATNF, Epping}\\  

The {\sf AIPS++} Display Library was introduced 
in the March 1998 {\sf AIPS++} Newsletter.  Since then, a substantial 
amount of design and implementation
work has been devoted to the Display Library. The purpose of the
Display Library is twofold:

\begin{itemize}
\item to provide a {\bf C++} library of high-level classes for the display of
astronomical datasets, with which {\bf C++} programmers can build stand-alone
visualization applications, and\\


\item to provide an {\em interface} to this library, which brings the 
bulk of the functionality of the {\bf C++} library to the 
{\em Glish} command line, and with which {\em Glish} 
programmers can build visualization applications
that are wholly integrated into the 
{\sf AIPS++} data reduction and 
analysis environment.
\end{itemize}

The purpose of this article is to outline the current status and future
design for the {\em Glish} interface to the 
{\sf AIPS++} Display Library.
A future article will explore the {\bf C++} interface to the Display Library.


The {\em Glish} interface to the Display Library is in its infancy:
since April, development has been in full swing and has culminated in a
"first generation" {\em Glish} widget which is capable of displaying 
different views of multi-dimensional 
{\sf AIPS++} Images and in-core 
{\em Glish} arrays.  Mouse controlled zooming and 
{\em Glish} controlled animation
have been demonstrated, together with the capability to use various built-in
and user-defined colormaps.  Presently, the {\em Glish} interface
to the Display Library is undergoing a proper design and specification,
and the resultant "second generation" widget should be available, with
substantial functionality, in the 
{\sf AIPS++} system in or shortly after
November 1998. Briefly, the implementation of the interface as a
dynamically loadable {\em Glish} widget means that Display Library 
canvases can be embedded directly in graphical user interfaces developed in 
{\em Glish} code, and are programmable in the normal 
{\em Glish} event-oriented fashion.
As development moves into the applications stage, general and specific
{\em Glish} wrapper scripts will be generated which can be used 
to hide the direct widget interface from the user.  In this article, code
fragments are given which can be used to generate an interactive 
"cgdisp"-like panelled view of a multi-dimensional dataset, as shown in 
the figure above.

\begin{figure}
\epsfig{file=dl-jk.ps,width=5in}[H]  
\end{figure}     

This script commences by building a frame containing one pixelcanvas
widget and two {\bf PGPLOT} widgets:

\begin{verbatim}
     f := frame(side='left');
     pc := pixelcanvas(f, [width=400, height=340, background='gray20']);
     fr := frame(f, side='top');
     pg_hist := pgplot(fr, width=180, height=170);
     pg_shap := pgplot(fr, width=180, height=170);
\end{verbatim}


A canvas for drawing astronomical data can be added to the pixelcanvas
widget as follows:

\begin{verbatim}
     wc[1] := worldcanvas(pc,0.2,0.2,0.5,0.5);
\end{verbatim}


where the first parameter indicates that the worldcanvas is to be added
to the existing pixelcanvas {\tt p}, and the remaining four parameters
comprise the (fractional) bottom left and top right corners of the canvas
on the visual widget.  Multiple canvases can be added to a single
widget; it is left as an exercise for the reader to write code to set up
the panels as shown above.  Let us assume then that  the
twelve panels in the figure above are stored in the array {\tt wc[1:12]}.

The next task is to create what is known as a "DisplayData" object,
which will be a {\em Glish} handle (technically a {\it proxy}) 
to an instance of a {\bf C++} class within the 
{\sf AIPS++} Display Library.
We take an R.A./Dec/Frequency 
{\sf AIPS++} Image, {\tt /data/testdata.im},
and construct a DisplayData which will draw raster images of the Frequency
planes of the dataset. 

\begin{verbatim}
     mydd := displaydata('raster', '/data/testdata.im');
\end{verbatim}

and add this data to the 12 panels:

\begin{verbatim}
      for (i in 1:12) {
          wc[i]->add(mydd);
      }
\end{verbatim}

At this point, the default colormap, {\tt heat}, has  been used,
and there are 12 identical slices of the Image displayed on the screen.
You can modify each canvas so that it displays a different plane of the
dataset, and use a different colormap, e.g., {\tt smooth}, using the
following code:

\begin{verbatim}
      for (i in 1:12) {
          wc[i]->options([element=i]);
      }
\end{verbatim}

\begin{verbatim}
     mycm := colormap('smooth');
     mydd->setcolormap(mycm);
\end{verbatim}

You can now make use of the 
{\sf AIPS++} Images module to calculate 
a histogram of the pixel data values in the Image, and then display 
this histogram to using the first of our {\bf PGPLOT} widgets. At 
the same time,
you "bind" to left and right mouse button click events on the {\bf PGPLOT} widget
to set, respectively, the minimum and maximum data values for display:

\begin{verbatim}
     include 'image.g';
     im := image('/data/testdata.im');
     abslimit := 0.5;
     im.histograms(histout=myhist, nbins=30, includepix=abslimit,
                   async=F);
     myhist.counts := log(myhist.counts + 1);
     t := pg_hist->env(-abslimit, abslimit, 0,
                   as_integer(max(myhist.counts) + 1), 0, 0);
     t := pg_hist->lab('Value', 'Counts',
                   'Histogram - left &amp; right click');
     t := pg_hist->bin(myhist.values, myhist.counts, T);
     t := pg_hist->bind('&lt;Button-1>', 'left');
     whenever pg_hist->left do {
                   left := $value.world[1];
                   mydd->options([datarange=[left,right]]);
     }
     t := pg_hist->bind('&lt;Button-3>', 'right');
     whenever pg_hist->right do {
                   right := $value.world[1];
                   mydd->options([datarange=[left,right]]);
     }
\end{verbatim}

\begin{verbatim}
     # set the initial data range:
     left := -0.02;
     right := 0.02;
     mydd->options([datarange=[left,right]]);
\end{verbatim}

Likewise, you can use the second PGPLOT  widget to control the shaping of
the colormap itself, as opposed to the mapping of the data values onto
the colormap.  Using {\tt pg\_shap}, arrange to bind to left
mouse button click and drag events, and calculate new parameters for a
linear colormap ramp function:

\begin{verbatim}
     function shape_colormap(world) {
          world[2] := tan((world[2] - 0.5) * pi);
          if (world[2] == 0) {
              world[1] := 0.5;
     } else {
          world[1] := world[1] + (world[1] - 0.5) / world[2];
     }
     mycm->options([shapecoeffs=world]);
     }
\end{verbatim}

This concludes the example.  Very little code remains for the user
to generate in order to reach the working example shown in the figure.
I hope this article has demonstrated the relative ease with which users
and programmers alike are able to rapidly generate simple or sophisticated
visualization applications using only {\em Glish} scripts.


Present and near future work on the Display Library will be concentrating
on the full specification of the visual widget, and its helper agents
- canvas, colormap and lattice.  Major tasks prior to the widget being
made available in the 
{\sf AIPS++} distribution include implementation
of these specifications, together with extensions to the Display Library
infrastructure to support contour and vector field drawing, multiple dataset
overlays, axis labelling, and ImageRegion display.



\section*{Summary of the Third Beta Release of {\sf AIPS++}}
{\it Tim Cornwell - NRAO, Socorro}\\

For newcomers, this is an overview of the contents of the third beta 
release of {\sf AIPS++}. 
Included in this release are:

\begin{itemize}
\item A powerful command 
line interpreter called {\em Glish}, the heart of {\sf AIPS++}, which has both a tutorial and reference manual.

\item Objects allowing  users to 
to do things such as start, control, and stop objects is via the Object 
Catalog ({\tt objectcatalog}), 
whereas files are handled by the File Catalog ({\tt catalog}).

\item Tables are how all {\sf AIPS++} data are 
stored and made accessible from inside {\em Glish} via the 
Table {\tt object}.

\item Graphical User Interfaces (GUIs) for most user-visible objects, apart 
from the {\em Glish} command line interface.  These 
represent a large investment of effort in direct response to our earlier 
beta releases where we learned that users needed simpler interfaces.

\item Synthesis imaging capabilities are found in the two {\tt objects} 
 Imager and  Calibrater, the principal objects for 
imaging and calibration. Imager, in particular, has many features 
not found in other packages, such as multi-field processing in user-selected 
coordinate systems. We expect Calibrater to evolve similarly over 
the next few months.

\item The Measures System is, to our knowledge, unparalleled in 
the types  of 
operations it allows on measured quantities with units and  coordinate 
systems. The functionality is available via both the {\em Glish} 
command line (the Measures {\tt object}), and a customized graphical 
user interface.

\item The single dish environment {\tt dish} is a carefully designed  
interactive tool for processing of single dish data, most particularly 
spectra but other one-dimensional data formats are supported.

\item A very capable plotting tool, Pgplotter, based on the 
{\bf PGPLOT} subroutine library, is available and is used by many other 
tools. For example, an interactive  visibility plotting tool, 
visplot, has been built on top of Pgplotter.  

\item Numerous general purpose utilities for handling 
{\sf AIPS++} data are present. For example, 
the tablebrowser (available as a function {\bf browse} of the 
{\tt table} object) can edit, plot, query and select data, and can 
be configured in many ways to display data as the user desires.

\item To demonstrate the possibilities of stream-lined processing in 
{\sf AIPS++}, we have provided the 
{\bf simpleimage} {\tt object}. This walks the user through straightforward 
imaging of synthesis data, first making a tapered image at low resolution 
and then imaging a user-specified region at full resolution. The user has 
only to select the data to be imaged, and to delimit the full-resolution 
region. This is an example of the type of packaging that we plan to 
incorporate in the future.

\item Introductory documentation has been written by early testers of 
{\sf AIPS++}, and terminology established 
for subsequent use throughout the project.

\item Extensive reference documentation is available for all user-visible 
objects.

\item The system has powerful programmability at the {\em Glish} level.
\end{itemize}


Not (yet) included in this beta release are:

\begin{itemize}
\item Filling of VLA or VLBA data apart from via UVFITS. Fillers for  other 
telescopes and formats (i.e., {\bf ATNF, BIMA, WSRT, UVFITS}) are present. 
Currently we expect you to apply 
{\sf AIPS++} to data that has been initially 
calibrated elsewhere.

\item Efficient processing of large synthesis continuum images 
(e.g., {\em millions of pixels}) or many channel 
(e.g., {\em more than 64}) spectral images. Current processing 
is optimized towards spectral-line observations of moderate numbers of 
channels.

\item Sophisticated cross-calibration capabilities.

\item Interactive flagging of visibility data.

\item A robust way to archive the MeasurementSets to FITS. The best is 
to use UVFITS for synthesis data ({\tt ms.tofits}) and  {\tt ms2sdfits} for single dish data.

\item We do not expect people to program at the {\bf C++} level using the 
beta release. 
\end{itemize}



\section*{{\em Getting Started in {\sf AIPS++}} Documentation}
{\it K.R. Anantharamaiah - Raman Research Institute, Bangalore and NRAO, Socorro}

A new version of the document {\em Getting Started in
{\sf AIPS++}}, intended for newcomers to {\sf AIPS++}, has been
released and can be found in the AIPS++ documentation
system. This document provides an introduction to
{\sf AIPS++}, practical information about how to start
{\sf AIPS++} on your workstation, and how to use {\sf AIPS++} for
data processing applications. The reader is taken
through a series of simple steps consisting of:

\begin{itemize}
\item starting {\sf AIPS++} and useful initial steps;
\item creating a simple script;
\item generating a test uv-data set;
\item making an image from the test data;
\item examining the uv-data set and the image;
\item creating a simple plot;
\item creating an {\sf AIPS++} object using some Object
functions;
\item using the {\em Glish} command line and using GUIs; and
\item doing some simple computations using {\em Glish}
commands.
\end{itemize}
                
The document also introduces the reader to both some
basic concepts and the structure of {\sf AIPS++}, which
are slightly different from other data processing
packages. It is the first document that should be used by
astronomers trying the new beta release.

Getting Started in {\sf AIPS++} is written in a
semi-tutorial style and thus, for maximum benefit, should be read
during a "live" session with {\sf AIPS++}. At the end of
such a session, the reader is likely to have gained some
feeling for how {\sf AIPS++} works and be ready for more
advanced use of the package.




\section*{Project Summary}
{\it Tim Cornwell - NRAO, Socorro}\\

The {\sf AIPS++} Third Beta was released on 
October 15, 1998. This is the culmination of a year long period of 
development, for the most part along lines we had anticipated in our 
planning, and also partly in response to comments from testers of our 
previous beta releases. This release sees substantial improvements in all 
areas, most importantly in interfaces and in functionality. Details of the 
contents of the release are given in the above  newsletter article in 
this issue. Our beta testers are volunteers from both inside and outside 
the project. If you would like to participate in the beta test program, 
please contact Tim Cornwell at tcornwel@nrao.edu.



After this beta release, we will switch to a new approach to release. 
Instead of a fully-fledged beta release, we will instead issue binaries 
for the latest stable build. This shift reflects the stabilization of the 
{\sf AIPS++} infrastructure as well as an 
increased emphasis on applications development and attracting new users. 
We hope to be able to make stable releases at a rate of about one per month 
to 6 weeks. Our expectation is that this will  enable beta-testers to use 
the system more consistently, as both new features and bug fixes will be 
made available more expeditiously.  All of the testing and continuing 
development is aimed at a public release of 
{\sf AIPS++} by March 15, 1999.


We're pleased to have selected a logo for the Project: see the top of this newsletter. You will start seeing this logo throughout our documentation.



Finally, we plan demonstrations at the ADASS meeting in Champaign-Urbana, 
early November, and at the AAS meeting in Austin in January. 
If you are attending either one of these conferences, please come 
on by and see us.


\section*{The {\sf AIPS++} Table System}
{\it Ger van Diepen - NFRA, Dwingeloo}\\

In the beginning of the {\sf AIPS++} project 
it was decided that all persistent data should be stored in a common form 
since it would make it possible to have a uniform interface to all data and 
to develop common tools to handle data. Allen Farris (from StSci) developed 
some of the initial ideas about a table system; it was based on relational 
database concepts, but extended those concepts in various ways. Most of 
Allen's ideas were used and implemented as the 
{\sf AIPS++} Table System. 

Some examples of tables now being used in the 
{\sf AIPS++} system are: 

\begin{itemize}
\item The measurement set is a table with a collection of sub-tables; 
\item An image is a table; and 
\item The log messages are saved in a table. 
\end{itemize}

Furthermore the Westerbork Telescope Management System (http://www.nfra.nl/tms) has adopted the {\sf AIPS++} 
Table System as the means to store data. This article will only give an 
introduction to the table system. It is beyond its scope to explain the 
possibilities of the Table System in all its detail. However, in the next 
issue(s) of the Newsletter, some examples will be given how to use it from 
{\bf C++} or {\em Glish}. This article contains several links to 
{\sf AIPS++} documentation explaining things 
in more detail. 

\subsection*{Structure of a Table}

An {\sf AIPS++} table has the following 
structure: 

\begin{enumerate}

\item A set of so-called table keywords contains global information about 
the data. They can be compared to the {\bf FITS} headers, but are not 
limited to {\bf ASCII} scalar values. 

\item A set of columns and rows contains the actual data. They can be 
compared with the {\bf FITS} binary tables, but offer more flexibility. 

\item Each column has its own set of so-called column keywords containing 
information about the column (e.g. unit). Column keywords are used by the 
{\sf TableMeasures}
module to handle measures in tables. A keyword set is a 
TableRecord {\tt object}. It is a heterogeneous collection of names 
and values. 
Each value can be a scalar or N-dimensional array of one of the basic data 
types ({\tt char, bool, short, int, float, double, complex, double complex, 
and string}). The value can also be a  TableRecord in itself 
making it possible to define hierarchical keyword sets. Finally a value 
can be a reference to another table making it possible to have a hierarchy 
of tables. The latter is, for instance, used heavily in the Measurement 
Sets. 


\item Columns have the following characteristics: They can contain scalar 
or array values. An array can be of any shape and dimensionality. 
It is possible to force all cells in a column to have the same shape or 
dimensionality. All basic keyword data types can be used for a column. 
Before the end of 1998 it will also be possible to use a 
 TableRecord as the data type of a column to make it possible to 
store heterogeneous data in a column. 
\end{enumerate}

\subsection*{Storing a Table}

The Table System makes a clear distinction between the logical and physical 
layout of the data. The logical layout is defined by creating a table 
description. The physical layout can be defined at table creation time by 
binding columns to so-called storage managers. The storage managers control 
how the data are stored. By choosing the correct storage manager, you can 
optimize in access performance and/or disk space. The following storage 
managers are available: 

\begin{enumerate}

\item The simple storage manager StManAipsIO. It writes each column 
as a series of values into the disk file. Currently this storage manager is 
memory based, but it is planned to make it truly disk based. 

\item The disk space saving storage manager IncrementalStMan. 
It only writes a cell in a column when its value is different from the 
value in the previous cell. It can save quite some disk space when the 
values in a column are constant or vary slowly. 

\item The array based storage manager TiledStMan. This storage 
manager is optimized to store large arrays which must be accessed 
efficiently along various axes. It is, for instance, used to store images 
to make access in RA, DEC, and frequency almost equally fast. 
It is also used to store the data in a Measurement Set. 

\end{enumerate}

Apart from binding to a storage manager, a column can also be bound to 
a so-called virtual column engine. Such an engine makes it possible to 
calculate the data on-the-fly. An example of it is to store a float column 
as 2-byte integers by scaling the values. 

\subsection*{Other functionality provided for Tables}

It is possible to share a table amongst multiple processes. The system 
maintains a read or write lock on the table to synchronize access to the 
table when multiple readers and writers are active at the same time. 
Currently synchronization is fully supported for {\tt get} and 
{\tt put} operations, but not yet supported for cases where 
the structure of the table is changed by adding or removing a column. 
That kind of synchronization will be added soon. 

A table can be sorted on any combination of scalar columns. 
It is also possible to select a 
subset from a table using an SQL-like selection mechanism. 
Sorting and selection result in a so-called reference table. 
This reference 
table contains the row indices of the original table and
can be handled as any other table.  The user will not notice any 
difference compared to a 'normal' table. 


A special kind of sorting/selection is offered by the table 
{\bf iterator} making it possible to iterate through a table based 
on the contents of one or more scalar columns. Each step in the iteration 
gives a reference table containing the rows with the values in the 
iteration's columns. 

\subsection*{How to use the Table System}

Tables can be created and accessed at the 
{\bf C++} and 
{\em Glish}
level. The {\bf C++} interface offers most flexibility, but 
the functionality offered in {\em Glish} is quite extensive. 
The selection/sort interface is called Table Query Languange (TaQL). It is described in {\sf AIPS++}  note 199.


\section*{Synthesis I: The Measurement Equation in {\sf AIPS++}}
{\it Athol Kemball - NRAO, Socorro}\\

This article is the first in a series to consider issues of relevance to 
aperture synthesis processing within 
{\sf AIPS++}, and is concerned with the 
overall role of the Measurement Equation in 
{\sf AIPS++}.

All data reduction packages for radio-interferometric instruments 
implicitly adopt a mathematical model for the instrumental effects that 
are to be removed in the course of data reduction. In essence, they are 
algebraic relations describing how the stored calibration information 
is to be applied to the uncorrected uv-data to derive calibrated uv-data 
suitable for imaging or further analysis. The adopted calibration relations 
serves a secondary purpose also, namely in providing an assumed model for 
the propagation of instrumental errors affecting the observed data. 
In this sense, it is also reflecting the implicit assumptions being made 
regarding the physics of the observing process or instrument. This model 
is used directly, or implicitly, by the solvers that determine the 
calibration quantities from the observed data.


In practice, data reduction systems adopt calibration models that are 
sufficient for the instrumental systems under consideration. Instrumental 
effects are aggregated or approximated where possible, and effects below 
a certain threshold of significance may not be modeled. In addition to 
deciding which instrumental effects are to be included (e.g., instrumental 
polarization), a parametrization of each effect also needs to be adopted. 
This includes the coordinate dependence of the effect, such as time and 
frequency, and the model parameters characterizing the instrumental 
correction itself. 


Important tradeoffs are involved in deciding the complexity of the 
calibration model to be adopted, both in terms of which effects to 
include, and their parameterization. Increasing generality allows a 
broader range of instruments to be covered, and allows greater flexibility 
in exploring more complete calibration models as any individual instrument 
evolves in sensitivity and flexibility. As an example, the VLA is operating 
at lower frequencies than previously supported, including 74 MHz. 
This introduces new calibration requirements beyond those required at 
centimeter wavelengths. Overly complex calibration models are, however, 
difficult to support in software, both in correcting data and as used by 
the calibration solvers. In addition, they are difficult for the end-user 
to understand, and so increase the difficulty of using the software.


{\sf AIPS++} requires a calibration formalism 
that is sufficient to support data reduction for a generic interferometer 
or single-dish. The framework for such a model has been laid in a series 
of papers by Hamaker, Bregman and Sault (Hamaker, Bregman and Sault 1996; 
Sault, Hamaker and Bregman 1996; Hamaker and Bregman 1996; and 
Hamaker 1998). This model provides a mathematical formalism for describing 
radio-interferometric polarimetry that offers several advantages over 
previous considerations of the problem. The formalism traces the signal 
path for each antenna and represents the instrumental effects as complex 
(2x2) Jones matrices. The Jones matrices have independent representation 
in an arbitrarily polarized basis (e.g. linear or circular), and can 
similarly have multiple parametrizations. The impact of the instrumental 
Jones matrices on the interferometer output for a given baseline is 
represented by the outer product of the individual Jones matrices to 
produce a (4x4) correction matrix. The Jones matrices act on 4-dimensional 
coherency vectors representing the polarization properties of each signal. 
A detailed description of each calibration component will be provided in 
the next article in this series, including the mathematical details 
involved. This formalism does not necessarily represent new physics, but 
does provide a general formulation that is independent of specific 
representations. This is a powerful advantage.


The Hamaker, Bregman, Sault formalism, as adopted by 
{\sf AIPS++}, is referred to as the 
 Measurement Equation. Central features of this approach include 
the use of Jones matrices to model instrumental effects, support for 
arbitrary Jones matrix parameterizations and a sufficiently general 
model to cover a generic interferometer. This instrumental model is used 
applying calibration corrections and by basic calibration solvers. 
The model includes both uv-plane and image-plane effects. This powerful 
generality has been carefully balanced against implementation questions 
raised in the discussion above. The objective in using this system is not 
and end in itself, but rather to provide a robust framework for implementing 
a powerful, and general, formalism sufficient for the 
{\sf AIPS++} project's objectives. 
Our experience in using this model in practice has borne out this 
expectation, and it has proved to be a practical solution to the question 
of how to support calibration of diverse radio-interferometers, 
with adequate room for growth in both the specialization of the calibration 
effects considered and their representation. This formalism allows new 
science to be explored, both through the inclusion of new calibration 
effects and parametrizations, but also the calibration of arrays with 
mixed instrumental effects such as different polarization types. 
The formalism can also be used for deriving and applying calibration 
to single-dish telescopes, and work in this area is underway.


The next article will consider the details of how the Measurement 
Equation is used in 
{\sf AIPS++}, and the identification of the 
individual Jones matrices with commonly understood calibration effects.

{\bf References}

Hamaker, J.P., Bregman, J.D., and Sault, R.J., 1996, {\it AAS}, {\bf 117}, 137.

Sault, R.J., Hamaker, J.P., and Bregman, J.D., 1996, {\it AAS}, {\bf 117}, 149.

Hamaker, J.P., and Bregman, J.D., 1996, {\it AAS}, {\it 117}, 161.

Hamaker, J.P., 1998, {\it AAS}, in press.


\section*{What's New}
{\it Athol Kemball and Tim Cornwell - NRAO, Socorro}\\

\begin{itemize}

\item The {\sf AIPS++} Web page layout and 
content has been revised to incorporate user comments and new features. 
These include changes to list {\em Glish} information on a separate 
page, a new page for vacant positions and substantial revisions to the 
{\em Getting Started} page, including new recipes and documentation. 
In addition, the personnel page has been updated to reflect current 
information.

\item The single-dish analysis package 
{\em dish} has been significantly 
revised in this period. Changes include a major revision of the 
averager to support multiple Stokes, and more general 
treatment of the x-axis velocity coordinates. Multiple Stokes support is 
also available for baseline-fitting, smoothing and re-gridding. 
Selection is now a true operation, and the action button has been 
renamed as {\sf Apply} throughout for uniformity. Infrastructure 
changes include improvements to printing capabilities and the use of 
Measures in Doppler conversion calculations.

\item Work has proceeded on the GBT utilities in support of GBT commissioning. 
A utility has been provided to read initial data from the GBT spectrometer 
into 
{\sf AIPS++}. Other changes include revisions 
relevant to RFI issues, and the application of 
 Tcal values properly to spectral processor data. 
The script {\it gbt.g} has been added as an interface to the 
commissioning tools.

\item A utility has been added to convert Parkes Measurement Sets 
(in multi-beam format) into {\sf AIPS++} 
images.

\item The initial implementation of the algorithm/applicator framework 
for parallelization has been checked-in, including the transport layer, 
which handles parallel communications transport mechanisms (e.g., MPI). 
A implementation of a parallel Clark CLEAN using this methodology has also 
been added to the system.

\item There have been various revisions to the WSRT data display tools, 
including a new script,  {\it msbrick.g}, allowing tiled access to uv-data.

\item The Measures system has been revised to include full support for
 MBaseline, Muvw, and MEarthMagnetic classes in 
the Measure  holder system, and parameter implementations. 
Further changes related to the split of Quanta from Measures 
have also been made, and the Measures test programs have been 
updated. In addition, code to support foreign  parameters has been added.

\item  system for translating the VLA calibrator list into an 
{\sf AIPS++} table has been added.

\item The data display utility, {\tt visplot.g}, has been revised to 
incorporate new features or bug fixes suggested by users. 
These include support for {\tt u} vs <{\tt v} in generic plots, 
more information in the pop-up windows, and improved help information 
and display of {\tt z}-axis values.

\item The catalog script,  {\tt catalog.g}, has been similarly revised 
to incorporate user feedback. Changes include the ability to view text 
files, create files, the addition of an edit button and removal of the 
import function.

\item The Sky module has been renamed to 
Imager, and the cal module to 
Calibrater, in order to improve understanding of their 
purpose and to remove a naming conflict with the UNIX calendar 
utility "cal".


\item The utilities {\it polyfitter.g} and 
{\it sinusiodfitter.g} have been split off from 
{\it numerics.g}. In addition, 
{\it lsfit.g} and {\it matrix.g} have been added to 
{\it mathematics.g}.

\item An updated BIMA filler has been checked-in, including a GUI and a 
script to launch it from {\em Glish}.

\item The {\bf RPFITS} code has been revised to support the new 
conventions for Y2000 date formats.

\item A new {\em Glish} function {\tt as\_evalstr()}  has been 
added to convert values into a string that can be used with 
{\tt eval()}.

\item New terminology has been adopted for object-oriented concepts in the
user documentation. This will be used as widely as possible in the future, 
and includes the use of terms object, function  for {\tt method}, 
and {\tt global function}. 

\item There is now added support for the Hierarchical Data System (HDS) data 
format, including {\bf C++} wrappers for the HDS library routines.

\item A variety of minor changes have been made to support syntax requirements of the {\bf egcs} ({\bf C++}) compiler.

\item New {\sf AIPS++} notes include a revised 
{\em System plan} (220), and {\em How to make an 
{\sf AIPS++} release} (221)

\item Capabilities supporting  region selection from images are now available 
using the region manager ({\it regionmanager.g}), and associated GUI.

\item The synthesis script {\it simpleimage.g} has been revised to 
allow 
selection by field, the display of the underlying {\em Glish} being 
used, and to correct a bug in setting the phase center.

\item An initial implementation of wide-field imaging has been added to
 the synthesis module, {\it imager.g}. This will become available 
as a system suitable for users in subsequent releases. 

\item A new {\sf AIPS++} logo has been adopted 
for general use within the project, shown above.\\
\end{itemize}

\begin{figure}
\epsfig{file=logo1023.ps,width=4in}
\end{figure}

\end{document}



