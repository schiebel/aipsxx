                     
\documentclass{article}
\usepackage{html}
\pagestyle{empty}

\externallabels{../../../user/Utility}{../../../user/Utility/labels.pl}
\externallabels{../../../user/General}{../../../user/General/labels.pl}
\externallabels{../../../user/Display}{../../../user/Display/labels.pl}
\externallabels{../../../user/Dish}{../../../user/Dish/labels.pl}
\externallabels{../../../user/SynthesisRef}{../../../user/SynthesisRef/labels.pl}
\externallabels{../../../user/ATNF}{../../../user/ATNF/labels.pl}
\externallabels{../../../user/NFRA}{../../../user/NFRA/labels.pl}
\externallabels{../../../user/NRAO}{../../../user/NRAO/labels.pl}

\externallabels{../../../reference/Glish}{../../../reference/Glish/labels.pl}
\begin{document}
\begin{rawhtml}



<html>
<head>
<title>AIPS++ Newsletter - June 1998</title>
</head>
</title>
<body background="../juneback.gif"  text="#000000" link="#0088c66" 
vlink="#00009c">


<table cellpadding=6 cellspacing=8  border=0 width="100%">



<tr><td colspan=2><img src="../themast.gif" border=0><BR>
*Please note Middle European Time (MET) is -2:00 GMT</td></tr>
<tr><td  colspan=2 align=right><font size="3" 
face=helvetica color="d95b0f"><b>June 1998</b></font>
</tr></td>

<tr><td valign=top>

<a href="#parallelization">
<font  color="#0008c66" size="3"><b>
Parallelization<br>Project</a><p>


<a href="#summary"><font color="#008c66">
Project News<br>Summary</a></font><p>

<a href="#measures"><font color="#008c66">
Measures <br>- Part 2</a><p>

<a href="#newsletter"><font color="#008c66">
Newsletter<br> Mailing List</a><p>

<a href="#glish"><font color="#008c66">
The Story of <br><i>Glish</i> - Part 3</a><p>

<a href="#recipes"><font color="#008c66">
Recipes</a><p>


<a href="#new"><font color="#008c66">
What's New<br>in <font face=helvetica>AIPS++</font></a><p>

<p>

<td valign=top>
<center><font face=helvetica><b>AIPS++ is a project of the
<a href="http://aips2.nrao.edu/aips++/docs/project/consortium.html">
AIPS++  Consortium</a></b></font></center><p>
<p><br><p>




<a name="parallelization"><FONT FACE=helvetica  SIZE="+3"><b>
Status of the AIPS++ Parallelization Project</b></font><br>
<I>Doug Roberts</I> - NCSA, Champaign</FONT></a><p>

The <font face=helvetica>AIPS++</font> parallelization 
group consisting of Dan Briggs, Doug Roberts, and Wes Young, overseen by 
Brian Glendenning,  has been working on several components of parallelization. 
The effort to implement parts of <font face=helvetica>AIPS++</font> 
on multiple processor machines  had its first demonstration of a 
parallel application at the 
<A HREF="http://alliance.ncsa.uiuc.edu/alliance98/">Alliance'98</A> 
conference in Champaign, Illinois, on April 27-30.<p> 


A poster with initial results and a future time-line was presented by 
Doug Roberts at the Alliance'98 meeting.  The poster describes 
initial speed-up results on the SGI Origin2000 from a test parallel 
deconvolution (Clark <tt>CLEAN</tt>) on a 
VLA spectral-line data set. 
Parallelism in the <tt>CLEAN</tt> application was implemented 
using the Message Passing Interface (MPI). MPI is a portable system that 
allows data and instructions to be sent to remote processors (either on 
the same machine or on different machines). MPI is available on many 
different architectures ranging from a small network of workstations to 
large, massively-parallel machines. Because the MPI implementation of 
parallelism is portable, the same optimizations that are made for the 
large SGI Origin are useful on the relatively smaller machines of a typical 
astronomy group.  The bottom line for the 
speed-up results is that the deconvolution of a large data set (127-channel 
HI absorption) scales well up to 32-processors (a speed-up of 22 on 32 
processors - 70% of ideal).  An on-line version of the poster 
is available at  <A HREF="http://pacont.ncsa.uiuc.edu/A98/poster/roberts/">
http://pacont.ncsa.uiuc.edu/A98/poster/roberts/</A>.<P>


In the short term (Summer 1998), our group 
is going to implement a parallel algorithm applicator class, using the MPI 
parallel <tt>CLEAN</tt> as a prototype. New 
classes derived from this parallel base class will carry out parallelization 
with a minimal effort from application programmers. This will address most 
"embarrassingly" parallel problems, notably spectral line processing. We are 
also investigating tuned libraries (starting with FFT's), notably the SGI/Cray 
Scientific Library (<tt>SCSL</tt>).<P>

Our longer-term goals (Fall 1998) include parallelizing the 
<tt>sky </tt>application to carry out 
"embarrassingly" parallel deconvolution, and to do parallelized gridding 
and parallel FFT's. Also, we will be parallelizing a wide-field imaging 
algorithm (where the assumption that the sky can be represented at a single 
tangent plane breaks down). Finally, we will be increasing the user support 
to help astronomers, who need the large computational resources of NCSA using 
the parallel <font face=helvetica>AIPS++</font> system on the Origin2000. 
This user support includes 
increasing the network bandwidth from the VLA to NCSA by putting NCSA on the 
NRAO intranet. By June, we should have installed a DLT tape drive on an NCSA 
machine, to which we have access. This DLT tape can be used to transfer larger 
data sets than can be stored on a single exabyte.<P>

The Alliance '98 conference was attended by Dan Briggs, Dick Crutcher, 
Brian Glendenning, and Doug Roberts of the <font face=helvetica>AIPS++ 
</font> group, and Ruth Milner of NRAO.  
  During the conference there were many discussions between the 
<font face=helvetica>AIPS++</font> parallel 
group and other Alliance teams. Potential collaborations include a port of 
<font face=helvetica>AIPS++</font> to Windows NT. 
NCSA has a new, large NT cluster that shows good speed-up 
using MPI on some software applications. A port of <font face=helvetica>AIPS++ 
</font> to NT would facilitate 
testing of <font face=helvetica>AIPS++</font> on this NT cluster. 
This would be an important comparison of 
the high cost-performance of the NT cluster relative to the expensive, 
integrated 
distributed-shared memory architecture of the SGI Origin2000 system. 
 Another connection made at the meeting was with the Parallel I/O 
group, 
headed by Dan Reed (UIUC CS 
department chair). This group has software that can be used to evaluate our code 
to identify I/O patterns and statistics. This would be important to show where 
performance due to increased I/O would be possible. The next generation of the 
MPI standard (MPI-2) includes a standard for MPI I/O. The MPI I/O standard is 
finalized and implementations are available. We intend to explore its use as a 
complement to the parallel processing development. NRAO will be hiring a 
programmer to work with Dan Reed's group to instrument the <font face=helvetica>
AIPS++</font>  I/O libraries  and investigate parallel I/O within 
<font face=helvetica>AIPS++</font>.</td></tr>




<tr><td valign=top>

<a href="#parallelization">
<font color="#008c66" size="3"><b>
Parallelization<br>Project</a><p>

<a href="#summary"><font color="#008c66">
Project News<br>Summary</a></font><p>


<a href="#measures"><font color="#008c66">
Measures <br>- Part 2</a><p>

<a href="#newsletter"><font color="#008c66">
Newsletter<br> Mailing List</a><p>

<a href="#glish"><font color="#008c66">
The Story of <br><i>Glish</i> - Part 3</a><p>

<a href="#recipes"><font color="#008c66">
Recipes</a><p>


<a href="#new"><font color="#008c66">
What's New<br>in <font face=helvetica>AIPS++</font></a><p>

<td valign=top>

<a name="summary">
<FONT FACE=helvetica size="+3"><b>Project News Summary</b></font><br>
<i>Tim Cornwell</i> - NRAO, Socorro</a><p>

<P>
Brian Glendenning is leaving the <font face=helvetica>AIPS++</font> 
Project to join the NRAO Millimeter Array project as head of computing. 
This is sad news for <font face=helvetica>AIPS++</font> but an excellent 
opportunity for Brian. He has been a member of the 
<font face=helvetica>AIPS++</font> Project since its inception in early 
1992, and has been our technical leader during all of that time. 
Since 1995 he has been Deputy Project Manager. Most of the architecture of 
<font face=helvetica>AIPS++</font>  originated in Brian's head and he has 
written much more than his fair share of the code. Beyond these 
direct contributions, he has been influential in all areas of the 
Project by virtue of his willingness to comment on and offer advice on a
ll aspects of the system. I'd also like to say on behalf of all of us 
working in the Project that he's been a complete pleasure to work 
with and we'll miss him in many ways. We wish him the best in his new 
work on the MMA. The computing needs of the MMA are daunting, both in 
hardware and software, but I can think of no one better suited to 
oversee the development of the computing systems.

<P>Although Brian is a hard act to follow, I'm pleased to say 
that we have found a way to replace him. This requires splitting 
his two roles: Deputy Project Manager and technical leader:

<UL>
<LI>Athol Kemball will replace Brian as Deputy Project Manager, 
effective July 1. Athol joined the <font face=helvetica>AIPS++</font> 
Project last year from Classic AIPS and has been directing our 
synthesis development effort. He has extensive experience in 
software development from his years working within Classic AIPS. 
In addition, he has a strong background in many technical aspects of 
interferometry and an active and productive scientific research program.</LI>

<LI>Ger van Diepen of NFRA will become <font face=helvetica>AIPS++</font> 
Technical Leader, effective September 1. Ger has been a key member of 
<font face=helvetica>AIPS++</font> from the start of the project. 
He has contributed in many areas, in particular the 
<font face=helvetica>AIPS++</font> Table system and more recently 
the Image classes.</LI></UL>

<P>In other project news, the third beta release is still in preparation. 
The highest priority items for the release are improved user documentation, 
more capable cross-calibration software, and a command-line interface to 
the object system. We are being helped in complete testing of the core 
parts of the system by a group of testers at the AOC in Socorro.</td></tr>




<tr><td valign=top>

<a href="#parallelization">
<font  color="#008c66" size="3"><b>
Parallelization<br>Project</a><p>


<a href="#summary"><font color="#008c66">
Project News<br>Summary</a></font><p>

<a href="#measures"><font color="#008c66">
Measures <br>- Part 2</a><p>

<a href="#newsletter"><font color="#008c66">
Newsletter<br> Mailing List</a><p>

<a href="#glish"><font color="#008c66">
The Story of <br><i>Glish</i> - Part 3</a><p>

<a href="#recipes"><font color="#008c66">
Recipes</a><p>

<a href="#new"><font color="#008c66">
What's New<br>in <font face=helvetica>AIPS++</font></a><p>
<td valign=top>

<a name="measures">
<FONT FACE=helvetica SIZE="+3"><b>Measures, Part 2</b></FONT><br>
<I>Wim Brouw</I> - ATNF, Epping</a><P>

The functionality of the <tt>Measures</tt> module can be used interactively 
with the aid of a GUI. The GUI is started by typing 
<tt>dm.gui()</tt> on the glish command line. It can also be started 
automatically by including in your <i>.aipsrc</i> the following line: <P>

<tt>measures.default: gui</tt>


The main menu bar below  appears. When your cursor  hovers above one of the 
menu items, a short description of the menu's contents appear. (<i> Due to
rapidly changing nature of <font face=helvetica>AIPS++</font>, some of these
 GUIs may appear a bit differently</i>.)<P>

<IMG SRC="../mb0.gif"  WIDTH=438 HEIGHT=67 vspace=2 hspace=8 ALT="Main bar">

<P>As an example, below on the left you see what happens when 
your cursor hovers above the 
<i><b>Tool</b></i> menu.  If you press e.g. the 
<i><b>Tool</b></i> menu, a list of options appear  
as shown to the right: <P>

<center><IMG SRC="../mb2.gif" WIDTH=223 HEIGHT=82 vspace=2 hspace=8 ALT="Main bar help">
<IMG SRC="../mb1.gif" WIDTH=125 HEIGHT=162 vspace=2 hspace=8 ALT="Tool menu">
</center>
</td></tr>
<tr><td></td><td>
<P>Going back to the main menu bar. The <i><b>File</b></i>, <i><b>Format</b></i>, 
<i><b>Frame</b></i> and <i><b>Help</b></i> items are on all windows. 
The <i><b>File</b></i> menu lets you close window(s). 
The <i><b>Help</b></i> menu offers you links to the reference manual 
(and options to stop the context help). 
The <i><b>Format</b></i> menu lets you select your favorite output 
format for results (check e.g. the frequency ouput options).
 Note that an ellipsis (...) indicates that you can fill in your own units. 
<P><IMG SRC="../frm0.gif" WIDTH=462 HEIGHT=200 vspace=2 hspace=8 ALT="Frame panel">

<P>The <i><b>Frame</b></i> menu lets you select your environment (location, etc.). 
Note that some actions automatically select 'now' as a frame option, 
and you can also select your location automatically by including 
your preferred Observatory name in your <i>.aipsrc</i> 
file in <tt>measures.default.observatory</tt>. Once you have actively 
selected a frame element, a frame panel appears (as shown at the above) , 
showing you the active frame elements. <P>

<P>The <i><b>Application</b></i> menu gives a set of pre-programmed options 
like Clocks, Rise/Set  times, and Velocity-to-Frequency 
conversions. <P>

<P>The <i><b>Tool</b></i> menu has options to open one or more specialized tools 
for a particular Measure (and also a Quantity calculator). Each of the 
Measure tools show the same format. They have the standard top menu bar 
as described above. In addition, they have an <b>input</b> section on 
the left, and an <b>output</b> section on the right. Results are obtained 
by pressing the <tt><b>Convert-</b></tt> button. <i>Direction Handling</i>
 GUI looks as 
follows: <BR>
<BR>
<center><a href="../dir0.gif">
<IMG SRC="../brouwpic.gif" ALIGN="TOP" vspace=2 hspace=4
ALT="Direction handling"></a><br>Please click on this
image to obtain a larger view</center><P>

The white fields on the left are to input data (in the right units!). 
The field at top-right displays the result of a conversion in standard 
formats (either default or as selected by the <i><b>Format</b></i> 
main menu options).  In general, the result fields have buttons to their 
right displaying the selected format or units. Pressing these buttons gives you the 
option to change them. The grey fields at the bottom of both sections display 
the input or result in alternative formats (see the hover help for 
the meaning of the fields). <P>

<IMG SRC="../dir5.gif" ALIGN="RIGHT" WIDTH=183 HEIGHT=201 hspace=2 vspace=8 ALT="Direction handling">
<IMG SRC="../dir4.gif" ALIGN="LEFT" WIDTH=119 HEIGHT=272 hspace=2 vspace=8>
<P>

<P>The <tt><b>Source</b></tt> and <tt><b>Planet</b></tt> button 
in the left part of the GUI are special action buttons. 

These buttons are selected for special short-cut inputs. 
In this case, you select a source 
from the source list (as shown on the left).  Selecting the 
source from the list  fills 
in the coordinates (as shown on the right). <P>
</td></tr>
<tr><td></td><td>
<P></P><IMG SRC="../dir6.gif" ALIGN="RIGHT" WIDTH=118 HEIGHT=228 vspace=2 hspace=8  ALT="Direction handling">
A Planet can be selected with the <tt><b>Planet</b></tt> button 
(no input parameters 
appear because they are then unknown).  
You can type in your coordinates 
manually by selecting the white button (shown as J2000, by default) and
choosing  the reference code of the input. 
When loading sources or 
planets this field is automatically loaded. 
The <b><tt>Offset</tt></b> button selects the input as 
an offset to be added to 
subsequent inputs (especially useful for Epochs). 
The <b><tt>Frame it</tt></b> button  uses the input as an 
entry in the reference 
frame.<p>

If you provide the values in 
wrong units a pop-up appears. 

When you select a planet, a 
<I><tt>Frame</tt></I> window appears
giving the position of a planet.  You must 
specify the time. If you do not  select an epoch, the 
GUI  assumes you want the time as 'now'.<p><br>

<P>
<IMG SRC="../dir2.gif" ALIGN="RIGHT" WIDTH=272 HEIGHT=275 hspace=4
vspace=4 ALT="Direction handling"><br>

<P>As an example select an input, say the planet Mars. 
To get the position of the 
planet, you have to convert it, first  by selecting an output 
reference code in 
the right-hand white selector field, and then pressing  
the <b><tt>Convert</tt></b>
button. Output values as shown on the right, appear. 
The small 
<b><tt>hms</tt></b>  and <tt><b>dms</b></tt> 
buttons can be used to control the output 
format. The 
middle buttons act on the result. With the white button you can select 
another reference code (and press <b><tt>Convert</b></tt> again). 
The <tt><b>Offset</b></tt>
button lets you specify an offset (taken from the input field!) 
which is subtracted from the result before it is shown. <P>
</tr></td>

<tr><td></td><td>
<P></P><IMG SRC="../dir3.gif" ALIGN="LEFT" WIDTH=289 HEIGHT=260 
vspace=4 hspace=4  valign=top ALT="Direction handling">
<p>
<br>
<P>

The <tt><b>Export</b></tt> button  exports the result to a (selectable) 
<i>Glish</i> variable that can be used on the command line. 
The <tt><b>Info</b></tt> 
button lets you select additional information 
(e.g., Rise, Set,
Co-latitude, and User). On the 
left is an example if you select the Rise (or Set, they are coupled) 
information. Note again the small buttons on the right, which in this 
case allows you to specify the type of time you want, and the elevation 
limit. All Info  buttons have a <tt><b>User...</b></tt> button, which lets 
you define a <I>Glish</I> function that will be called (the name is 
selectable, as is the unit option). For details of the interface 
between the function and the result see the Reference Manual.

<P>This report tries to give some flavour of the Measures GUI (and its 
associated code). I hope it helps  you in pursuing its possibilities 
further. Please let me know of any extension you would like to see 
(or bugs you find).



<tr><td valign=top>


<td valign=top>




<a name="newsletter"><FONT FACE=helvetica size="+3"><b>Newsletter 
Mailing List</b></FONT><br>
<I>Tim Cornwell</I> - NRAO, Socorro</a><p>

<P>
To alert our readers to each new issue of the 
<font face=helvetica>AIPS++</font> Newsletter, we have inaugurated 
a newsletter mailing list. When a new edition is published, we will 
send an announcement to this mailing list. To subscribe to the mailing list, 
send mail to <tt><b>majordomo@majordomo.cv.nrao.edu</b></tt> with the 
following  command in the body of your email message:<P>

<tt>subscribe aips2news</tt><p>

If you ever want to remove yourself from this mailing list, you can send 
mail to <tt><b>majordomo@majordomo.cv.nrao.edu</b></tt> with the 
following command in the body of your email message:
<P>

<tt>unsubscribe aips2news</tt>
<p>
If you ever need to get in contact with the owner of the list, 
have trouble unsubscribing, or questions about the list itself, 
send email to <tt><b>owner-aips2news@majordomo.cv.nrao.edu</b></tt>.
</tr></td>


<tr><td valign=top>


<a href="#parallelization">
<font color="#0008c66" size="3"><b>
Parallelization<br>Project</a><p>


<a href="#summary"><font color="#008c66">
Project News<br>Summary</a></font><p>

<a href="#measures"><font color="#008c66">
Measures <br>- Part 2</a><p>

<a href="#newsletter"><font color="#008c66">
Newsletter<br> Mailing List</a><p>

<a href="#glish"><font color="#008c66">
The Story of <br><i>Glish</i> - Part 3</a><p>

<a href="#recipes"><font color="#008c66">
Recipes</a><p>


<a href="#new"><font color="#008c66">
What's New<br>in <font face=helvetica>AIPS++</font></a><p>

<td valign=top>



<a name="glish"><FONT FACE=helvetica SIZE="+3">
<b>The Story of <i>Glish</i> - Part 3</b></font><br>
<i>Darrell Schiebel</i> - NRAO, CV</a><p>

The two previous installments covered the origin of <I>Glish</I> 
and the concept of <I>Glish</I> as a <B>glue</B> language. 
In this installment, I would like to discuss the latest addition to 
<I>Glish</I>'s functionality, and in the process, try to illuminate 
<I>how Glish</I> evolves.<P>

<P>Early in the <font face=helvetica>AIPS++</font> project, we had 
difficulty with GUIs (graphical user interfaces). 
It was difficult to choose which base to build our system on, 
e.g. <I>Motif</I> or <I>InterViews</I>, GUI builder or library. 
It was about this time that I added the <tt>Tk</tt> widgets to 
<I>Glish</I> because it could become the basis for <B>simple</B> 
GUIs inside <font face=helvetica>AIPS++</font> and because I thought 
anyone using <I>Glish</I> should have access to the GUI elements. 
The <tt>Tk</tt> widgets were the obvious choice because they were 
widely used and because they were built for the sort of interactive 
use I planned.

<P>The mapping of a GUI onto <I>Glish</I>'s event mechanism was 
obvious and painless. Indeed, most GUIs are written in an event-oriented 
style where functions are registered for all of the important GUI elements. 
These <tt>callback</tt> functions are then called as the user interacts 
with the GUI. This is exactly what happens with <I>Glish</I>'s 
<tt>whenever</tt> statements. For example,<P>
<dl><dd>
<tt>f := frame()<BR>
b := button(f,'press me')<BR>
whenever b-&gt;press do<BR>
<dl><dd>print 'Hello world!'</dl></tt></dl>
<p>

this script displays a button, and each time the user pushes the 
button "Hello world!" is printed. Each of the 
<tt>Tk</tt> widgets becomes a <I>Glish</I> client which sends and 
receives <I>Glish</I> events. This required several changes to 
<I>Glish</I> because, up to this point, all clients were separate 
(operating system) processes which were connected to <I>Glish</I> 
through inter-process communication (IPC) connections. Another 
thing to note about my plan for the interface is that one widget 
is placed inside of another by passing the outer widget to the inner 
widget as a parameter. The outer widget is, in a sense, the <B>parent</B> 
of the inner widget. In this case, the frame, 
<tt>f</tt>, is passed as a parameter when the button, 
<tt>b</tt>, is created. This looks like:
<IMG SRC="../glishbutton.gif" align=left vspace=4 hspace=4 WIDTH=91 HEIGHT=60>

<p>
First the top level frame is created, and then the button is placed inside 
of it. This means further changes to <I>Glish</I> because it requires 
that clients be able to be <B>passed</B> to other clients.

<P>None of this functionality, i.e. clients of smaller granularity 
than a process, and passing clients to other clients, was available 
in <I>Glish</I>. The proper design for this would be to build a 
client that would act as a repository for these GUI widgets. 
When the user creates a widget agent in a script, the actual 
<tt>Tk</tt> widget would be created in the client. Events sent to any 
of the GUI agents created in the script would be forwarded to a single 
client process. Likewise any events, generated by user interaction with 
the GUI, created in the client would be forwarded to the proper agent 
in the script. The advantages of this approach would be that the 
<tt>X</tt> libraries would only be needed for the GUI client so the 
<I>Glish</I> interpreter would remain small. Another advantage would 
be that the flexibility of clients would be greatly improved because 
any client could act as a repository of agents, each of which would 
be a conduit of events to the repository process.

<P>However, it wasn't at all clear if the GUI clients would be 
acceptable to programmers, or if the resulting system would be 
fast enough for interactive use. Also since much time had been wasted 
with <I>InterViews</I> <I>and Motif,</I> this widget binding needed to 
be fashioned quickly. As a result of these pressures and a general lack 
of through experience with <I>Glish</I>, the easiest way out was taken. 
The <tt>Tk</tt> widgets (along with the <tt>X</tt> libraries) were 
linked into the interpreter. This nearly doubled the size of the 
interpreter, but the widgets were available for <I>Glish</I> users 
in about three weeks. Since that time the <tt>Tk</tt> widgets have 
provided the basis for most AIPS++ GUIs.

<P>In general, the use of these widgets has been very successful. 
GUIs have been created by users who probably would not have attempted 
to create a GUI using <I>Motif</I>. The <tt>Tk</tt> widgets have been 
very robust. There were some problems, and it is these problems that 
provided the impetus for fixing things properly by moving the widgets 
to a client.

<P>The <I>Rivet</I> library (<tt>http://personal.veritas.com/~brianw/rivet/</tt>) was chosen for the initial binding of the widgets to <I>Glish</I> 
because it throws out the <tt>TCL</tt> interpreter while keeping the 
<tt>Tk</tt> widgets. It was hoped that this would be faster while 
avoiding linking in the <tt>TCL</tt> interpreter library. It is doubtful 
that the <I>Rivet</I> widgets would have been any faster, and the savings 
in executable size was probably minimal. The final nail in <I>Rivet</I>'s 
coffin came when the author quit supporting it, and it fell far behind 
the release of <tt>TCL/Tk</tt>.

<P>Some GUIs proved to be too slow with the <I>Glish</I> based 
<tt>Tk</tt> widgets. The best example is the table browser that reads 
data from disk and uses it to fill in a spreadsheet-like GUI. The user 
can then interact with the data through the spreadsheet. This GUI was 
too slow mainly because of the all of the operations necessary to 
initialize the interface.

<P>Another problem with the <tt>TCL</tt>-less <I>Rivet</I> 
based widgets was that <I>Glish</I> users couldn't easily 
get access to all of the <tt>TCL/Tk</tt> widgets which are 
readily available. Some of the <B>mega-widgets</B> that are 
available could simplify some complex GUIs, like the table browser, 
and make them much speedier. These <b>mega-widgets</b> are packages of 
multiple smaller widgets, and they implement more complex GUI components, 
like a spreadsheet. These <B>mega-widgets</B> are implemented using TCL, 
and sometimes compiled C code.

<P>Moving these widgets to a client and moving from <I>Rivet</I> to 
<tt>TCL/Tk</tt> directly solves many of these problems: an unsupported 
product is exchanged for a supported one; <B>mega-widgets</B> 
implemented in <tt>TCL</tt> and <tt>C</tt> may make large GUIs fast enough; 
<I>Glish</I> users can get access to all of the 
<tt>TCL/Tk</tt> widgets easily; the <I>Glish</I> interpreter's 
size (since it no longer needs to link against 
<tt> X</tt> and <tt>TCL/Tk</tt> libraries) is cut in half; and 
<I>Glish</I>'s client interface is expanded and improved.

<P>The first steps of this conversion are finished. 
A <I>Rivet</I>-based client application has been created 
which serves up the widgets to the interpreter. This setup 
seems fast enough, but the table browser is slower. 
A <tt>TCL/Tk</tt>-based client application is being created and 
should be completed shortly. In the near future, this change will be 
integrated into <font face=helvetica>AIPS++</font> after there has 
been sufficient testing and debugging.</td></tr>


<tr><td valign=top>

<a href="#parallelization">
<font color="#008c66" size="3"><b>
Parallelization<br>Project</a><p>


<a href="#summary"><font color="#008c66">
Project News<br>Summary</a></font><p>

<a href="#measures"><font color="#008c66">
Measures <br>- Part 2</a><p>

<a href="#newsletter"><font color="#008c66">
Newsletter<br> Mailing List</a><p>

<a href="#glish"><font color="#008c66">
The Story of <br><i>Glish</i> - Part 3</a><p>

<a href="#recipes"><font color="#008c66">
Recipes</a><p>

<a href="#new"><font color="#008c66">
What's New<br>in <font face=helvetica>AIPS++</font></a><p>


<td valign=top>


<a name="recipes"><FONT FACE=helvetica size=+3">
<b>AIPS++ Cookbooks Made of Recipes
</b></font><br>
<I>Bob Hjellming </I>- NRAO, Socorro<p>


<P>We are developing a prototype Cookbook for <font face=helvetica>
AIPS++</font> users based upon the concept of recipes that achieve 
particular goals.  The following is an example of a recipe using a 
particular format.  With this format every recipe begins with a statement 
of goals, a list of what is used from <font face=helvetica>AIPS++</font>, 
the results, and (most importantly) the assumptions (=ingredients) 
you must have. These recipes are intended to be readable in hard copy 
form, but optimum use is obtained when reading with a Web browser 
because of the links to data files  or other documentation.<p>


<center><TABLE CELLSPACING=8 BORDER=0 CELLPADDING=7 WIDTH=450>
<TR><TD VALIGN="TOP">
<FONT FACE=helvetica SIZE=4 COLOR="#ff0000"><b>Goals</b></FONT></TD>
<TD VALIGN="TOP">
<B>Read an ASCII data table into AIPS++ - and make plots of the data</B>
</TD></TR>

<TR><TD  VALIGN="TOP">
<FONT FACE=helvetica  SIZE=4 COLOR="#ff0000"><b>Using</b></FONT></TD>
<TD  VALIGN="TOP">
<I>tablefromascii</I> function, <I>Table</I>, and <I>PGPlotter</I></TD>
</TR>

<TR><TD VALIGN="TOP">
<FONT FACE=helvetica  SIZE=4 COLOR="#ff0000"><b>Results</b></FONT></TD>
<TD  VALIGN="TOP">
<P>Data Columns in <I>Glish</I> arrays, and plots of these data</TD></TR>

<TR><TD VALIGN="TOP">
<FONT FACE=helvetica SIZE=4 COLOR="#ff0000"><b>Assume</b></FONT></TD>
<TD VALIGN="TOP">
<P>You have an input file of ASCII data in columns, and a header 
description file. In this recipe the ASCII data file named  
<A HREF="../1909+048.text">1909+048</A> has seven columns of numbers. 
The ASCII header file describes the data columns in the data file; 
in this case a header file <A HREF="../gbihdr.text"><tt>gbihdr</tt></A> assigns 
names and data types to each column, following the rules described 
in documentation of 
\end{rawhtml} 
\htmlref{\tt tablefromascii}{tablefromascii}
\begin{rawhtml},
header file contents. 
Both input and header files must be in the directory from which you started 
<font face=helvetica>AIPS++.</font></TD>
</TR>
<TR><TD VALIGN="TOP">
<FONT FACE=helvetica SIZE=4 COLOR="#ff0000"><b>Script</b></FONT></TD>
<TD VALIGN="TOP">
<P>
A <A HREF="../gbitotable.g.text"><i>Glish</i> script</A> 
executes this recipe.</TD>
</TR>
</TABLE>

<P><HR><P> 
<TABLE CELLSPACING=8 BORDER=0 CELLPADDING=8 WIDTH="100%">
<TR><TD VALIGN="TOP">
<FONT FACE=helvetica SIZE="3" COLOR="#ff0000"><b>AIPS++/<i>Glish </i><br>commands and results</b></FONT></TD>
<TD VALIGN="TOP">
<FONT FACE=helvetica SIZE="3" COLOR="#ff0000"><b>Purpose and Background
</b></FONT></TD></TR>

<TR><TD VALIGN="TOP">
<tt>tablefromascii('ss433table',<BR>
'1909+048', 'gbihdr')</tt></TD>

<TD VALIGN="TOP">
<P>Put ASCII tables of data into an <font face=helvetica>AIPS++</font> 
table is using the <font face=helvetica>AIPS++</font> 
<tt>tablefromascii</tt> function. 
For details on what you can do with <font face=helvetica>AIPS++</font> 
tables see the 

<A HREF="http://aips2.nrao.edu/aips++/docs/user/Refman/">
<font face=helvetica>AIPS++</font> Module Reference Manual</A>.

<P>Invoking <tt>tablefromascii</tt> results in an 
<font face=helvetica>AIPS++</font> Table named <tt>ss433table</tt> 
written to disk.</TD></TR>

<TR><TD VALIGN="TOP">
<tt>ss433 := table('ss433table')</tt></TD>
<TD VALIGN="TOP">
<P>Read this Table into a <i>Glish</i> object named 
<tt>ss433</tt></TD>
</TR>
<TR><TD VALIGN="TOP">
<tt>ss433.getkeywords()</tt></TD>
<TD  VALIGN="TOP">
<P>Show keywords defined in the gbihdr file</TD>
</TR>
<TR><TD  VALIGN="TOP">
<tt>[INSTRUMENT=Green Bank Interferometer, FREQUNITS=GHz, FREQS=2.25, FREQX=8.3, FLUX=average of RR and LL, MJD=average Julian Day - 2400000.5 for scan, SS=2.25 GHz FLUX, SX = 8.3 GHz Flux, LHA=Local Hour Angle for Scan] </tt></TD>
<TD VALIGN="TOP">
<P>Resulting listing of keywords</TD>
</TR>
<TR><TD VALIGN="TOP">
<tt>mjd := ss433.getcol('MJD')<BR>
Ss := ss433.getcol('SS')<BR>
Sx := ss433.getcol('SX')</tt></TD>
<TD  VALIGN="TOP">
<P>Extract columns from the table and assign them to 1-D arrays using 
<I>getcol</I> on the <i>Glish</i> table object named <tt>ss433</tt></TD>
</TR>
 <TR><TD VALIGN="TOP">
<tt>plot := pgplotter(background='white')</tt></TD>
<TD VALIGN="TOP">
<P>Make a pgplotter object named plot and open a plotting  window 
on the screen</TD>
</TR>
<TR><TD VALIGN="TOP">
<tt>xmin := min(mjd)<BR>
xmax := max(mjd)<BR>
ymin := 0<BR>
ymax := max(Ss)*1.05</tt></TD>
<TD VALIGN="TOP">
Calculate  range variables for x and y axes</TD>
</TR>
<TR><TD VALIGN="TOP">
<tt>plot.env(xmin,xmax,ymin,ymax,0,1)</tt></TD>
<TD VALIGN="TOP">
<P>Set plotting environment, mainly to change the range for 
x- and y- axes</TD>
</TR>
<TR><TD VALIGN="TOP">
<tt>red := 2; blue := 4</tt></TD>
<TD VALIGN="TOP">
Set color values</TD></TR>

<TR><TD  VALIGN="TOP">
<tt>plot.sci(red)<BR>
plot.line(mjd,Ss)</tt></TD>
<TD VALIGN="TOP">
Set plotting color to red and make a line plot of Ss vs mjd 
in the plotting window</TD>
</TR>
<TR><TD VALIGN="TOP">
<tt>plot.sci(blue)<BR>
plot.line(mjd,Sx)</tt></TD>
<TD VALIGN="TOP">
<P>Set plotting color to blue and add a line<BR>
plot of Sx vs mjd</TD>
</TR>
<TR><TD VALIGN="TOP"></TD>
<TD VALIGN="TOP">
<P>In the Pgplotter window, 
<i>File</i> can be used to print, save, etc., the plot(s)</TD>
</TR>
</TABLE></center>

<P>The development of recipes has been slow for interesting 
astronomical applications because of the changes and improvements 
in major modules like <tt>ms</tt>, <tt>cal</tt>, <tt>sky</tt>. 
A set of astronomical recipes for doing standard things should
be available sometime during the Summer of 1998.
Contributions of recipes or other material for this prototype 
<font face=helvetica>AIPS++</font> Cookbook are welcome. 
Please send them to <A HREF="mailto:rhjellmi@nrao.edu">rhjellmi@nrao.edu</A>.
</tr></td>


<tr><td valign=top>


<a href="#parallelization">
<font color="#0008c66" size="3"><b>
Parallelization<br>Project</a><p>


<a href="#summary"><font color="#008c66">
Project News<br>Summary</a></font><p>

<a href="#measures"><font color="#008c66">
Measures <br>- Part 2</a><p>

<a href="#newsletter"><font color="#008c66">
Newsletter<br> Mailing List</a><p>

<a href="#glish"><font color="#008c66">
The Story of <br><i>Glish</i> - Part 3</a><p>

<a href="#recipes"><font color="#008c66">
Recipes</a><p>


<a href="#new"><font color="#008c66">
What's New<br>in <font face=helvetica>AIPS++</font></a></b><p>


<td valign=top>


<a name="new"><FONT FACE=helvetica size="+3"><b>What's New in AIPS++</b></font><br>
<I>Tim Cornwell</I> - NRAO, Socorro</I></a>

<P>The following personnel changes have occurred:<P>

<UL>
<LI>Brian Glendenning is leaving <font face=helvetica>AIPS++</font> to 
join the NRAO MMA Project. </LI>

<LI>Athol Kemball (NRAO) will become Deputy Project Manager, 
effective July 1. </LI>

<LI>Ger van Diepen (NFRA) will become <font face=helvetica>AIPS++ </font>
Technical Leader, effective September 1. </LI>

<LI>Peter Barnes and David Barnes (no relation!) have joined 
<font face=helvetica>AIPS++</font> in Socorro and Epping respectively. </LI>

<LI>Friso Olnon (NFRA) has left <font face=helvetica>AIPS++</font> to work 
at the Joint Institute for VLBI in Europe.</LI></UL>

<P>The following changes have been made to the <font face=helvetica>AIPS++
</font> development system:</P>

<UL>
<LI><tt>Sky</tt> has an "advise" function which can suggest imaging parameters 
(e.g., <tt>cellsize</tt>) for you. The speed of <tt>sky</tt> has been improved 
in several areas, and some subtle bugs have been fixed. </LI>

<LI>We have improved our "component list" implementation. At present a 
component list may consist of an arbitrary collection of point components 
and Gaussians, possibly with a spectral variation. <tt>Sky</tt> can 
use a component list as a model. <font face=helvetica>AIPS++</font> will 
probably distribute calibrator lists in this format. </LI>

<LI>The <tt>Dish</tt> program can now save and restore its state. </LI>

<LI>The <tt>Measures</tt> GUI can now handle source lists. The <tt>Measures</tt> 
system now understands the ITRF reference frame. We have also added a 
<tt>Measure</tt> for the Earth's magnetic field, and a number of 
<tt>Measure</tt> classes to aid calculation of baselines and 
<tt>uvw</tt> vectors. </LI>

<LI>A simple <tt>plotxy()</tt> function has been added to 
<tt>pgplotter</tt> to make it simpler to plot vectors from <I>Glish</I> 
(e.g., you no longer need to call <tt>pg.env()</tt>). 
<tt>pgplotter</tt> should now almost always be able to use a shared 
color map (no flashing) as long as you don't need too many colors 
(in particular, if the number of colors is 16 or less). </LI>

<LI><I>AipsView</I> now works with the <tt>CDE</tt> window manager, 
and has better color map control in general. </LI>

<LI>A rich set of <tt>Image </tt> mask and region classes have been checked in. 
Although there is no visible change to users yet, these classes allow 
construction of sophisticated image analysis tasks. </LI>

<LI>Progress bars (used for, e.g., gridding) now only appear after 5 seconds, 
to prevent visual clutter if you are doing many short operations. </LI>

<LI>ASCII File I/O and formatting (<tt>printf</tt> style) has been added to 
<I>Glish</I>. <I>Glish</I> regular expression matching has been improved 
(e.g. so the result can now be used as a mask). For <I>Glish</I> programmers, 
<tt>$value</tt>, <tt>$agent</tt>, and <tt>$name</tt> are now local to the 
<tt>whenever</tt> scope, not global, so you do not need to worry about them 
being clobbered by intervening events or function calls. </LI>

<LI>You can now change values in <tt>Tables</tt> from the new table 
browser (<tt>newtb</tt>). You can also export and import 
<tt>Table</tt> columns to a <I>Glish</I> variable from the browser. </LI>

<LI>The "no frames" versions of the <font face=helvetica>AIPS++</font> web pages 
are greatly improved. Let us know what you think! They will become the 
default pages in the near future. </LI>

<LI>The project has been experimenting with the <tt>egcs</tt> compiler 
(<tt>GNU</tt> with additions from <I>Cygnus</I> and other sources) with 
good results. In particular, native exception handling works on at least some 
architectures, which improves the reliability of the system. We are considering 
releasing <tt>egcs</tt> binaries for the next beta release.</UL>

</tr></td>
</table>

</body>
</html>


\end{rawhtml}
\end{document}
 
