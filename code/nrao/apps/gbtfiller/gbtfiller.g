# gbtfiller.g: glish script for gbtfiller client
# Copyright (C) 1999
# Associated Universities, Inc. Washington DC, USA.
#
# This library is free software; you can redistribute it and/or modify it
# under the terms of the GNU Library General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
# License for more details.
#
# You should have received a copy of the GNU Library General Public License
# along with this library; if not, write to the Free Software Foundation,
# Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
#
# Correspondence concerning AIPS++ should be addressed as follows:
#        Internet email: aips2-request@nrao.edu.
#        Postal address: AIPS++ Project Office
#                        National Radio Astronomy Observatory
#                        520 Edgemont Road
#                        Charlottesville, VA 22903-2475 USA
#
# $Id: gbtfiller.g,v 19.0 2003/07/16 03:42:43 aips2adm Exp $

# include guard
pragma include once;

include "gbtfiller_base.g"

const gbtfiller := function(withGUI = T) { return gbtfiller_base(withGUI);}

const help_gbtfiller := function()
{
   print "";
   print "---- filling while data is being taken ----"
   print "";
   print "Several gbtfillers can be run simultaneously."
   print "To start a single gbtfiller with a GUI:"
   print "   filler := gbtfiller();"
   print "To start a filler without a GUI:"
   print "   filler := gbtfiller(F)";
   print "";
   print "All status messages are sent to the default aips++ logger."
   print "";
   print "Function syntax: all of these functions are attached to"
   print "the record returned by gbtfiller as attributes."

   print "To use them type: filler.function(arguments)";
   print "where filler is the name of the variable holding the"
   print "record returned by gbtfiller, function is the function"
   print "name as given below and arguments are the appropriate"
   print "arguments for this function.  In the remainder of this text,";
   print "'filler.' is assumed to preceed each function when typed by the user."; 
   print "";
   print "Most of these function have corresponding buttons on the GUI";
   print "";
   print "fill(backend, project, table_name, start_time, stop_time, object)"
   print "";
   print "Corresponds to the Fill button."
   print "All arguments are strings.  The last 4 arguments are all optional."
   print "backend is the name of a backend type - Dcr, Sp ..."
   print "project is the name of the top-most directory in the data tree."
   print "from which you would like to fill."
   print "table_name is the desired name of the output table."
   print "If not specified this defaults to backend_project.table"
   print "where only the basename of the project directory is used."
   print "start_time and stop_time are the start and stop times to"
   print "use during the filling.  They are expressed as:"
   print "mm/dd/yyyy,hh:mm:ss"
   print "object is a string giving an object name to fill.  Wildcards are";
   print "allowed.  The default is '*', the wildcard, or all object names";
   print "match.  Note: the Dcr backend does not yet have any object names";
   print "associated with scans - this keyword is ignored for that backend.";
   print ""
   print "The filler processes the initial fill command until all"
   print "data in the indicated time range having the indicated"
   print "backend and project is exhausted.  It then pauses, waiting"
   print "for upate events.  These update events will be automatically"
   print "generated.  However, they can be manually generated by"
   print "using the update() function."
   print ""
   print "Remember that the filler enforces the rule that the table is in";
   print "time order.  You can not fill to an existing table using data with"
   print "a timestamp earlier than the last time in the table."
   print "Such data will simply be ignored."
   print ""
   print "The filler can be started and fill() used before any data is available."
   print ""
   print "update() : as described above - force the filler to"
   print "re-examine the data to see if any more can be filled."
   print "Corresponds to the Update button.  update() is called automatically"
   print "If any change is seen in the number of files in the indicated";
   print "project backend directory."
   print ""
   print "suspend() : stop filling.  The filler will wait until"
   print "the next fill event.  You can not issue another fill() command"
   print "unless the filler has first been suspended.  This corresponds to"
   print "the Suspend button.  This also turns off all autotmatic updates."
   print ""
   print "query_state() : returns either paused, indicating that"
   print "the filler is active but waiting for update events or"
   print "suspended, indicating that the filler is waiting for fill"
   print "events.  There is no corresponding button."
   print "";
   print "table() : returns a table ID record which corresponds to the"
   print "most recently updated output table.  This can be used with all"
   print "functions available in gtable."
   print ""
   print "quit() : stops and terminates the filler and exits the gui."
   print "once issued, this filler record is no longer useful as a filler."
   print ""
}
