%% viewerannotations.help: help file for viewerannotations tool
%% Copyright (C) 1999,2000,2001,2002
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: viewerannotations.help,v 19.1 2005/06/15 18:10:56 cvsmgr Exp $

\documentclass{book}
\usepackage{aips2help,html}
\begin{document}

\begin{ahobject}{viewerannotations}{Tool for drawing annotations onto a displaypanel.}

\ahinclude{viewerannotations.g}

\ahkeyword{annotations}{}

\subsubsection*{General description}
\label{viewer:viewerannot}
\begin{ahdescription}

This \tool\ allows the user to interactively draw shapes and text onto
\VdisplaypanelTs. It has a GUI, allowing selection of the drawing tool
to use, and also the ability to change settings for a specified
drawing object. Annotations can also be constructed and modified via
option records passed to functions on the command line. The \tool\
also supports printing of the user's annotations onto postscript. On
creation of a \VdisplaypanelT, a viewerannotation is automatically
created, the GUI of which can be accessed by selecting the
``Annotations...'' option from the ``Tools'' menu. Each
viewerannotation \tool\ must be associated with a \VdisplaypanelT.

\end{ahdescription}

\subsubsection*{Graphical User Interface}
\label{viewer:vannotations}
\begin{ahdescription}

The \guilong\ provided by the viewerannotations tool is designed to
provide access to common settings and actions used when annotating a
displaypanel. The \guishort\ contains buttons, which are broken into
two main categories. There are three control buttons, at the top left
of the \guishort\ . They can be used to assign a mouse button to
control of annotations, to move / rotate shapes and to delete
shapes. The other buttons are all tools, which allow the user to
create new shapes. After clicking on a shape, the user can position
the shape on the displaypanel. The button on the far right, which is
the marker tool opens a pop up menu when clicked on. This menu shows a
list of available markers, which can then be placed on the
displaypanel. 

The other main section of the \guishort\ is a expandable options
section. By default the roll-up is ``rolled-up'', and hence the
options are not visible. By rolling down the options section, the user
has access to a context specific menu which shows options for the
shape they have currently selected. 

%\begin{latexonly}
\begin{figure}[h]
\begin{center}
\epsfig{file=vannotintro.ps,width=3in}
\caption{The \VannotationsT\ \guilong}
\label{fig:vannot}
\end{center}
\end{figure}
%\end{latexonly}

The figure above shows the annotation control GUI. Everything below
the Options roll-up is context specific, depending on which shape you
have selected. The control buttons, and also the tool buttons can be
seen above the roll-up.

%\begin{latexonly}
\begin{figure}[h]
\begin{center}
\epsfig{file=vannoshapes.ps,width=3.25in}
\caption{Manipulating annotations objects}
\label{fig:vannotshapes}
\end{center}
\end{figure}
%\end{latexonly}

The figure above shows annotations objects being edited. The selected
object is shown using green ``handles''. The handles can be moved to
change the size of the shape, and the shape can be moved by
clicking and dragging inside the shape. Keyboard modifiers can be used
to change the action performed by mouse events. Holding ``Control'' on
the keyboard changes the effect of moving the handles to that of
rotation, and the effect of dragging a shape to that of scaling the
object (about its center). If more than one shape occupies a location
on the screen, or if a larger object is covering a smaller object, the
underlying objects can be accessed by repeatedly clicking in the same
spot. 

{\bf Note:} All \aipspp\ \guishorts\ have a so-called popup help. Just
rest your mouse cursor on top of a \guishort\ element (e.g. a button)
and a little frame will appear outlining the funtionality of this
element. If you then press and hold down the right mouse button you
will get a detailed description. The information given there should be
sufficient to let you operate that \guishort\ element.

\end{ahdescription}

\subsubsection*{Events}
\label{viewer:vannotationsevents}
The \VannotationsT\ does not emit any events. It is not really
required to, since its job is to control event handling
internally. All of the actual mouse events are handled by the
underlying proxy. 
    maxposf

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{ahconstructor}{viewerannotations}{Create a \VannotationsT}
\begin{ahargs}
  \ahaddarg{displaypanel}{displaypanel to attach to}{}{agent}
  \ahaddarg{title}{the title to use for the \guishort\ frame}{``Unknown Draw Area''}{String} 
  \ahaddarg{widgetset}{\widgetserverT\ to use to build the \guishort}{ddlws}{\widgetserverT\ or unset}
\end{ahargs}
\ahreturns{\VannotationsT\ or fail}
\begin{ahdescription}

This is the only constructor for the \VannotationsT\.  It constructs (creates)
a \VannotationsT\ which attaches itself to the supplied
\VdisplaypanelT\. This constructor will generally not need to be called
by users, since each \VdisplaypanelT creates its own \VannotationsT\ at
construction time. 

\end{ahdescription}
\end{ahconstructor}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{done}{Destroy this \VannotationsT.}
\ahreturns{T}
\begin{ahdescription}

This function is used when the \VannotationsT\ is no longer
required. When the \VdisplaypanelT to which the annotator is attached
is 'done', this function is called automatically. 

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{dismiss}{Remove the \VannotationsT\ \guishort\ from
the screen}
\begin{ahargs}
\end{ahargs}
\ahreturns{T}
\begin{ahdescription}

This function simply removes (if it is visible) the \VannotationsT\
\guishort\ from the screen. The \guishort\ can be redisplayed, either
by the user clicking the appropriate menu option, or by a call to the {\tt
gui} function.
 
\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{print}{Print the annotations onto the supplied pixelcanvas}
\begin{ahargs}
   \ahaddarg{pixelcanvas}{PixelCanvas proxy to print the annotations
   to}{}{Pixelcanvas proxy}
\end{ahargs}
\ahreturns{T}
\begin{ahdescription}

This function is mainly designed for internal use. When the
\VdisplaypanelT\ is to be printed onto a Postscript PixelCanvas, the
pixelcavas is passed to this function, which draws all the current
annotations onto it. 

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{newshape}{Create a new shape based on a record}
\begin{ahargs}
	\ahaddarg{shapesettings}{Settings describing the shape}{}{Record}
\end{ahargs}
\ahreturns{}

\begin{ahdescription}
This function makes a new shape based entirely on the information
provided in the record passed to it. Once on screen, the shape can be
manipulated by the user. 
\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{deleteshape}{Delete a shape from the annotations}
\begin{ahargs}
  \ahaddarg{index}{Index of the shape}{}{Integer}
\end{ahargs}
\ahreturns{}
\begin{ahdescription}

This function deletes the shape with the specified index. The index of
the currently active shape can be determined using the {\tt
whichshape} function. 

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{whichshape}{Return the index of the currently
active shape}
\ahreturns{Integer}
\begin{ahdescription}

This function returns the index of the selected / active shape. 

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{createshape}{Create a shape, based on options and
also user input}
\ahreturns{}
\begin{ahdescription}

This function allows the user to create a shape by ``dragging it
out''. Some of the options including shape type, and miscellaneous
options must be supplied via the option record. Options regarding
position of the shape can be omitted, and these will be obtained the
next time the user clicks in the draw area. This allows for the user
to select a shape, and ``drag it out''.

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{availableshape}{Return a list of the available shapes}
\ahreturns{Array of Strings}
\begin{ahdescription}

This function simply returns an array which is filled with a list of
the available shapes.

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{setkey}{Set the key (mouse button) which the user
will use to control the annotations}
\begin{ahargs}
  \ahaddarg{keysym}{New key symbol}{}{Key Symbol, some are defined as
  glish global variables}
\end{ahargs}
\ahreturns{T}
\begin{ahdescription}

Different tools can be assigned to different mouse buttons. This
function allows the user to specify which button they wish to use to
control the annotations.

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{getalloptions}{Return options for all the shapes
currently displayed}
\ahreturns{Record}
\begin{ahdescription}

This will return a record, which contains the information for all of
the annotation shapes. The format of the record is as follows:

\begin{itemize}
\item{Shape 1:}
	\begin{itemize}
	\item{Options for shape 1...}
	\end{itemize}
\item{Shape 2:}
	\begin{itemize}
	\item{Options for shape 2...}
	\end{itemize}
\item{Shape n:}
	\begin{itemize}
	\item{Options for shape n...}
	\end{itemize}
\end{itemize};

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{setalloptions}{Sets the annotations based on
information provided in the record}
\ahreturns{Record}
\begin{ahdescription}

This sets the annotations based on a record. All current shapes are
deleted, and replaced with those specified in the option record. The
format for the record passed as a parameter is the same as that which
is returned by {\tt getalloptions}.

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{getshapeoptions}{Returns the option record for the
specified shape}
\begin{ahargs}
  \ahaddarg{whichshape}{Return options for this shape}{}{Integer}
\end{ahargs}
\ahreturns{Record}
\begin{ahdescription}

This function returns the option record for the shape with the
specified index. The index of the current / selected shape can be
determined by using the {\tt whichshape} function.

\begin{ahexample}
\begin{verbatim}
#Return the options for the currently selected shape:
annotator := mydisplaypanel.annotator();
shapeoptions := annotator.getshapeoptions(annotator.whichshape());
\end{verbatim}
\end{ahexample}

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{setshapeoptions}{Set the options of a specific shape}
\begin{ahargs}
  \ahaddarg{whichshape}{Set the options for this shape}{}{Integer}
  \ahaddarg{newoptions}{Options to set}{}{Record}
\end{ahargs}
\ahreturns{}
\begin{ahdescription}

This function sets options for a specific shape. The index of the
currently selected / active shape can be determined using the {\tt
whichshape} function. 

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{addlockedtocurrent}{``Lock'' a shape to the
currently selected one}
\begin{ahargs}
  \ahaddarg{whichshape}{Which shape do you wish to lock to the
  selected one}{}{Integer}
\end{ahargs}
\ahreturns{}
\begin{ahdescription}

This function can lock a shape to the currently selected one. For
example, if the currently selected object is an arrow, and the {\tt
whichshape} variable is set to the index of text, then whenever the
arrow is moved by the user, so too will the text.

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\begin{ahfunction}{removelockedfromcurrent}{Remove a locked item from
the currently selected shape.}
\begin{ahargs}
  \ahaddarg{lockeditemindex}{Index of shape to remove from lock}{}{Integer}
\end{ahargs}
\ahreturns{}
\begin{ahdescription}

This functions performs the opposite of {\tt addlockedtocurrent}. It
allows the user to 'unlock' a shape from the currently selected one.

\end{ahdescription}
\end{ahfunction}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\end{ahobject} 
\end{document}
