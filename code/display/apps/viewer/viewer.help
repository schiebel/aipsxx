%% viewer.help: top-level help for viewer module
%% Copyright (C) 1999,2000,2001,2002
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: viewer.help,v 19.1 2005/06/15 18:10:55 cvsmgr Exp $

\documentclass{book}
\usepackage{aips2help,html}
\begin{document}

\newcommand{\cpp}		{{\bf C++}}

\newcommand{\guishort}		{GUI}
\newcommand{\guishorts}		{GUIs}
\newcommand{\guilong}		{graphical user interface}
\newcommand{\guilongs}		{graphical user interfaces}

\newcommand{\image}		{Image}
\newcommand{\images}		{Images}

\newcommand{\atable}		{Table}
\newcommand{\atables}		{Tables}

\newcommand{\widgetserverT}	{Widgetserver {\tt tool}}
\newcommand{\autoguiT}		{Autogui {\tt tool}}

\newcommand{\Vtoolkit}	{Viewer toolkit}

\newcommand{\Tool}              {{\tt Tool}}

\newcommand{\VT}		{Viewer {\tt tool}}
\newcommand{\VTs}		{Viewer {\tt tools}}
\newcommand{\lkVT}		{\ahlink{\VT}{viewer:viewer}}
\newcommand{\lkVTs}		{\ahlink{\VTs}{viewer:viewer}}

\newcommand{\VstandardGI}	{Viewerstandardgui interface}
\newcommand{\lkVstandardGI}	{\ahlink{\VstandardGI}{viewer:viewerstandardgui}}

\newcommand{\VanimatorT}	{Vieweranimator {\tt tool}}
\newcommand{\VanimatorTs}	{Vieweranimator {\tt tools}}

\newcommand{\VcanvasMT}		{Viewercanvasmanager {\tt tool}}
\newcommand{\VcanvasMTs}	{Viewercanvasmanager {\tt tools}}
\newcommand{\lkVcanvasMT}	{\ahlink{\VcanvasMT}{viewer:viewercanvasmanager}}
\newcommand{\lkVcanvasMTs}	{\ahlink{\VcanvasMTs}{viewer:viewercanvasmanager}}

\newcommand{\VcanvasprintMT}	{Viewercanvasprintmanager {\tt tool}}
\newcommand{\VcanvasprintMTs}	{Viewercanvasprintmanager {\tt tools}}
\newcommand{\lkVcanvasprintMT}  {\ahlink{\VcanvasprintMT}{viewer:viewercanvasprintmanager}}
\newcommand{\lkVcanvasprintMTs}  {\ahlink{\VcanvasprintMTs}{viewer:viewercanvasprintmanager}}

\newcommand{\VcolormapMT}	{Viewercolormapmanager {\tt tool}}
\newcommand{\VcolormapMTs}      {Viewercolormapmanager {\tt tools}}
\newcommand{\lkVcolormapMT}	{\ahlink{\VcolormapMT}{viewer:viewercolormapmanager}}
\newcommand{\lkVcolormapMTs}
{\ahlink{\VcolormapMTs}{viewer:viewercolormapmanager}}

\newcommand{\VdataMT}	{Viewerdatamanager {\tt tool}}
\newcommand{\VdataMTs}	{Viewerdatamanager {\tt tools}}
\newcommand{\lkVdataMT}	{\ahlink{\VdataMT}{viewer:viewerdatamanager}}


\newcommand{\vdd}		{Viewerdisplaydata}
\newcommand{\ndd}		{Viewerdisplaydata}
\newcommand{\ndds}		{Viewerdisplaydatas}
\newcommand{\VdisplaydataT}	{Viewerdisplaydata {\tt tool}}
\newcommand{\VdisplaydataTs}	{Viewerdisplaydata {\tt tools}}
\newcommand{\lkVdisplaydataT}   {\ahlink{\VdisplaydataT}{viewer:viewerdisplaydata}}
\newcommand{\lkVdisplaydataTs}  {\ahlink{\VdisplaydataTs}{viewer:viewerdisplaydata}}

\newcommand{\vdp}		{Viewerdisplaypanel}
\newcommand{\ndp}		{Viewerdisplaypanel}
\newcommand{\ndps}		{Viewerdisplaypanels}
\newcommand{\VdisplaypanelT}	{Viewerdisplaypanel {\tt tool}}
\newcommand{\VdisplaypanelTs}	{Viewerdisplaypanel {\tt tools}}
\newcommand{\VannotationsT} 	{Viewerannotations {\tool tool}}

\newcommand{\lkVdisplaypanelT}  {\ahlink{\VdisplaypanelT}{viewer:viewerdisplaypanel}}
\newcommand{\lkVdisplaypanelTs} {\ahlink{\VdisplaypanelTs}{viewer:viewerdisplaypanel}}

\newcommand{\VslicedpT}	{Viewerslicepanel {\tt tool}}
\newcommand{\VslicedpTs}	{Viewerslicepanel {\tt tools}}
\newcommand{\lkVslicedpT}  {\ahlink{\VslicedpT}{viewer:viewerslicedp}}
\newcommand{\lkVslicedpTs} {\ahlink{\VslicedpTs}{viewer:viewerslicedp}}

\newcommand{\bigheading}[1]     {\bigskip {\bf #1} \bigskip}
\newcommand{\medheading}[1]     {\medskip {\em #1} \medskip}


\begin{ahmodule}{viewer}{Viewing \images\ and \glish\ arrays}

\ahinclude{viewer.g}

\begin{ahdescription}

The {\tt viewer} module provides display services.  It can produce
false color image, contour and vector map representations of \aipspp\
images and \glish\ arrays, rendered either on-screen or to PostScript
files.  Extensive control over the display of data is available from
both graphical user and programming (command-line) interfaces.

The most important \tool\ in this module is the \lkVT, which
combines a number of the other \tools\ in the module to produce
a cohesive application, operable from the command-line or from
multiple windows in a \guilong.  Most display services can be
accessed directly from the \VT.  

An example on how to operate the \VT\ from the command-line can be
found \htmlref{here}{viewer:example1}.

\noindent In general, there should be little need to read
documentation on the other \tools\ in this module.  However, for
reference purposes and if you want to integrate the \lkVT\ into your
own application/script take a closer look at the
\htmlref{description}{viewer:tools} of the \tools\ which are part of
this module.

Most of the \tools\ in this module can be driven by \guilongs.  This
documentation starts with a general description of how to use these
\guishorts\ to interact with the \lkVT.  You really only need to know
about the \guishorts\ which the \VT\ provides access to:
\begin{enumerate}
\item The \guishort\ which controls the import of data, the  \lkVdataMT
\item The \guishort\ which controls your \htmlref{display}{viewer:vdpgui}
\end{enumerate}

A list of aipsrc setting to customize the Viewer can be found in the
\htmlref{Resources}{viewer:aipsrcres} section.


Ok - here a little sitemap for this module:
\begin{itemize}
\item{\bf Toolkit approach} go \htmlref{here}{viewer:tools}

\item{\bf \guishort\ functionality} look here for the
\htmlref{\VdisplaypanelT}{viewer:vdpgui} and the \lkVdataMT.

\item{\bf Customization}  look \htmlref{here}{viewer:aipsrcres}

\item{\bf Viewer - behind the scenes} look \htmlref{here}{viewer:fund}

\item{\bf CLI example}  look \htmlref{here}{viewer:example1}.

\end{itemize}

\subsubsection*{Fundamentals}
\label{viewer:fund}
\medheading{Displaydatas}

The main task of the \lkVT\ is to produce visual representations of
\aipspp\ data.  Presently, the data itself may be an \aipspp\
\image\ stored on disk, or a \glish\ array, while the visual
representation can be a false color image (hereafter a "raster"), or a
contour map (hereafter a "contour").  One of the two fundamental
\tools\ that the \VT\ is built upon is the \lkVdisplaydataT.  This
\tool\ combines a data source and a representation method into a
single unit which can be passed around the various \tools\ which are
managed by a single \VT.

A \VdisplaydataT\ is completely self-contained, and has "state".  Its
state consists of various attributes, some of which will not change
during the lifetime of the \VdisplaydataT, and many others which
probably will.  Examples of unchangeable state include the
dimensionality of the \image\ or \glish\ array, and the type of visual
representation requested: a raster or a contour.  Examples of
changeable state include the many attributes which describe how the
data should be translated into the requested represetation, such as
the "colormap" (see below) to use for a raster, or the contour levels
to use for a contour \VdisplaydataT.  The changeable state of a
\VdisplaydataT\ can be modified from the command-line or in a \guilong.  
{\bf Many \VdisplaydataTs\ can be created and managed by a single \VT.}

\medheading{Displaypanels}

The \lkVdisplaypanelT\ provides one ore more "canvas(es)" on which one
or more \lkVdisplaydataTs\ can draw themselves, and is the second
fundamental \tool\ upon which the \lkVT\ is built.  This \tool\
provides facilities for \VdisplaydataTs\ to register and unregister
themselves, that is, to join and leave the list of \VdisplaydataTs\
that will get asked to draw themselves whenever the canvas is redrawn.
Furthermore, it provides a "controlbox" of operations which can be
applied to the canvas, for example, zooming (magnifying) the display.
Finally, each \VdisplaypanelT\ has two "managers" associated with it:
a \VcanvasMT\ which provides the facility to modify some of the
canvas-specific settings (for example, background color, margin
widths, and the number of panels), and a \VcanvasprintMT\ which can be
used to generate PostScript and X11 Pixmap output from the contents of
the \VdisplaypanelT.  {\bf Many \VdisplaypanelTs\ can be created and
managed by a single \VT.}

\medheading{Options} One of the most important concepts of the \VT\ is
the way states and attributes are set.  {\tt tools} like
\lkVdisplaydataT\ and \lkVdisplaypanelT\ have functions {\em
getoptions} and {\em setoptions} to control these ``options''.  For
example, the state of a \lkVdisplaydataT\ is held in an option
record.  The documentation of each \tool\ summarizes it's options which
can be controlled by the user.

Let's say you have made a \VdisplaydataT\ as a raster and you want to
know the options on this displaydata, you would to something like
this:
\begin{verbatim}
dd := dv.loaddata('myfantasticimage','raster');
opts := dd.getoptions();
print field_names(opts);
\end{verbatim}
These options are usually context dependent, i.e.\ an option record
for a ``raster'' \VdisplaydataT\ is different from a ``contour''
\VdisplaydataT\ option record.


\medheading{Colormaps}

The display of rasters requires that the pixel values in a data source
be mapped to colors selected from a pre-defined set of colors, or a
"colormap."  The \lkVT\ provides colormaps via the \lkVcolormapMT, and
there is one and only one \VcolormapMT\ per \VT.  Sixteen unique
colormaps are available.  Whilst generation of new colormaps by the
user or \glish\ programmer is not available yet, the existing
colormaps can be modified in several ways by directly using the
\VcolormapMT, or its \guilong.  The usual "slope-shift" colormap 
fiddling is provided, together with "contrast-brightness" fiddling.
Both of these are also available from the controlbox of
\lkVdisplaypanelTs.  Further capabilities (available via only the
\VcolormapMT) include the independent inversion of the red, green 
and blue components of the colors in the colormap.

\VT\ colormaps are entities which can be used by on many 
\VdisplaypanelTs\ concurrently, and which share color resources
when possible.  They automatically resize themselves to use as many
colors as they can, based both on the number of colors that the
various \VdisplaypanelTs\ are set up to use, and on the number (and
weightings) of other \VT\ colormaps that are in use.  For this reason,
when multiple \VdisplaypanelTs\ are in use, registering or
unregistering a raster-type \VdisplaydataT\ on one \VdisplaypanelT\
may well cause other \VdisplaypanelTs\ to refresh, as more or less
colors become available for other colormaps in use.  The programmer
can reduce the resulting ``flickering'' by ``holding'' and
``releasing'' the \VTs\ that are in use.  The user can control the
number of colors that the various \VdisplaypanelTs\ are setup to use,
and can modify the \VT\ colormaps themselves, by fiddling and
inverting components.

\begin{quotation}{\small 
\noindent Advanced note: The \VT\ inserts a software layer above the
hardware colormap of the screen in use.  This is so that the user can
choose to have as many colors as possible for the \VdisplaypanelTs,
knowing they will get color flashing, or instead to use the system
colormap, which invariably will limit the number of colors that are
used by the \VT, but will prevent color flashing.  Indeed, for a
single \VT, multiple \VdisplaypanelTs\ can be used: some of these may
use "private" colormaps, and others may use the system colormap.

Once a \VdisplaypanelT\ is on the screen, you cannot change whether it
is using the system colormap or a private colormap.  You {\em can},
however, change the number of colors it is actually making use of in
its colormap.  This can be useful in two ways: firstly, sometimes
rasters look better if you use fewer colors and sometimes look better
with more colors: so with this feature, you can dynamically reduce or
increase the "smoothness" (in colorspace) of raster images.  Secondly,
let's say we made a \VdisplaypanelT\ and asked it to use the system
colormap: that is, we were happy to have fewer colors so that we could
avoid color flashing.  Sometime later, we start up a (non-\aipspp)
image viewing program on the same screen, and because the system
colormap is nearly over-subscribed, partly by the \VdisplaypanelT,
this external program decides to use a private colormap.  This might
not be satisfactory, so you can actually close that program, reduce
the number of colors being used by your \VdisplaypanelT\ (via a
\guilong\ perhaps), and then re-start the external program.  {\em You
did not have to close the \VdisplaypanelT\ to accomplish this!}  

While a single \VT\ can have many \VdisplaypanelTs\ operating, it
only ever has one \VcolormapMT, whose colormaps are shared by all the
\VdisplaypanelTs.   \VdisplaypanelTs\ which are
using the system X colormap (ie.\ that aren't causing color flashing)
actually all share one contiguous section of the system X colormap.
Whatever \VT\ colormaps are needed are placed in this block of color
cells, usually uniformly distributed.  For example, suppose I have two
\VdisplaypanelTs\ on screen, both using the same 80 cells of the
system X colormap.  If they both have raster \VdisplaydataTs\
registered for display, each of which has its own (different)
\VT\ colormap (say one is using "Rainbow 4" and the other "Hot
Metal 2"), then each of the \VT\ colormaps will get 40 cells each.
The "Rainbow 4" colormap can be fiddled and inverted to your hearts
content without ever affecting the raster drawn with the "Hot Metal 2"
colormap.  If I close one of the \VdisplaypanelTs, the other one will
notice this, and stretch the colormap it is using back out to fill the
80 cells.  Conversely, if I open another \VdisplaypanelT\ using the
system X colormap, and display yet another raster using yet another
\VT\ colormap, the three required colormaps will be packed into the 80
cells (having lengths 27, 27 and 26).

Let's say, however, that with the two system X colormap
\VdisplaypanelTs\ still open, I make a third \VdisplaypanelT, but ask
that it use a {\em private}\/ colormap.  I'm going to get color
flashing, but I'm also going to get way more than 80 colors: I'll
probably get around 250 on an 8-bit system, and around 1000 on a
10-bit system.  If I go and register a third raster \VdisplaydataT\ in
this \VdisplaypanelT, and ask it to use a different \VT\ colormap,
eg.\ "Greyscale 1", then the two existing \VdisplaypanelTs\ are {\em
not}\/ affected, and the "Greyscale 1" colormap will fill the 250 (or
more) colors available in the third \VdisplaypanelT.  But this
"Greyscale 1" colormap can be mapped into more than one X colormap!
So if I choose this colormap to be used for one of the first two
\VdisplaydataTs, then it will replace, say, "Rainbow 4", in the 80
cells of the system X colormap we are using, but it will remain
occupying 250 cells in the private colormap \VdisplaypanelT.  Yet they
are the same \VT\ colormap, so modifying the "Greyscale 1" colormap in
any way, either via the \VcolormapMT, its \guilong, or a
\VdisplaypanelT\ controlbox, will cause equivalent changes in the
display of both rasters that are being drawn with "Greyscale 1".

} \end{quotation}

\end{ahdescription}
\subsubsection*{Resources}
\label{viewer:aipsrcres}

The \VT\ looks for and recognizes a number of variables in the system
and user {\tt .aipsrc} files.  They are listed in
\ahlink{aipsrcdata}{aipsrcdata:viewer}.

%%%%%%%
%% Taken out until they work properly
%%
%%\item{{\tt viewer.scrollwidth}, whose value is an integer indicating
%%the maximum width for a \VdisplaypanelT\ ({\em at construction time})
%%before a horizontal scrollbar is provided.  The default value is 800
%%(pixels).}
%%
%%\item{{\tt viewer.scrollheight}, whose value is an integer indicating
%%the maximum height for a \VdisplaypanelT\ ({\em at construction time})
%%before a vertical scrollbar is provided.  The default value is 600
%%(pixels).}
%%%%%%

\subsubsection*{{\tt Tools} in this module}
\label{viewer:tools}
\begin{itemize}

\item The \VanimatorT, providing
services to (manually or automatically) step through multi-dimensional
images.

\item The \lkVcanvasMT, which
provides services to control the appearance of the canvases owned by
\VdisplaypanelTs.

\item The \lkVcanvasprintMT,
which provides printing services to for the canvases of
\VdisplaypanelTs.  

\item The \lkVcolormapMT, which
is used to generate and modify colormaps for use by other \tools\ in
this module.

\item The \VdataMT, which provides a simple \guilong\ for 
constructing and destroying \VdisplaydataTs from files and \tools.

\item The \lkVdisplaydataT, which
is used to render false color images or contour maps from various data
sources (\aipspp\ \images\ or \glish\ arrays).  To become visible to
the user, \VdisplaydataTs\ must be registered with one or more
\VdisplaypanelTs, but they can be created, manipulated and destroyed
without ever being registered.  More generally, the \VdisplaydataT\
embodies some data source, and some method for drawing that data.

\item The \lkVdisplaypanelT, whose
fundamental purpose is to provide a "canvas" on which \VdisplaydataTs\ 
can draw themselves.  This \tool\ is where users should expect to see
their data displayed.

\item The \ahlink{Viewerannotations tool}{viewer:viewerannot} which can be used to annotate display panels. 

\item The \lkVslicedpT, which provides 3D slicing
capabilities.  Apart from this the interface is very similar to the
\lkVslicedpT.

\end{itemize}

\begin{ahexample}
\label{viewer:example1}

Here is a trivial example to give you the flavour of using a \VT.
Suppose we have an \aipspp\ image on disk and wish to view it on the
screen then generate a "quick" PostScript file of the image, with 
axis labels:

\begin{verbatim}
- include 'viewer.g';                                                 # 1
- mdd := dv.loaddata('myaips++image', 'raster');                      # 2
- mdd.setoptions([axislabelswitch=T]);                                # 3
- mdp := dv.newdisplaypanel();                                        # 4
- mdp.register(mdd);                                                  # 5
- mdp.canvasprintmanager().writeps('mydiskimage.ps', dpi=300);        # 6
- mdd.done();                                                         # 7
- mdp.done();                                                         # 8
\end{verbatim}

\begin{enumerate}
    \item This gives us access to the \lkVT\ code, and in particular,
	the {\bf defaultviewer} \tool.
    \item Create a \lkVdisplaydataT\ which is a raster representation of 
	the \aipspp\ \image\ with the given name.
    \item Turn axis labelling on.
    \item Create a \lkVdisplaypanelT\ for rendering.
    \item Register the {\bf mdd} \VdisplaydataT\ on the {\bf mdp}
	\VdisplaypanelT.  At this point, the raster should now
 	be visible somewhere on your screen.
    \item Print a copy of the raster on the screen to the
 	named PostScript file, at a nice high resolution of 300 dots
	per inch.
    \item Destroy the \VdisplaydataT.
    \item Destroy the \VdisplaypanelT.
\end{enumerate}
\end{ahexample}

\ahobjs{}
\ahfuncs{}

\input{viewertool.help}

\input{viewercanvasmanager.help}

\input{viewercanvasprintmanager.help}

\input{viewercolormapmanager.help}

\input{viewerdisplaydata.help}

\input{viewerdisplaypanel.help}

\input{viewerslicedp.help}

\input{viewerstandardgui.help}

\input{viewerdatamanager.help}

\input{viewerannotations.help}

\input{skycatalog.help}


\begin{ahfunction}{is\_viewer}{Is the argument a viewer tool?}
  \ahkeyword{is\_viewer}{is\_viewer}
  \begin{ahdescription}
    This global function can be used to determine if the supplied
    argument is a viewer tool.  If so it returns True, otherwise 
    it returns False.
  \end{ahdescription}
  \begin{ahargs}
    \ahaddarg{tool}{The variable that you wish to test}
             {no default}{Any glish variable}
  \end{ahargs}

  \ahreturns{T or F, indicating if the argument is a viewer
             tool or not.}
  \begin{ahexample}
    \begin{verbatim}
      include 'viewer.g';
      if (is_viewer(dv)) {
        myviewer := dv;
      } else {
        myviewer := viewer();
      }
    \end{verbatim}
  \end{ahexample}
  \begin{ahcomments}
    This example shows how you can use this function to determine if
    the default viewer (dv) is a viewer tool.
  \end{ahcomments}
\end{ahfunction}

\end{ahmodule}
\end{document}
