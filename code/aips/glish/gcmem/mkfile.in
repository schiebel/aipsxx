## $Id: mkfile.in,v 19.0 2003/07/16 05:17:29 aips2adm Exp $
##
## Makefile for gcmem library.
##

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@

MK_LIB = @MAKE_LIB@
LD_LIBS = 
CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
GSUFFIX = @GLISH_LIB_SUFFIX@
RANLIB = @RANLIB@
INSTALL_LIBRARY = $(INSTALL_DATA)

CC = @CC@
CPLUS = @CXX@
LIBS = @LIBS@

D = @DOT@
T = @TOUCH_PROXY@
MINSPACE_RM = @MINSPACE_RM@

SHELL = /bin/sh
SH = $(SHELL)

RM = rm -f

SRC = ..
H = $(SRC)/include/gcmem
SDSINC = -I$(SRC)/include

top = @top_srcdir@@top_off@
INCDIR_P = $(top)/include
LIBDIR_P = $(top)/lib/$(ARCH)

prefix = @prefix@
exec_prefix = @exec_prefix@
INCDIR = @includedir@
LIBDIR = @libdir@

GCFLAGS = -DATOMIC_UNCOLLECTABLE -DNO_SIGNALS \
	  -DNO_EXECUTE_PERMISSION -DSMALL_CONFIG -DSILENT \
	  -DATOMIC_UNCOLLECTABLE -DREDIRECT_MALLOC=GC_malloc_atomic_uncollectable \
	  -DDONT_ADD_BYTE_AT_END

# Setjmp_test may yield overly optimistic results when compiled
# without optimization.
# -DSILENT disables statistics printing, and improves performance.
# -DCHECKSUMS reports on erroneously clear dirty bits, and unexpectedly
#   altered stubborn objects, at substantial performance cost.
#   Use only for incremental collector debugging.
# -DFIND_LEAK causes the collector to assume that all inaccessible
#   objects should have been explicitly deallocated, and reports exceptions.
#   Finalization and the test program are not usable in this mode.
# -DSOLARIS_THREADS enables support for Solaris (thr_) threads.
#   (Clients should also define SOLARIS_THREADS and then include
#   gc.h before performing thr_ or dl* or GC_ operations.)
#   Must also define -D_REENTRANT.
# -D_SOLARIS_PTHREADS enables support for Solaris pthreads.
#   Define SOLARIS_THREADS as well.
# -DIRIX_THREADS enables support for Irix pthreads.  See README.irix.
# -DLINUX_THREADS enables support for Xavier Leroy's Linux threads.
#   see README.linux.  -D_REENTRANT may also be required.
# -DALL_INTERIOR_POINTERS allows all pointers to the interior
#   of objects to be recognized.  (See gc_priv.h for consequences.)
# -DSMALL_CONFIG tries to tune the collector for small heap sizes,
#   usually causing it to use less space in such situations.
#   Incremental collection no longer works in this case.
# -DLARGE_CONFIG tunes the collector for unusually large heaps.
#   Necessary for heaps larger than about 500 MB on most machines.
#   Recommended for heaps larger than about 64 MB.
# -DDONT_ADD_BYTE_AT_END is meaningful only with
#   -DALL_INTERIOR_POINTERS.  Normally -DALL_INTERIOR_POINTERS
#   causes all objects to be padded so that pointers just past the end of
#   an object can be recognized.  This can be expensive.  (The padding
#   is normally more than one byte due to alignment constraints.)
#   -DDONT_ADD_BYTE_AT_END disables the padding.
# -DNO_SIGNALS does not disable signals during critical parts of
#   the GC process.  This is no less correct than many malloc 
#   implementations, and it sometimes has a significant performance
#   impact.  However, it is dangerous for many not-quite-ANSI C
#   programs that call things like printf in asynchronous signal handlers.
# -DNO_EXECUTE_PERMISSION may cause some or all of the heap to not
#   have execute permission, i.e. it may be impossible to execute
#   code from the heap.  Currently this only affects the incremental
#   collector on UNIX machines.  It may greatly improve its performance,
#   since this may avoid some expensive cache synchronization.
# -DOPERATOR_NEW_ARRAY declares that the C++ compiler supports the
#   new syntax "operator new[]" for allocating and deleting arrays.
#   See gc_cpp.h for details.  No effect on the C part of the collector.
#   This is defined implicitly in a few environments.
# -DREDIRECT_MALLOC=X causes malloc, realloc, and free to be defined
#   as aliases for X, GC_realloc, and GC_free, respectively.
#   Calloc is redefined in terms of the new malloc.  X should
#   be either GC_malloc or GC_malloc_uncollectable.
#   The former is occasionally useful for working around leaks in code
#   you don't want to (or can't) look at.  It may not work for
#   existing code, but it often does.  Neither works on all platforms,
#   since some ports use malloc or calloc to obtain system memory.
#   (Probably works for UNIX, and win32.)
# -DIGNORE_FREE turns calls to free into a noop.  Only useful with
#   -DREDIRECT_MALLOC.
# -DNO_DEBUGGING removes GC_dump and the debugging routines it calls.
#   Reduces code size slightly at the expense of debuggability.
# -DJAVA_FINALIZATION makes it somewhat safer to finalize objects out of
#   order by specifying a nonstandard finalization mark procedure  (see
#   finalize.c).  Objects reachable from finalizable objects will be marked
#   in a sepearte postpass, and hence their memory won't be reclaimed.
#   Not recommended unless you are implementing a language that specifies
#   these semantics.
# -DFINALIZE_ON_DEMAND causes finalizers to be run only in response
#   to explicit GC_invoke_finalizers() calls.
# -DATOMIC_UNCOLLECTABLE includes code for GC_malloc_atomic_uncollectable.
#   This is useful if either the vendor malloc implementation is poor,
#   or if REDIRECT_MALLOC is used.
# -DHBLKSIZE=ddd, where ddd is a power of 2 between 512 and 16384, explicitly
#   sets the heap block size.  Each heap block is devoted to a single size and
#   kind of object.  For the incremental collector it makes sense to match
#   the most likely page size.  Otherwise large values result in more
#   fragmentation, but generally better performance for large heaps.
# -DUSE_MMAP use MMAP instead of sbrk to get new memory.
#   Works for Solaris and Irix.
# -DMMAP_STACKS (for Solaris threads) Use mmap from /dev/zero rather than
#   GC_scratch_alloc() to get stack memory.
# -DPRINT_BLACK_LIST Whenever a black list entry is added, i.e. whenever
#   the garbage collector detects a value that looks almost, but not quite,
#   like a pointer, print both the address containing the value, and the
#   value of the near-bogus-pointer.  Can be used to identifiy regions of
#   memory that are likely to contribute misidentified pointers.
# -DOLD_BLOCK_ALLOC Use the old, possibly faster, large block
#   allocation strategy.  The new strategy tries harder to minimize
#   fragmentation, sometimes at the expense of spending more time in the
#   large block allocator and/or collecting more frequently.
#   If you expect the allocator to promtly use an explicitly expanded
#   heap, this is highly recommended.
#

MKHIER = $(top)/config/mkhier

INCLUDE = -I. -I$(SRC) -I$(SRC)/include -I$(INCDIR_P)
CINCLUDE = -I. -I$(SRC) -I$(SRC)/include -I$(INCDIR_P)

OBJS =	gcmem.o gc_cpp.o allchblk.o alloc.o blacklst.o checksums.o \
	dbg_mlc.o dyn_load.o finalize.o headers.o irix_threads.o linux_threads.o \
	malloc.o mallocx.o mark.o mark_rts.o misc.o new_hblk.o obj_map.o os_dep.o \
	ptr_chck.o reclaim.o solaris_pthreads.o solaris_threads.o stubborn.o \
	typd_mlc.o @GC_MACH_DEP@

OBJS_PROXY = $(D)gcmem.o $(D)gc_cpp.o $(D)allchblk.o $(D)alloc.o \
	$(D)blacklst.o $(D)checksums.o $(D)dbg_mlc.o $(D)dyn_load.o $(D)finalize.o \
	$(D)headers.o $(D)irix_threads.o $(D)linux_threads.o $(D)malloc.o $(D)mallocx.o \
	$(D)mark.o $(D)mark_rts.o $(D)misc.o $(D)new_hblk.o $(D)obj_map.o $(D)os_dep.o \
	$(D)ptr_chck.o $(D)reclaim.o $(D)solaris_pthreads.o $(D)solaris_threads.o \
	$(D)stubborn.o $(D)typd_mlc.o $(D)@GC_MACH_DEP@

HDRS = $(INCDIR)/gcmem/ref.h $(INCDIR)/gcmem/alloc.h $(INCDIR)/gcmem/gc.h $(INCDIR)/gcmem/gc_cpp.h

#IF GC
LIBTGT = @STATIC_LIB@
INSTALL_LIBTGT = INSTALL_@STATIC_LIB@
#ELSE
LIBTGT = 
INSTALL_LIBTGT = $(INCDIR)/gcmem $(INCDIR)/gcmem/alloc.h $(INCDIR)/gcmem/ref.h
#FI

TAR_FILE = gcmem.tar

all: $(LIBTGT)

install: $(INSTALL_LIBTGT)

lib_tgt: $(LIBDIR_P)/libgcmem$(GSUFFIX)

INSTALL_lib_tgt: $(LIBDIR)/libgcmem$(GSUFFIX) $(INCDIR)/gcmem $(HDRS)

libs: libgcmem$(GSUFFIX)

libgcmem$(GSUFFIX): $(OBJS_PROXY)
	$(RM) libgcmem$(GSUFFIX)
	$(MK_LIB) libgcmem$(GSUFFIX) $(OBJS) $(LD_LIBS)
	$(RANLIB) libgcmem$(GSUFFIX)
	$(MINSPACE_RM) $(OBJS)

$(LIBDIR_P)/libgcmem$(GSUFFIX): libgcmem$(GSUFFIX)
	$(MKHIER) $(LIBDIR_P)
	$(INSTALL_LIBRARY) libgcmem$(GSUFFIX) $(LIBDIR_P)
	$(RANLIB) $(LIBDIR_P)/libgcmem$(GSUFFIX)

$(LIBDIR)/libgcmem$(GSUFFIX): libgcmem$(GSUFFIX)
	$(MKHIER) $(LIBDIR)
	$(INSTALL_LIBRARY) libgcmem$(GSUFFIX) $(LIBDIR)
	$(RANLIB) $(LIBDIR)/libgcmem$(GSUFFIX)

tar:
	@rm -f $(TAR_FILE).Z tar-files
	@$(MAKE) $(MFLAGS) tar-list >tar-files
	tar cf $(TAR_FILE) -I tar-files
	compress $(TAR_FILE)
	@rm -f tar-files

tar-list:
	@echo gcmem >&2
	@ls Makefile.in *.cc include/gcmem/*.h

rcsinfo:
	@echo gcmem
	@rlog -L RCS/*,v | sed -n -e 's/Working file://p' -e 's/locked by//p'
	@echo sds/include/Sds
	@cd include/Sds;rlog -L RCS/*,v | sed -n -e 's/Working file://p' -e 's/locked by//p'

clean:
	@rm -f errs $(OBJS_PROXY) *.o *~* $(APPS) core a.out *$(GSUFFIX) ../$(TAR_FILE).Z

distclean: clean
	rm -f config.status config.cache config.h Makefile

##
## use -DNO_MIXED_SELECT to avoid mixing gc_gcollect() and select()
##
$(D)gcmem.o: $(SRC)/gcmem.cc $(H)/alloc.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) -c $(SRC)/gcmem.cc $(T)

$(D)gc_cpp.o: $(SRC)/gc_cpp.cc $(H)/gc.h $(H)/gc_cpp.h
	$(CPLUS) $(INCLUDE) $(CXXFLAGS) $(GCFLAGS) -c $(SRC)/gc_cpp.cc $(T)

$(D)allchblk.o: $(SRC)/allchblk.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/allchblk.c $(T)

$(D)alloc.o: $(SRC)/alloc.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/alloc.c $(T)

$(D)blacklst.o: $(SRC)/blacklst.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/blacklst.c $(T)

$(D)checksums.o: $(SRC)/checksums.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/checksums.c $(T)

$(D)dbg_mlc.o: $(SRC)/dbg_mlc.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/dbg_mlc.c $(T)

$(D)dyn_load.o: $(SRC)/dyn_load.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/dyn_load.c $(T)

$(D)finalize.o: $(SRC)/finalize.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/finalize.c $(T)

$(D)headers.o: $(SRC)/headers.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/headers.c $(T)

$(D)irix_threads.o: $(SRC)/irix_threads.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/irix_threads.c $(T)

$(D)linux_threads.o: $(SRC)/linux_threads.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/linux_threads.c $(T)

$(D)malloc.o: $(SRC)/malloc.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/malloc.c $(T)

$(D)mallocx.o: $(SRC)/mallocx.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/mallocx.c $(T)

$(D)mark.o: $(SRC)/mark.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/mark.c $(T)

$(D)mark_rts.o: $(SRC)/mark_rts.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) @GC_LOW_OPT@ -c $(SRC)/mark_rts.c $(T)

$(D)misc.o: $(SRC)/misc.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/misc.c $(T)

$(D)new_hblk.o: $(SRC)/new_hblk.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/new_hblk.c $(T)

$(D)obj_map.o: $(SRC)/obj_map.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/obj_map.c $(T)

$(D)os_dep.o: $(SRC)/os_dep.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/os_dep.c $(T)

$(D)ptr_chck.o: $(SRC)/ptr_chck.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/ptr_chck.c $(T)

$(D)reclaim.o: $(SRC)/reclaim.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/reclaim.c $(T)

$(D)solaris_pthreads.o: $(SRC)/solaris_pthreads.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/solaris_pthreads.c $(T)

$(D)solaris_threads.o: $(SRC)/solaris_threads.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/solaris_threads.c $(T)

$(D)stubborn.o: $(SRC)/stubborn.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/stubborn.c $(T)

$(D)typd_mlc.o: $(SRC)/typd_mlc.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/typd_mlc.c $(T)

$(D)mach_dep.o: $(SRC)/mach_dep.c $(H)/gc.h
	$(CC) $(CINCLUDE) $(CFLAGS) $(GCFLAGS) -c $(SRC)/mach_dep.c $(T)

$(D)mips_sgi_mach_dep.o: $(SRC)/mips_sgi_mach_dep.s
	$(AS) -o mips_sgi_mach_dep.o $(SRC)/mips_sgi_mach_dep.s

$(D)mips_ultrix_mach_dep.o: $(SRC)/mips_ultrix_mach_dep.s
	$(AS) -o mips_ultrix_mach_dep.o $(SRC)/mips_ultrix_mach_dep.s

$(D)rs6000_mach_dep.o: $(SRC)/rs6000_mach_dep.s
	$(AS) -o rs6000_mach_dep.o $(SRC)/rs6000_mach_dep.s

$(D)alpha_mach_dep.o: $(SRC)/alpha_mach_dep.s
	$(AS) -o alpha_mach_dep.o $(SRC)/alpha_mach_dep.s

$(D)sparc_mach_dep.o: $(SRC)/sparc_mach_dep.s
	$(AS) -o sparc_mach_dep.o $(SRC)/sparc_mach_dep.s

$(D)sparc_sunos4_mach_dep.o: $(SRC)/sparc_sunos4_mach_dep.s
	$(AS) -o sparc_sunos4_mach_dep.o $(SRC)/sparc_sunos4_mach_dep.s

##
## Include files
##
$(INCDIR)/gcmem:
	$(MKHIER) $(INCDIR)/gcmem

$(INCDIR)/gcmem/ref.h: $(H)/ref.h
	rm -f $@ 
	cp $(H)/ref.h $@

$(INCDIR)/gcmem/alloc.h: $(H)/alloc.h
	rm -f $@ 
	cp $(H)/alloc.h $@

$(INCDIR)/gcmem/gc_cpp.h: $(H)/gc_cpp.h
	rm -f $@ 
	cp $(H)/gc_cpp.h $@

$(INCDIR)/gcmem/gc.h: $(H)/gc.h
	rm -f $@ 
	cp $(H)/gc.h $@

INSTALL_:

