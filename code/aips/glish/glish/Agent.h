// $Id: Agent.h,v 19.12 2004/11/03 20:38:57 cvsmgr Exp $
// Copyright (c) 1993 The Regents of the University of California.
// Copyright (c) 1997,1998 Associated Universities Inc.
#ifndef agent_h
#define agent_h

#include "Stmt.h"
#include "Glish/Client.h"

class IValue;
class Sequencer;
class Frame;
class Task;
class Agent;
class NotifyTrigger;
class stack_type;
class ProxyTask;
class ProxyId;

typedef const char const_char;
glish_declare(PList,const_char);
typedef PList(const_char) string_list;

glish_declare(PList,Agent);
typedef PList(Agent) agent_list;

glish_declare(PList,ProxyTask);
typedef PList(ProxyTask) proxytask_list;

class Notifiee : public GlishRef {
    public:
	Notifiee( Stmt* arg_stmt, Sequencer* );
	Notifiee( Stmt* arg_stmt, Frame* arg_frame, Sequencer* );
	Notifiee( Stmt* arg_stmt, stack_type *arg_stack, Sequencer* );
	~Notifiee();
	Stmt *stmt() { return stmt_; }
	Frame *frame() { return frame_; }
	stack_type *stack() { return stack_; }
    protected:
	Notifiee( const Notifiee & );
	Notifiee &operator=( const Notifiee & );
	Stmt* stmt_;
	Frame* frame_;
	stack_type *stack_;
	Sequencer *sequencer;
	};

glish_declare(PList,Notifiee);
typedef PList(Notifiee) notifiee_list;

glish_declare(PDict,notifiee_list);
typedef PDict(notifiee_list) notification_dict;

glish_declare(PDict,agent_list);
typedef PDict(agent_list) agent_dict;
extern void delete_agent_dict( agent_dict * );

class Agent : public GlishObject {
    public:
	enum State { sINITIAL, sACTIVE, sFINISHED };

	static inline u_long mLOG( u_int mask=~((u_long) 0) ) { return mask & 1<<0; }
	static inline u_long mOVERRIDE( u_int mask=~((u_long) 0) ) { return mask & 1<<1; }

	Agent( Sequencer* s, int DestructLast=0 );
	virtual ~Agent();

	virtual void SetActivity( State );
	void SetActive()	{ SetActivity( sACTIVE ); }
	void SetFinished()	{ SetActivity( sFINISHED ); }

	// True for a Task if a .established has been seen; different
	// from Exec()->Active(), which is true if the executable has
	// be fired up and hasn't terminated yet
	int Active() const		{ return active == sACTIVE; }
	int Finished() const		{ return active == sFINISHED; }

	virtual const char* Name() const { return agent_ID ? agent_ID : "<agent>"; }

	// Send the given event/value list or pair to the event agent.
	// If is_request is true then this is a request/response event,
	// and the response value is returned; otherwise nil is returned.
	// If log is true and the sequencer is logging events, then
	// the event is logged.
	virtual IValue* SendEvent( const char* event_name, parameter_list* args,
				int is_request, u_long flags, Expr *from_subsequence=0 ) = 0;

	// Returns non-zero on success
	virtual int BundleEvents( int howmany=0 );
	virtual int FlushEvents( );

	// Same for an event with just one value.
	void SendSingleValueEvent( const char* event_name, const IValue* value, u_long flags );

	// Creates a event/value pair associated with this agent (the
	// event is not sent to the associated agent).  Returns true
	// if there was some interest in the event, false otherwise.
	virtual int CreateEvent( const char* event_name, IValue* event_value,
				 NotifyTrigger *t=0, int preserve=0,
				 Expr *from_subsequence=0 );

	// Register the given statement as being interested in events
	// generated by this event agent.  If field is non-null then only
	// the event .field is of interest; if is_copy is true then
	// the string "field" is the event agent's own copy (and thus
	// should be deleted when the event agent is).
	void RegisterInterest( Notifiee* notifiee, const char* field = 0,
				int is_copy = 0 );

	// Undo RegisterInterest()
	void UnRegisterInterest( Stmt* s, const char* field = 0 );

	//
	// Statements to be Unref'ed when this agent goes away...
	//
	void RegisterUnref( Stmt *s );
	//
	// Avoid Unref'ing, but caller must Unref 's' if it is no
	// longer needed...
	//
	void UnRegisterUnref( Stmt *s );

	// Returns non-null if the given statement has expressed
	// interested in this Agent for the given field (or for
	// all fields). If this Agent is interested in the given
	// field, the result will be 1, but if this Agent is
	// interested in all fields, the result will be 2.
	int HasRegisteredInterest( Stmt* stmt, const char* field );

	// Returns a Value object listing this agent's "whenever"
	// statements.  The value consists of a record with two fields,
	// "event", which is a string array of event names, and
	// "stmt", the indices of the corresponding "whenever" statements.
	// Note that "event" might include more than one entry with the
	// same name; the pairs <event, stmt> are unique, though.
	//
	// The special event name "*" corresponds to statements interested
	// in all events this agent generates (e.g., "whenever foo->* do ...").
	//
	// The return Value should be Unref()'d when done with it.
	IValue* AssociatedStatements();

	// Return the Task version of this Agent, or nil if this
	// agent is not a task.
	virtual Task* AgentTask();

	const char* AgentID() const { return agent_ID ? agent_ID : "<agent>"; }
	IValue* AgentRecord()	    { return agent_value; }

	int Describe( OStream &s, const ioOpt &opt ) const;
	int Describe( OStream &s ) const
		{ return Describe( s, ioOpt() ); }

	// Sometimes the wrapper of a Task (subclass of Agent) can go
	// out-of-scope and be deleted, but the Task sticks around
	// until the client terminates (right?)
	virtual void WrapperGone( const IValue *v );

	// Called when the agent is finished. It unrefs dangling
	// statements etc.
	virtual void Done( );

	// This returns true for proxy agents...
	virtual int IsProxy( ) const;


	// This is a hack for the Tk widgets
	virtual int IsPseudo( ) const;

	virtual int IsSubsequence( ) const { return 0; }
	virtual int ReflectEvents( ) const { return 0; }

	// Should event records be kept around?
	void MarkPreserveEvents() { preserve_events = 1; }
	int PreserveEvents() const { return preserve_events; }

    protected:
	// Should the notifications generated by this agent be sticky, i.e.
	// persist through function returns. Useful for subsequences...
	virtual int StickyNotes( ) const;

	IValue* BuildEventValue( parameter_list* args, int use_refs );

	// Queues notification of those parties interested in the given
	// .field event, where "value" is the value associated with the
	// event.
	//
	// Returns true if there were some such parties, false otherwise.
	int NotifyInterestedParties( const char* field, IValue* value, NotifyTrigger *t=0,
				     int preserve=0, Expr *from_subsequence=0 );

	// Queues notification of the given Notifiee, if it's active.  Returns
	// true if the Notifiee was active, false otherwise.
	int DoNotification( Notifiee* n, const char* field, IValue* value,
				 NotifyTrigger *t=0, Expr *from_subsequence=0 );

	// Returns true if the given statement is on the given notification
	// list, false otherwise.
	int SearchNotificationList( notifiee_list* list, Stmt* stmt );

	Sequencer* sequencer;

	notification_dict interested_parties;
	string_list* string_copies;

	stmt_list unref_stmts;

	const char* agent_ID;
	IValue* agent_value;
	int preserve_events;

	State active;
	};

class ProxySource : public Agent {
    public:
	ProxySource( Sequencer *s, int DestructLast ) : Agent( s, DestructLast ) { }
	virtual IValue* SendEvent( const char* event_name, parameter_list* args,
			int is_request, u_long flags, const ProxyId &proxy_id ) = 0;
	virtual IValue* SendEvent( const char* event_name, IValue *&event_val,
			int is_request=0, u_long flags=0,
			const ProxyId &proxy_id=glish_proxyid_dummy,
			int is_bundle=0 ) = 0;

	void RegisterProxy( ProxyTask *p )
		{ if ( ! ptlist.is_member(p) ) ptlist.append( p ); }
	void UnregisterProxy( ProxyTask *p )
		{ ptlist.remove(p); }

	ProxyTask *GetProxy( const ProxyId &proxy_id );

    protected:
	proxytask_list ptlist;
};

class ProxyTask : public Agent {
    public:
	ProxyTask( const ProxyId &id_, ProxySource *t, Sequencer *s );
	~ProxyTask( );

	void SetActivity( State );

	IValue* SendEvent( const char* event_name, parameter_list* args,
				int is_request, u_long flags, Expr *from_subsequence=0 );

	// Returns non-zero on success
	int BundleEvents( int howmany=0 );
	int FlushEvents( );

	const ProxyId &Id() const { return id; }

	void WrapperGone( const IValue *v );

	int IsProxy( ) const;

	void AbnormalExit( int );

    private:
	recordptr bundle;
	int       bundle_size;

	ProxySource *task;
	ProxyId id;
};

class uagent_await_info;
glish_declare(PList,uagent_await_info);
typedef PList(uagent_await_info) uagent_await_list;

class UserAgent : public Agent {
    public:
	UserAgent( Sequencer* s, int is_subsequence_arg=0 ) : Agent(s),
	  	is_subsequence(is_subsequence_arg), reflect_events(0) { }

	// Send an event with the given name and associated values
	// to the associated user agent.
	IValue* SendEvent( const char* event_name, parameter_list* args,
			int is_request, u_long flags, Expr *from_subsequence=0 );

	int IsSubsequence( ) const { return is_subsequence; }

	int ReflectEvents( ) const { return reflect_events; }
	void SetReflect( ) { reflect_events = 1; }
	void ClearReflect( ) { reflect_events = 0; }

	IValue *AwaitReply( const char *event_name );

	int CreateEvent( const char* event_name, IValue* event_value,
			 NotifyTrigger *t=0, int preserve=0,
			 Expr *from_subsequence=0 );

    protected:
	int StickyNotes( ) const;
	int is_subsequence;
	int reflect_events;
	uagent_await_list await;
	};


class SystemAgent : public UserAgent {
    public:
	SystemAgent( Sequencer *s );
	IValue* SendEvent( const char* event_name, parameter_list* args,
				int is_request, u_long flags, Expr *from_subsequence=0 );
};

// Agents currently in existence.
extern agent_list *agents;

#endif	/* agent_h */
