%% Copyright (C) 1999
%% Associated Universities, Inc. Washington DC, USA.
%%
%% This library is free software; you can redistribute it and/or modify it
%% under the terms of the GNU Library General Public License as published by
%% the Free Software Foundation; either version 2 of the License, or (at your
%% option) any later version.
%%
%% This library is distributed in the hope that it will be useful, but WITHOUT
%% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
%% FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
%% License for more details.
%%
%% You should have received a copy of the GNU Library General Public License
%% along with this library; if not, write to the Free Software Foundation,
%% Inc., 675 Massachusetts Ave, Cambridge, MA 02139, USA.
%%
%% Correspondence concerning AIPS++ should be addressed as follows:
%%        Internet email: aips2-request@nrao.edu.
%%        Postal address: AIPS++ Project Office
%%                        National Radio Astronomy Observatory
%%                        520 Edgemont Road
%%                        Charlottesville, VA 22903-2475 USA
%%
%% $Id: vissq.help,v 19.0 2003/07/16 06:02:16 aips2adm Exp $

\begin{ahobject}{vissq}{A tool for manipulating squared-visibilities from
optical interferometers}

\ahinclude{vissq.g}

\begin{ahdescription}
\end{ahdescription}

\ahfuncs{}

\begin{ahconstructor}{vissq}{Load scan-averaged squared visibilities}

\begin{ahdescription}
This function creates a vissq tool.
\end{ahdescription}

\begin{ahargs}
  \ahaddarg{file}{File name}{}{string}
  \ahaddarg{outputbeam}{Output beam number}{}{integer}
  \ahaddarg{baselineid}{Baseline ID}{}{string}
  \ahaddarg{loadcalib}{Flag for loading calibrated data}{T}{boolean}
  \ahaddarg{format}{File format}{'HDS'}{string; 'ASCII', 'HDS', or 'TABLE'}
  \ahaddarg{host}{Host name}{''}{string}
  \ahaddarg{forcenewserver}{Force-new-server flag}{F}{boolean}
\end{ahargs}

\ahreturns{vissq tool}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
\end{verbatim}
\end{ahexample}

\begin{ahfunction}{done}{Deletes a vissq tool}

\ahkeyword{done}{done}
  
\begin{ahdescription}
This function deletes a vissq tool from glish.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{T}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
v.done();                                     # Delete the vissq tool
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{file}{Returns the file name}

\ahkeyword{file}{file}
  
\begin{ahdescription}
This function returns the file name.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{string, file name}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.file(); print x;                       # Get and print the file name
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{outputbeam}{Returns the output beam number}

\ahkeyword{outputbeam}{outputbeam}
  
\begin{ahdescription}
This function returns the output beam number.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{integer, output beam number}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.outputbeam(); print x;                 # Get and print the output beam
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{baselineid}{Returns the baseline ID}

\ahkeyword{baselineid}{baselineid}
  
\begin{ahdescription}
This function returns the baseline ID string.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{string, baseline ID}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.baselineid(); print x;                 # Get and print the baseline ID
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{baseline}{Returns the baseline number}

\ahkeyword{baseline}{baseline}
  
\begin{ahdescription}
This function returns the baseline number.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{integer, baseline number}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.baseline(); print x;                   # Get and print the baseline
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{loadcalib}{Returns the calibration flag}

\ahkeyword{loadcalib}{loadcalib}
  
\begin{ahdescription}
This function returns the calibration flag for the loaded squared visibilities.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{calibrated = T, uncalibrated = F}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.loadcalib(); print x;                  # Get and print the calibration
                                              # flag
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{format}{Returns the file format}

\ahkeyword{format}{format}
  
\begin{ahdescription}
This function returns the file format.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{string; 'ASCII', 'HDS', or 'TABLE'}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.format(); print x;                     # Get and print the file format
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{host}{Returns the host name}

\ahkeyword{host}{host}
  
\begin{ahdescription}
This function returns the host name.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{string, host name}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.host(); print x;                       # Get and print the host name
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{forcenewserver}{Returns the force-new-server flag}

\ahkeyword{forcenewserver}{forcenewserver}
  
\begin{ahdescription}
This function returns the force-new-server flag.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{force new server = T, do not force new server = F}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.forcenewserver(); print x;             # Get and print the forcenewserver
                                              # flag
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{dump}{Dumps the squared visibilities to another file}

\ahkeyword{dump}{dump}
  
\begin{ahdescription}
This function dumps the squared visibilities to another file.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{file}{Output file name}{}{string}
\ahaddarg{format}{Output format}{'HDS'}{string; 'ASCII', 'HDS', or 'TABLE'}
\end{ahargs}

\ahreturns{T or a FAIL event}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
v.dump( 'gronk.tab', 'TABLE' );               # Dump squared visibilities to
                                              # aips++ table file gronk.tab.
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
  This function may be used to convert between formats.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{load}{(Re)loads the squared visibilities}

\ahkeyword{load}{load}
  
\begin{ahdescription}
This function (re)loads the squared visibilities.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{T or a FAIL event}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
v.load();                                     # Load squared visibilities
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
  At present, this function is unnecessary, since the vissq tool cannot edit
  its own data.  This may change in the future.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{web}{Displays the vissq web page}

\ahkeyword{web}{web}
  
\begin{ahdescription}
This function displays the vissq web page in netscape.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
v.web();                                      # Displays the vissq web page
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
  At present, this function is not implemented, because there was a bug with
  early versions of netscape.  This will be remedied in the future.
\end{ahcomments}

\begin{ahfunction}{gui}{Starts the gui for the squared visibilities}

\ahkeyword{gui}{gui}
  
\begin{ahdescription}
This function starts the gui for the squared visibilities.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{T or nothing}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
v.gui();                                      # Starts the gui
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
At present, this function is not implemented.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{numspecchan}{Returns the number of spectral channels}

\ahkeyword{numspecchan}{numspecchan}
  
\begin{ahdescription}
This function returns the number of spectral channels.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{integer, number of spectral channels}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.numspecchan(); print x                 # Get and print the number of
                                              # spectral channels
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{spectrometerid}{Returns the spectrometer ID}

\ahkeyword{spectrometerid}{spectrometerid}
  
\begin{ahdescription}
This function returns spectrometer ID string.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{string, spectrometer ID}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.spectrometerid(); print x              # Get and print the spectrometer ID
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{wavelength}{Return the wavelengths}

\ahkeyword{wavelength}{wavelength}
  
\begin{ahdescription}
This function returns the wavelengths given the spectral channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 1D vector, wavelengths}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.wavelength(); print x                  # Get and print all of the
                                              # wavelengths
y := v.wavelength([1:5,10]); print x          # Get and print wavelengths for
                                              # channels 1, 2, 3, 4, 5, and 10
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in meters.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{wavelengtherr}{Return the wavelength errors}

\ahkeyword{wavelengtherr}{wavelengtherr}
  
\begin{ahdescription}
This function returns the wavelength errors given the spectral channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 1D vector, wavelength errors}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.wavelengtherr(); print x               # Get and print all of the
                                              # wavelength errors
y := v.wavelengtherr([1:5,10]); print x       # Get and print wavelength errors
                                              # for channels 1, 2, 3, 4, 5, and
                                              # 10
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in meters.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{chanwidth}{Return the channel widths}

\ahkeyword{chanwidth}{chanwidth}
  
\begin{ahdescription}
This function returns the channel widths.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 1D vector, channel widths}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.chanwidth(); print x                   # Get and print all of the
                                              # channel widths
y := v.chanwidth([1:5,10]); print x           # Get and print channel widths for
                                              # channels 1, 2, 3, 4, 5, and 10
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in meters.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{chanwidtherr}{Return the channel width errors}

\ahkeyword{chanwidtherr}{chanwidtherr}
  
\begin{ahdescription}
This function returns the channel width errors.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 1D vector, channel width errors}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.chanwidtherr(); print x                # Get and print all of the
                                              # channel width errors
y := v.chanwidtherr([1:5,10]); print x        # Get and print channel width
                                              # errors for channels 1, 2, 3, 4,
                                              # 5, and 10
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in meters.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{fringemod}{Return the fringe modulation factor}

\ahkeyword{fringemod}{fringemod}
  
\begin{ahdescription}
This function returns the fringe modulation factor.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{double, fringe modulation factor}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.fringemod(); print x                   # Get and print fringe mod factor
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
  In the sysconfig tool, there is a function called instrcohint().  This
  function returns the shortest fringe modulation time, in ms.  Typically, each
  delay line in an optical interferometer is dithering across the fringe at
  different rates.  To calculate the fringe modulation time for a given
  baseline, multiply instrcohint() times the fringe modulation factor.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{baselinevec}{Returns the baseline vectors in the uvw
coordinate system}

\ahkeyword{baselinevec}{baselinevec}
  
\begin{ahdescription}
This function returns the baseline vectors in the uvw coordinate system for a
given star ID.  In other words, it multiplies the uvw coordinates for a
specific wavelength and multiplies them by that wavelength.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\end{ahargs}

\ahreturns{double 2D array [3,numscan], where the first index is the u, v, or w
coordinate and the second is the number of scans for a given star}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.baselinevec('fkv0380'); print x        # Get and print the baseline
                                              # vectors
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in meters.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{numscan}{Return the total number of scans}

\ahkeyword{numscan}{numscan}
  
\begin{ahdescription}
This function returns the total number of scans.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{integer, total number of scans}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.numscan(); print x                     # Get and print total number of
                                              # scans
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
This number represents the total number of \textbf{successful} scans (scans
where fringes were found).
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{scan}{Returns the scan numbers}

\ahkeyword{scan}{scan}
  
\begin{ahdescription}
This function returns the scan numbers for a given star ID.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\end{ahargs}

\ahreturns{integer 1D vector, scan numbers}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.scan('fkv0380'); print x               # Get and print the scan numbers
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The scan numbers go from 1 to numscan().  numscan() represents the total number
of \textbf{successful} scans (scans where fringes were found).
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{scanid}{Returns the scan ID numbers}

\ahkeyword{scanid}{scanid}
  
\begin{ahdescription}
This function returns the scan ID numbers for a given star ID.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\end{ahargs}

\ahreturns{integer 1D vector, scan ID numbers}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.scanid('fkv0380'); print x             # Get and print scan ID numbers
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
If one or more scan attempts were unsuccessful (no fringes found), then the
scan ID for the last scan of the night will be larger than numscan().
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{scantime}{Returns the average scan times}

\ahkeyword{scantime}{scantime}
  
\begin{ahdescription}
This function returns the average scan times for a given star ID.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\end{ahargs}

\ahreturns{double 1D vector, average scan times}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.scantime('fkv0380'); print x           # Get and print average scan
                                              # times
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are seconds since the most recent UT midnight.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{ra}{Returns the right ascensions}

\ahkeyword{ra}{ra}
  
\begin{ahdescription}
This function returns the right ascensions for a given star ID.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\end{ahargs}

\ahreturns{double 1D vector, right ascensions}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.ra('fkv0380'); print x                 # Get and print right ascensions
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in decimal hour units.  Since most optical interferometry is
performed on stars that could have significant proper motion during the night,
this function returns multiple right ascensions.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{dec}{Returns the declinations}

\ahkeyword{dec}{dec}
  
\begin{ahdescription}
This function returns the declinations for a given star ID.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\end{ahargs}

\ahreturns{double 1D vector, declinations}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.dec('fkv0380'); print x                # Get and print declinations
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in decimal degree units.  Since most optical interferometry is
performed on stars that could have significant proper motion during the night,
this function returns multiple declinations.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{liststar}{Returns a list of star IDs in a file}

\ahkeyword{liststar}{liststar}
  
\begin{ahdescription}
This function returns a list of star IDs in a file.
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{string 1D vector, star IDs}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.liststar(); print x                    # Get and print list of star IDs
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{instar}{Checks if a star ID is in a file}

\ahkeyword{instar}{instar}
  
\begin{ahdescription}
This function checks if a star ID is in a file.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\end{ahargs}

\ahreturns{in = T, not in = F}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.instar('fkv0380'); print x             # Get and print instar flag
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{u}{Returns the u coordinates}

\ahkeyword{u}{u}
  
\begin{ahdescription}
This function returns the u coordinates for a given star ID and spectral
channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 2D array [numspecchan,numscan], where the first index is the
number of desired spectral channels and the second is the number of scans for
a given star}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.u('fkv0380'); print x                  # Get and print the u coordinates
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in wavelengths.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{v}{Returns the v coordinates}

\ahkeyword{v}{v}
  
\begin{ahdescription}
This function returns the v coordinates for a given star ID and spectral
channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 2D array [numspecchan,numscan], where the first index is the
number of desired spectral channels and the second is the number of scans for
a given star}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.v('fkv0380'); print x                  # Get and print the v coordinates
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in wavelengths.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{w}{Returns the w coordinates}

\ahkeyword{w}{w}
  
\begin{ahdescription}
This function returns the w coordinates for a given star ID and spectral
channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 2D array [numspecchan,numscan], where the first index is the
number of desired spectral channels and the second is the number of scans for
a given star}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.w('fkv0380'); print x                  # Get and print the w coordinates
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in wavelengths.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{uv}{Returns the uv coordinates}

\ahkeyword{uv}{uv}
  
\begin{ahdescription}
This function returns the uv coordinates for a given star ID and spectral
channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 3D array [numspecchan,2,numscan], where the first index is
the number of desired spectral channels, the second is the u or v coordinate,
and the third is the number of scans for a given star}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.uv('fkv0380'); print x                 # Get and print the uv
                                              # coordinates
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in wavelengths.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{uvw}{Returns the uvw coordinates}

\ahkeyword{uvw}{uvw}
  
\begin{ahdescription}
This function returns the uvw coordinates for a given star ID and spectral
channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 3D array [numspecchan,3,numscan], where the first index is
the number of desired spectral channels, the second is the u, v, or w
coordinate, and the third is the number of scans for a given star}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.uvw('fkv0380'); print x                # Get and print the uvw
                                              # coordinates
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
The units are in wavelengths.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{type}{Returns HDS data type}

\ahkeyword{type}{type}
  
\begin{ahdescription}
This function the HDS data type for the visibilities (it should be \_REAL).
\end{ahdescription}

\begin{ahargs}
\end{ahargs}

\ahreturns{string, HDS data type}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.type(); print x                        # Get and print HDS data type
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
Normally this function is useless, but it is kept for debugging.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{vissq}{Returns squared visibilities}

\ahkeyword{vissq}{vissq}
  
\begin{ahdescription}
This function returns the squared visibilities for a given star ID and
spectral channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 2D array [numspecchan,numscan], where the first index is
the number of desired spectral channels and the second is the number of scans
for a given star}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.vissq('fkv0380'); print x              # Get and print the squared
                                              # visibilities
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
These squared visibilities are normalized to unity.  Sometimes, negative
values may occur due to imperfect calibration.
\end{ahcomments}

\end{ahfunction}

\begin{ahfunction}{vissqerr}{Returns squared visibilities}

\ahkeyword{vissqerr}{vissqerr}
  
\begin{ahdescription}
This function returns the squared visibility errors for a given star ID and
spectral channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{double 2D array [numspecchan,numscan], where the first index is
the number of desired spectral channels and the second is the number of scans
for a given star}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.vissqerr('fkv0380'); print x           # Get and print the
                                              # squared-visibility errors
\end{verbatim}
\end{ahexample}

\end{ahfunction}

\begin{ahfunction}{getstar}{Returns everything}

\ahkeyword{getstar}{getstar}
  
\begin{ahdescription}
This function returns everything for a given star ID and spectral channels.
\end{ahdescription}

\begin{ahargs}
\ahaddarg{starid}{Star ID}{}{string}
\ahaddarg{specchan}{Spectral channels}{''}{'' or integer 1D vector}
\end{ahargs}

\ahreturns{a structure containing:}
\begin{verbatim}
  the star ID
  the number of scans for the given star
  the scan numbers
  the scan IDs
  the average scan times
  the right ascensions
  the declinations
  the calibration flag
  the output beam number
  the baseline number
  the baseline ID
  the number of given spectral channels
  the given spectral channels
  the spectrometer ID
  the wavelengths
  the wavelength errors
  the baseline vectors
  the channel widths
  the channel width errors
  the fringe modulation factor
  the HDS data type
  the uvw coordinates
  the squared visibilities
  the squared-visibility errors
\end{verbatim}

\begin{ahexample}
\begin{verbatim}
include 'vissq.g';
v := vissq( '1999-04-10.cha', 1, 'ae0-aw0' ); # Loads calibrated
                                              # squared-visibilities from an
                                              # HDS file format
x := v.getstar('fkv0380');                    # Get everything for a given
                                              # star ID and spectral channels
\end{verbatim}
\end{ahexample}

\begin{ahcomments}
These shapes and units of the items in the structure is the same as the
outputs of the corresponding functions.
\end{ahcomments}

\end{ahfunction}
